using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Data.SqlClient;

namespace Pingmint.CodeGen.Sql;

public partial interface IShadowSyncProxy
{
	Task<List<AddCaseRow>> AddCaseAsync(String callerName, String clientName, String companyCode, String phone, String fax, String eMail, String description, Int32 transcriptionID, String subject, String application);
	Task<List<AddCaseAttachmentRow>> AddCaseAttachmentAsync(Guid caseID, String fileName);
	Task<Int32> AddClientPatientProblemListCategoryAsync(Int32 clientId, Guid patientGuid, Int32 categoryId, String modifiedUser);
	Task<List<AddClientUserAuthorGroupEnrollmentRow>> AddClientUserAuthorGroupEnrollmentAsync(Int32 clientID, Int32 userID, Int32 authorGroupID, String modifiedUser, DateTime modifiedDate);
	Task<List<AddClientUserEmailResetTokenRow>> AddClientUserEmailResetTokenAsync(Int32 clientID, Int32 userID);
	Task<List<AddClientUserEmailTokenRow>> AddClientUserEmailTokenAsync(Int32 clientID, Int32 userID, String email);
	Task<Int32> AddClientUserInpatientWorklistVisitAsync(Int32 clientID, Int32 userID, Guid visitID, Int32 associateTypeID, String modifiedUser, DateTime modifiedDate);
	Task<List<AddClientUserLinkedAccountRow>> AddClientUserLinkedAccountAsync(Int32 sourceClientID, Int32 sourceUserID, Int32 targetClientID, Int32 targetUserID, String modifiedUser, DateTime modifiedDate);
	Task<List<AddClientUserTranscriptionLogRow>> AddClientUserTranscriptionLogAsync(Int32 transcriptionID, Int32 clientID, Int32 userID, Int32 actionID);
	Task<List<AddClientUserWorklistEncounterRow>> AddClientUserWorklistEncounterAsync(Int32 clientID, Int32 userID, Guid encounterID, Int32 associateTypeID, String modifiedUser, DateTime modifiedDate);
	Task<List<AddCompanyUserEmailTokenRow>> AddCompanyUserEmailTokenAsync(Int32 companyID, Int32 transcriptionistID, String email);
	Task<List<AddCompanyUserTranscriptionLogRow>> AddCompanyUserTranscriptionLogAsync(Int32 transcriptionID, Int32 clientID, Int32 userID, Int32 actionID);
	Task<List<AddDeviceRow>> AddDeviceAsync(Int32 deviceAPITypeID, String identifier, Boolean showDictationLog, Boolean printDictationLog, String modifiedUser, String extendedConfigurationInfo);
	Task<List<AddDeviceFolderRow>> AddDeviceFolderAsync(Int32 parentDeviceFolderID, Int32 deviceID, String folder, String modifiedUser, String displayName);
	Task<List<AddDeviceFolderOptionRow>> AddDeviceFolderOptionAsync(Int32 deviceID, Int32 deviceFolderID, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Boolean isStat, String modifiedUser);
	Task<List<AddDictationRow>> AddDictationAsync(Int32 dictationRouteID, Int32 dictationSourceID, String sourceMachineName, Boolean isStat, Int32 length, DateTimeOffset dateDictated, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Guid appointmentID, String patientID, DateTime appointmentDate, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String sourceFilePath, String inTouchFileRateID, String accountNumber, String comment, List<UniqueidentifierTableTypeRow> orders);
	Task<List<AddDictationFileRow>> AddDictationFileAsync(Int32 dictationID, Int32 dictationFileTypeID, String path, Int32 samplesPerSecond);
	Task<List<AddDocumentServiceJobRow>> AddDocumentServiceJobAsync(Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Guid appointmentID, String receiptCode, Boolean isMarkedForClientReview, String comment, List<TagsTableRow> tagsTable);
	Task<List<AddDocumentServiceJobAssociateRow>> AddDocumentServiceJobAssociateAsync(Int32 clientID, Guid documentServiceJobID, String modifiedUser, DateTime modifiedDate, Int32 associateID, String associateClientCode, String associateSpecialty, String associateGreeting, String associateBusinessName, String associatePrefix, String associateNameFirst, String associateNameMiddle, String associateNameLast, String associateSuffix, String associateAddress1, String associateAddress2, String associateAddress3, String associateCity, String associateState, String associateZipCode, String associateCompany, String associatePhone, String associateFax, String associateEMail, Int32 referralLocationID, Int32 referralUserID);
	Task<List<AddDocumentServiceJobAssociate2_Row>> AddDocumentServiceJobAssociate2Async(Int32 clientID, Guid documentServiceJobID, String modifiedUser, DateTime modifiedDate, Int32 associateID, String associateClientCode, String associateSpecialty, String associateGreeting, String associateBusinessName, String associatePrefix, String associateNameFirst, String associateNameMiddle, String associateNameLast, String associateSuffix, String associateAddress1, String associateAddress2, String associateAddress3, String associateCity, String associateState, String associateZipCode, String associateCompany, String associatePhone, String associateFax, String associateEMail, Int32 referralLocationID, Int32 referralUserID);
	Task<List<AddGlobalUserRow>> AddGlobalUserAsync(String username);
	Task<Int32> AddInterpreterSessionAsync(String externalSessionID, Int32 clientID, Int32 userID, Int32 languageID, Int32 sessionStatus, DateTime sessionStart, String patientID, String patientFullName);
	Task<Int32> AddNotificationAsync(Int32 transcriptionistID, Int32 userID, Int32 actionID, DateTime dateLogged, String comment, String workstation);
	Task<List<AddTranscriptionRow>> AddTranscriptionAsync(Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Int32 dictationRouteID, String transcriptionDictationPath, Boolean isStat, Int32 dictationLengthInSeconds, DateTimeOffset dateDictated, DateTime dateDictationReceived, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, DateTime appointmentDate, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comment, String modifiedUser, Int32 dictationID, Int32 appendToTranscriptionID, Int32 prependToTranscriptionID, Guid appointmentID, String appointmentClientCode, String physician, String appointmentExtendedInfo);
	Task<Int32> AddTranscriptionDictationAsync(Int32 transcriptionID, Int32 dictationID);
	Task<Int32> AddTranscriptionLogAsync(Int32 transcriptionID, Int32 clientID, Int32 userID, Int32 actionID);
	Task<Int32> AddTranscriptionLogForMTAsync(Int32 transcriptionID, Int32 clientID, Int32 transcriptionistID, Int32 actionID);
	Task<List<AddTranscriptionPackageRow>> AddTranscriptionPackageAsync(Int32 clientID, Int32 transcriptionistID, String machineName, String inScribeVersion, Int32 dictatingUserID, Int32 documentID, Int32 locationID, DateTimeOffset dateDictated, DateTime appointmentDate, Int32 patientLetterId, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 qAProgramId, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, Boolean transcriptionModified, Int32 workflowOverride, Boolean isMarkedForClientReview, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean wasSplit, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, List<SignaturesTable2Row> signaturesTable, List<TagsTableRow> tagsTable, List<NameValuePairsTableRow> optionalVariablesTable, List<AssociatesTableRow> associatesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Byte[] transcriptionContent, Int32 transcriptionContentTypeID, Byte[] hTMLContent, Int32 transcriptionID, Int32 originalTranscriptionID, Guid appointmentID, List<OrdersTableRow> ordersTable, DateTime admitDate, DateTime dischargeDate, String accountNumber, String bed, String floor, Boolean audioPlayed, Boolean audioPlayedFully, String patientCompany, String patientAddress3, Int32 priority);
	Task<List<AddTranscriptionPackage2_Row>> AddTranscriptionPackage2Async(Int32 clientID, Int32 transcriptionistID, String machineName, String inScribeVersion, Int32 dictatingUserID, Int32 documentID, Int32 locationID, DateTimeOffset dateDictated, DateTime appointmentDate, Int32 patientLetterId, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 qAProgramId, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, Boolean transcriptionModified, Int32 workflowOverride, Boolean isMarkedForClientReview, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean wasSplit, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, List<SignaturesTableRow> signaturesTable, List<TagsTableRow> tagsTable, List<NameValuePairsTableRow> optionalVariablesTable, List<AssociatesTable2Row> associatesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Byte[] transcriptionContent, Int32 transcriptionContentTypeID, Byte[] hTMLContent, Int32 transcriptionID, Int32 originalTranscriptionID, Guid appointmentID, List<OrdersTableRow> ordersTable, DateTime admitDate, DateTime dischargeDate, String accountNumber, String bed, String floor, Boolean audioPlayed, Boolean audioPlayedFully, String patientCompany, String patientAddress3, Int32 priority);
	Task<List<AddTranscriptionPackage3_Row>> AddTranscriptionPackage3Async(Int32 clientID, Int32 transcriptionistID, String machineName, String inScribeVersion, Int32 dictatingUserID, Int32 documentID, Int32 locationID, DateTimeOffset dateDictated, DateTime appointmentDate, Int32 patientLetterId, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 qAProgramId, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, Boolean transcriptionModified, Int32 workflowOverride, Boolean isMarkedForClientReview, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean wasSplit, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, List<SignaturesTableRow> signaturesTable, List<TagsTableRow> tagsTable, List<NameValuePairsTableRow> optionalVariablesTable, List<AssociatesTable3Row> associatesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Byte[] transcriptionContent, Int32 transcriptionContentTypeID, Byte[] hTMLContent, Int32 transcriptionID, Int32 originalTranscriptionID, Guid appointmentID, List<OrdersTableRow> ordersTable, DateTime admitDate, DateTime dischargeDate, String accountNumber, String bed, String floor, Boolean audioPlayed, Boolean audioPlayedFully, String patientCompany, String patientAddress3, Int32 priority);
	Task<List<AddTranscriptionPreviewRow>> AddTranscriptionPreviewAsync(Int32 transcriptionistID, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, String transcriptionID, DateTime appointmentDate, DateTime dateTranscribed, DateTime dateDictated, Boolean incomingStat, Int32 incomingPriority, String patientID, String patientName, String patientGender, DateTime patientBirthdate, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, Int32 originalTID, String patientCompany, String patientAddress3);
	Task<List<AddTranscriptionPreview2_Row>> AddTranscriptionPreview2Async(Int32 transcriptionistID, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, String transcriptionID, DateTime appointmentDate, DateTime dateTranscribed, DateTime dateDictated, Boolean incomingStat, Int32 incomingPriority, String patientID, String patientName, String patientGender, DateTime patientBirthdate, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, Int32 originalTID, String patientCompany, String patientAddress3);
	Task<List<AddTranscriptionPreviewAppointmentRow>> AddTranscriptionPreviewAppointmentAsync(Int32 previewID, Int32 clientID, Guid appointmentID, String appointmentClientCode, String physician, Int32 patientsAppointmentsTypeID, DateTime admitDate, DateTime dischargeDate, String accountNumber, String location, String room, String bed, String floor, String facility, String patientsAppointmentsStatusID, String patientClass, String patientType, Int32 transcriptionistID);
	Task<Int32> AddTranscriptionPreviewAppointmentProviderAsync(Int32 transcriptionPreviewAppointmentID, Int32 clientID, Int32 previewID, Guid patientsAppointmentsProviderID, Guid appointmentID, String providerClientCode, Int32 providerRoleID, String namePrefix, String nameFirst, String nameMiddle, String nameLast, String nameSuffix, Int32 transcriptionistID);
	Task<Int32> AddTranscriptionPreviewAssociateAsync(Int32 transcriptionID, Int32 clientID, Int32 associateID, String associateClientCode, String associatePrefix, String associateNameFirst, String associateNameMiddle, String associateNameLast, String associateSuffix, String associateBusinessName, String associateSpecialty, String associateGreeting, String associateAddress1, String associateAddress2, String associateAddress3, String associateCity, String associateState, String associateZipCode, String associateCountry, String associatePhone, String associateFax, String associateEMail, Int32 referralUserID, Boolean primaryAssociate, Boolean informalAssociate, Int32 referralLocationID, Int16 associateTypeID, Boolean addToDB, Boolean autoFax, String associateCompany);
	Task<Int32> AddTranscriptionPreviewAssociate2Async(Int32 transcriptionID, Int32 clientID, Int32 associateID, String associateClientCode, String associatePrefix, String associateNameFirst, String associateNameMiddle, String associateNameLast, String associateSuffix, String associateBusinessName, String associateSpecialty, String associateGreeting, String associateAddress1, String associateAddress2, String associateAddress3, String associateCity, String associateState, String associateZipCode, String associatePhone, String associateFax, String associateEMail, Int32 referralUserID, Boolean primaryAssociate, Boolean informalAssociate, Int32 referralLocationID, Int16 associateTypeID, Boolean addToDB, Boolean autoFax, String associateCompany);
	Task<Int32> AddTranscriptionPreviewAssociate3Async(Int32 transcriptionID, Int32 clientID, Int32 associateID, String associateClientCode, String associatePrefix, String associateNameFirst, String associateNameMiddle, String associateNameLast, String associateSuffix, String associateBusinessName, String associateSpecialty, String associateGreeting, String associateAddress1, String associateAddress2, String associateAddress3, String associateCity, String associateState, String associateZipCode, String associatePhone, String associateFax, String associateEMail, Int32 referralUserID, Boolean primaryAssociate, Boolean informalAssociate, Int32 referralLocationID, Int16 associateTypeID, Boolean addToDB, Boolean autoFax, String associateCompany);
	Task<List<AddTranscriptionPreviewOrderRow>> AddTranscriptionPreviewOrderAsync(Int32 previewID, Int32 clientID, Guid orderID, String patientID, Guid appointmentID, String accountNumber, String orderNumber, String accessionNumber, String orderStatusCode, DateTime dateObserved, DateTime dateRequested, String itemCode, String description, String notes, String userField1, String userField2, String userField3, String userField4, String userField5, Int32 transcriptionistID);
	Task<Int32> AddTranscriptionPreviewOrderProviderAsync(Int32 transcriptionPreviewOrderID, Int32 clientID, Int32 previewID, Guid ordersProviderID, Guid orderID, String providerClientCode, Int32 providerRoleID, String namePrefix, String nameFirst, String nameMiddle, String nameLast, String nameSuffix, Int32 transcriptionistID);
	Task<Int32> AddTranscriptionPreviewOrderProvider2Async(Int32 transcriptionPreviewOrderID, Int32 clientID, Int32 previewID, Guid ordersProviderID, Guid orderID, String providerClientCode, Int32 providerRoleID, String namePrefix, String nameFirst, String nameMiddle, String nameLast, String nameSuffix, Int32 transcriptionistID);
	Task<Int32> AddTranscriptionPreviewQAAsync(Int32 previewID, Int32 transcriptionistID, Int32 transcriptionID);
	Task<Int32> AddTranscriptionPreviewSignatureAsync(Int32 transcriptionID, Int32 clientId, Int32 userID, Int32 lastOrder);
	Task<List<AddTranscriptionVersionRow>> AddTranscriptionVersionAsync(Int32 clientID, Int32 transcriptionID, Guid transcriptionContentVersionID, Int64 logID, DateTime modifiedDate, String modifiedUser);
	Task<List<AddWorkItemRow>> AddWorkItemAsync(Int32 transcriptionistID, Int32 clientID, String machineName, Int32 transcriptionID, Int32 originalTranscriptionID);
	Task<List<ASRGetTranscriptionPreviewCDASortStyleSheetRow>> ASRGetTranscriptionPreviewCDASortStyleSheetAsync(Int32 previewID);
	Task<List<ASRGetTranscriptionPreviewCDAStylesheetRow>> ASRGetTranscriptionPreviewCDAStylesheetAsync(Int32 previewID);
	Task<List<ASRGetWorkItemCDASortStyleSheetRow>> ASRGetWorkItemCDASortStyleSheetAsync(Guid workItemID);
	Task<List<ASRGetWorkItemCDAStylesheetRow>> ASRGetWorkItemCDAStylesheetAsync(Guid workItemID);
	Task<List<AuthenticateAndroidUserRow>> AuthenticateAndroidUserAsync(String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion);
	Task<List<AuthenticateAndroidUserWithHashRow>> AuthenticateAndroidUserWithHashAsync(String clientName, String userName, Byte[] passwordHash, String iPAddress, String workstation, String programVersion);
	Task<List<AuthenticateAndroidUserWithLinkedAccountRow>> AuthenticateAndroidUserWithLinkedAccountAsync(Int32 clientID, Int32 userID, String userPass, String iPAddress, String workstation, String programVersion, Guid masterSessionKey);
	Task<List<AuthenticateAndroidUserWithLinkedAccountWithHashRow>> AuthenticateAndroidUserWithLinkedAccountWithHashAsync(Int32 clientID, Int32 userID, Byte[] passwordHash, String iPAddress, String workstation, String programVersion, Guid masterSessionKey);
	Task<List<AuthenticateAndroidUserWithLockRow>> AuthenticateAndroidUserWithLockAsync(String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion);
	Task<List<AuthenticateInScribeUserForPasswordResetRow>> AuthenticateInScribeUserForPasswordResetAsync(String companyCode, String userName, String iPAddress, String workstation, String programVersion);
	Task<List<AuthenticateInScribeUserWithHashRow>> AuthenticateInScribeUserWithHashAsync(String companyCode, String userName, Byte[] passwordHash, String iPAddress, String workstation, String programVersion);
	Task<List<AuthenticateInScribeUserWithLockRow>> AuthenticateInScribeUserWithLockAsync(String companyCode, String userName, String userPass, String iPAddress, String workstation, String programVersion);
	Task<List<AuthenticateInScribeUserWithLock2Row>> AuthenticateInScribeUserWithLock2Async(String companyCode, String userName, String userPass, String iPAddress, String workstation, String programVersion);
	Task<List<AuthenticateInSyncUserRow>> AuthenticateInSyncUserAsync(String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion);
	Task<List<AuthenticateInSyncUserWithHashRow>> AuthenticateInSyncUserWithHashAsync(String clientName, String userName, Byte[] passwordHash, String iPAddress, String workstation, String programVersion);
	Task<List<AuthenticateInSyncUserWithLockRow>> AuthenticateInSyncUserWithLockAsync(String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion);
	Task<List<AuthenticateInTouchServerRow>> AuthenticateInTouchServerAsync(String companyCode, String machineCode, String iPAddress, String password);
	Task<List<AuthenticateInTouchUserRow>> AuthenticateInTouchUserAsync(String clientName, String userName, Int32 userPin, String iPAddress, String workstation, String programVersion);
	Task<List<AuthenticateInTouchAccountRow>> AuthenticateInTouchAccountAsync(String companyCode, String machineCode, String iPAddress);
	Task<List<AuthenticateIPhoneUserRow>> AuthenticateIPhoneUserAsync(String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion);
	Task<List<AuthenticateIPhoneUserWithHashRow>> AuthenticateIPhoneUserWithHashAsync(String clientName, String userName, Byte[] passwordHash, String iPAddress, String workstation, String programVersion);
	Task<List<AuthenticateIPhoneUserWithLinkedAccountRow>> AuthenticateIPhoneUserWithLinkedAccountAsync(Int32 clientID, Int32 userID, String userPass, String iPAddress, String workstation, String programVersion, Guid masterSessionKey);
	Task<List<AuthenticateIPhoneUserWithLinkedAccountWithHashRow>> AuthenticateIPhoneUserWithLinkedAccountWithHashAsync(Int32 clientID, Int32 userID, Byte[] passwordHash, String iPAddress, String workstation, String programVersion, Guid masterSessionKey);
	Task<List<AuthenticateIPhoneUserWithLockRow>> AuthenticateIPhoneUserWithLockAsync(String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion);
	Task<List<AuthenticateIPhoneUserWithLock2Row>> AuthenticateIPhoneUserWithLock2Async(String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion);
	Task<List<AuthenticateNMSConnectorUserRow>> AuthenticateNMSConnectorUserAsync(String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion);
	Task<List<AuthenticateNMSConnectorUserWithHashRow>> AuthenticateNMSConnectorUserWithHashAsync(String clientName, String userName, Byte[] passwordHash, String iPAddress, String workstation, String programVersion);
	Task<List<AuthenticateServiceAccountRow>> AuthenticateServiceAccountAsync(String clientName, String loginCode, String password, String localIPAddress);
	Task<List<AuthenticateShadowLinkServiceAccountRow>> AuthenticateShadowLinkServiceAccountAsync(String clientName, String loginCode, String password, String localIPAddress);
	Task<List<AuthorizeRegionByClientRow>> AuthorizeRegionByClientAsync(Int32 authenticatedClientID, Int32 associateClientID);
	Task<Int32> CheckInWorkItemAsync(Int32 transcriptionID, Int32 clientID, Int32 transcriptionistID);
	Task<List<CommitDocumentServiceJobRow>> CommitDocumentServiceJobAsync(Int32 clientID, Guid documentServiceJobID);
	Task<Int32> CorrectTranscriptionAsync(Int32 transcriptionID, Int32 clientID, Int32 transcriptionistID, Int32 correctionTID);
	Task<List<DeleteClientUserAuthorGroupEnrollmentRow>> DeleteClientUserAuthorGroupEnrollmentAsync(Int32 clientID, Int32 userID, Int32 authorGroupID, String modifiedUser, DateTime modifiedDate);
	Task<Int32> DeleteClientUserInpatientWorklistVisitAsync(Int32 clientID, Int32 userID, Guid visitID, Int32 associateTypeID, String modifiedUser, DateTime modifiedDate);
	Task<Int32> DeleteClientUserLinkedAccountAsync(Int32 sourceClientID, Int32 sourceUserID, Int32 targetClientID, Int32 targetUserID);
	Task<Int32> DeleteClientUserWorklistEncounterAsync(Int32 clientID, Int32 userID, Guid encounterID, Int32 associateTypeID, String modifiedUser, DateTime modifiedDate);
	Task<Int32> DeleteCompanyInTouchServerResetUserAsync(Int32 companyID, Int32 serverID, Int32 userID);
	Task<Int32> DeleteDeviceFoldersAsync(Int32 deviceID);
	Task<Int32> DeleteDocumentServiceJobAssociatesAsync(Int32 clientID, Guid documentServiceJobID);
	Task<Int32> DeleteTranscriptionPreviewAsync(Int32 clientID, Int32 previewID);
	Task<List<EditCaseAttachmentFileRow>> EditCaseAttachmentFileAsync(Guid caseID, Int32 caseAttachmentID, Byte[] data);
	Task<List<EditClientUserContactInfoRow>> EditClientUserContactInfoAsync(Int32 clientID, Int32 userID, String modifiedUser, DateTime modifiedDate, String userEmail);
	Task<List<EditClientUserPasswordRow>> EditClientUserPasswordAsync(Int32 userID, Int32 clientID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID);
	Task<List<EditCompanyUserContactInfoRow>> EditCompanyUserContactInfoAsync(Int32 companyID, Int32 transcriptionistID, String transcriptionistEMail, String transcriptionistPhone1, String transcriptionistPhone2, String modifiedUser, DateTime modifiedDate);
	Task<List<EditCompanyUserInfoRow>> EditCompanyUserInfoAsync(Int32 companyID, Int32 transcriptionistID, String transcriptionistNameFirst, String transcriptionistNameMiddle, String transcriptionistNameLast, String transcriptionistEMail, String transcriptionistPhone1, String transcriptionistPhone2, String modifiedUser, DateTime modifiedDate);
	Task<List<EditCompanyUserPasswordRow>> EditCompanyUserPasswordAsync(Int32 userID, Int32 companyID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID);
	Task<Int32> EditDeviceAsync(Int32 deviceID, Int32 deviceAPITypeID, String identifier, Boolean showDictationLog, Boolean printDictationLog, String modifiedUser, String extendedConfigurationInfo);
	Task<List<EditDictationRow>> EditDictationAsync(Int32 dictationID, Int32 dictationStatusID, DateTime dateConverted, DateTime dateReceived, String errorDescription, Int32 lengthInSeconds, Int32 dictationRouteID);
	Task<List<EditDictationAppendRow>> EditDictationAppendAsync(Int32 clientID, Int32 dictationID, Int32 masterTranscriptionID);
	Task<Int32> EditDictationChunkUploadDateAsync(Int32 clientID, Int32 dictationID);
	Task<List<EditDictationPrependRow>> EditDictationPrependAsync(Int32 clientID, Int32 dictationID, Int32 masterTranscriptionID);
	Task<List<EditDictationStatusRow>> EditDictationStatusAsync(Int32 clientID, Int32 dictationID, Int32 dictationStatusID);
	Task<List<EditDocumentServiceJobContentRow>> EditDocumentServiceJobContentAsync(Int32 clientID, Guid documentServiceJobID, Int32 contentTypeID, Byte[] content);
	Task<List<EditDocumentServiceJobRelatedTranscriptionRow>> EditDocumentServiceJobRelatedTranscriptionAsync(Int32 clientID, Guid documentServiceJobID, Int32 precedingTranscriptionID, Int32 followingTranscriptionID);
	Task<Int32> EditInterpreterSessionEndAsync(String externalSessionID, Int32 sessionStatusID, Int32 sessionDuration, Int32 interpreterSessionsHangupCauseID, DateTime sessionEnd, String hangupCause);
	Task<Int32> EditInterpreterSessionRecordingAsync(String externalSessionID, String recordingURL);
	Task<Int32> EditInterpreterSessionStatusAsync(String externalSessionID, Int32 sessionStatusID, Int32 interpreterID);
	Task<Int32> EditProgramVersionAsync(Int32 programID, Int32 versionID, String versionNumber, Boolean upgradeRequired, Boolean upgradeAvailable, String upgradeMessage, String upgradeURL, String modifiedUser, DateTime modifiedDate, Boolean isPrivate);
	Task<Int32> EditTranscriptionCompleteFinalAsync(Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID);
	Task<Int32> EditTranscriptionCompleteFinal2Async(Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID);
	Task<Int32> EditTranscriptionCompletePreliminaryAsync(Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID);
	Task<List<EditTranscriptionCompletePreliminaryWithAppendRow>> EditTranscriptionCompletePreliminaryWithAppendAsync(Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID, String tranText);
	Task<Int32> EditTranscriptionCompleteReferralAsync(Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID);
	Task<Int32> EditTranscriptionCompleteReviewAsync(Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID);
	Task<Int32> EditTranscriptionCompleteReview2Async(Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID);
	Task<Int32> EditTranscriptionHeaderAsync(Int32 clientID, Int32 userID, Int32 transcriptionID, String modifiedUser, Int32 authorID, Int32 documentID, Int32 locationID, DateTime dictationDate, String patientID, String patientName, String patientGender, DateTime patientBirthdate, DateTime appointmentDate, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5);
	Task<Int32> EditTranscriptionHeaderV2Async(Int32 clientID, Int32 userID, Int32 transcriptionID, String modifiedUser, Int32 authorID, Int32 documentID, Int32 locationID, DateTime dateDictated, DateTime dateDictatedCST, String patientID, String patientName, String patientGender, DateTime patientBirthdate, DateTime appointmentDate, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5);
	Task<Int32> EditWorkItemAsync(Guid workItemID, Int32 transcriptionID, Int32 originalTranscriptionID, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 clientID, Int32 transcriptionistID, Int32 dictatingUserID, Int32 documentID, Int32 locationID, Byte[] transcriptionContent, DateTimeOffset dateDictated, DateTime appointmentDate, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 workflowOverride, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean isMarkedForClientReview, Int32 qAProgramId, Boolean transcriptionModified, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, String transcriptionDictationPath, Int32 patientLetterId, Boolean wasSplit, List<TagsTableRow> tagsTable, List<SignaturesTable2Row> signaturesTable, List<AssociatesTableRow> associatesTable, List<NameValuePairsTableRow> optionalVariablesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Int32 contentTypeID, Byte[] hTMLContent, String inScribeVersion, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, Boolean audioPlayed, Boolean audioPlayedFully);
	Task<Int32> EditWorkItem2Async(Guid workItemID, Int32 transcriptionID, Int32 originalTranscriptionID, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 clientID, Int32 transcriptionistID, Int32 dictatingUserID, Int32 documentID, Int32 locationID, Byte[] transcriptionContent, DateTimeOffset dateDictated, DateTime appointmentDate, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 workflowOverride, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean isMarkedForClientReview, Int32 qAProgramId, Boolean transcriptionModified, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, String transcriptionDictationPath, Int32 patientLetterId, Boolean wasSplit, List<TagsTableRow> tagsTable, List<SignaturesTableRow> signaturesTable, List<AssociatesTable2Row> associatesTable, List<NameValuePairsTableRow> optionalVariablesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Int32 contentTypeID, Byte[] hTMLContent, String inScribeVersion, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, Boolean audioPlayed, Boolean audioPlayedFully);
	Task<Int32> EditWorkItem3Async(Guid workItemID, Int32 transcriptionID, Int32 originalTranscriptionID, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 clientID, Int32 transcriptionistID, Int32 dictatingUserID, Int32 documentID, Int32 locationID, Byte[] transcriptionContent, DateTimeOffset dateDictated, DateTime appointmentDate, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 workflowOverride, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean isMarkedForClientReview, Int32 qAProgramId, Boolean transcriptionModified, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, String transcriptionDictationPath, Int32 patientLetterId, Boolean wasSplit, List<TagsTableRow> tagsTable, List<SignaturesTableRow> signaturesTable, List<AssociatesTable3Row> associatesTable, List<NameValuePairsTableRow> optionalVariablesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Int32 contentTypeID, Byte[] hTMLContent, String inScribeVersion, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, Boolean audioPlayed, Boolean audioPlayedFully);
	Task<List<EditWorkItemStatusRow>> EditWorkItemStatusAsync(Guid workItemID, DateTime dateProcessed, Int32 statusID);
	Task<Int32> EditWorkItemTranscriptionAsync(Guid workItemID, Byte[] transcriptionContent, Byte[] hTMLContent, Int32 contentTypeID);
	Task<List<EmergencyGetCompanyUserClientPoolTranscriptionJobRow>> EmergencyGetCompanyUserClientPoolTranscriptionJobAsync(Int32 companyID, Int32 companyUserID, Int32 transcriptionID, Boolean enableAvailablePoolJobs);
	Task<List<GetASRXSLStylesheetPathRow>> GetASRXSLStylesheetPathAsync(Int32 clientID, Int32 documentID, Int32 userID, Int32 locationID);
	Task<List<GetAttestationTemplateRow>> GetAttestationTemplateAsync(Int32 clientID, Int32 userID, Int32 templateID);
	Task<List<GetCaseAttachmentsRow>> GetCaseAttachmentsAsync(Guid caseID);
	Task<List<GetClientRow>> GetClientAsync(Int32 id);
	Task<List<GetClientAddressConfigurationRow>> GetClientAddressConfigurationAsync(Int32 clientID);
	Task<List<GetClientAppointmentDictationsRow>> GetClientAppointmentDictationsAsync(Int32 clientID, Guid appointmentID);
	Task<List<GetClientArtifactSearchPatientOrdersRow>> GetClientArtifactSearchPatientOrdersAsync(Int32 clientID, String nameLast, String nameFirst, DateTime birthdate, Int32 age, String gender, String patientID, String accountNumber, String orderNumber, DateTime appointmentDate, DateTime admissionDate, String nameFull, Int32 schedulingResourceUserID, DateTime patientAppointmentDate, DateTime appointmentAdmissionDate, String appointmentOrderNumber, String orderOrderNumber, String orderAccessionNumber, DateTime orderDateObserved, Int32 filterLocationID, Guid patientGUID, Guid patientVisitID, Guid orderID, Int32 patientsAppointmentsTypeID, DateTimeOffset appointmentAppointmentDateStart, DateTimeOffset appointmentAppointmentDateEnd);
	Task<List<GetClientArtifactSearchPatientsRow>> GetClientArtifactSearchPatientsAsync(Int32 clientID, String nameLast, String nameFirst, DateTime birthdate, Int32 age, String gender, String patientID, String accountNumber, String orderNumber, DateTime appointmentDate, DateTime admissionDate, String nameFull, DateTime appointmentAdmissionDate, DateTime appointmentAppointmentDate, String appointmentOrderNumber, String orderOrderNumber, String orderAccessionNumber, DateTime orderDateObserved, Int32 filterLocationID, Guid patientGUID, Guid patientVisitID, Guid orderID, Int32 patientsAppointmentsTypeID, DateTimeOffset appointmentAppointmentDateStart, DateTimeOffset appointmentAppointmentDateEnd);
	Task<List<GetClientArtifactSearchPatientVisitsRow>> GetClientArtifactSearchPatientVisitsAsync(Int32 clientID, String nameLast, String nameFirst, DateTime birthdate, Int32 age, String gender, String patientID, String accountNumber, String orderNumber, DateTime appointmentDate, DateTime admissionDate, String nameFull, Int32 schedulingResourceUserID, DateTime patientAppointmentDate, DateTime appointmentAdmissionDate, String appointmentOrderNumber, String orderOrderNumber, String orderAccessionNumber, DateTime orderDateObserved, Int32 filterLocationID, Guid patientGUID, Guid patientVisitID, Guid orderID, Int32 patientsAppointmentsTypeID, DateTimeOffset appointmentAppointmentDateStart, DateTimeOffset appointmentAppointmentDateEnd);
	Task<List<GetClientAssociateTypesRow>> GetClientAssociateTypesAsync(Int32 clientID);
	Task<List<GetClientAuthorGroupRow>> GetClientAuthorGroupAsync(Int32 clientID, Int32 authorGroupID);
	Task<List<GetClientAuthorGroupEncountersRow>> GetClientAuthorGroupEncountersAsync(Int32 clientID, Int32 authorGroupID);
	Task<List<GetClientAuthorGroupInpatientVisitsRow>> GetClientAuthorGroupInpatientVisitsAsync(Int32 clientID, Int32 authorGroupID);
	Task<List<GetClientAuthorGroupUsersRow>> GetClientAuthorGroupUsersAsync(Int32 clientID, Int32 authorGroupID);
	Task<List<GetClientAuthorGroupsRow>> GetClientAuthorGroupsAsync(Int32 clientID);
	Task<List<GetClientAuthorizationByCompanyInTouchServerIDRow>> GetClientAuthorizationByCompanyInTouchServerIDAsync(Int32 companyID, Int32 serverID, Int32 clientID);
	Task<List<GetClientAuthorizationByCompanyUserIDRow>> GetClientAuthorizationByCompanyUserIDAsync(Int32 companyID, Int32 userID, String machineCode, Int32 clientID);
	Task<List<GetClientDefaultPasswordHashAlgorithmRow>> GetClientDefaultPasswordHashAlgorithmAsync(Int32 clientID);
	Task<List<GetClientDictationFilePathRow>> GetClientDictationFilePathAsync(Int32 clientID, Int32 dictationID, Int32 userId, String userType);
	Task<List<GetClientDictationPathsRow>> GetClientDictationPathsAsync(Int32 clientID, Int32 dictationID);
	Task<List<GetClientDictationRecordsRow>> GetClientDictationRecordsAsync(Int32 clientID, Int32 dictationID);
	Task<List<GetClientDictationTemplateRow>> GetClientDictationTemplateAsync(Int32 clientID, Int32 templateID, Boolean includeStructuredBody);
	Task<List<GetClientDictationTemplateContentRow>> GetClientDictationTemplateContentAsync(Int32 clientID, Int32 templateID);
	Task<List<GetClientDictationTemplateInfoRow>> GetClientDictationTemplateInfoAsync(Int32 clientID, Int32 templateId);
	Task<List<GetClientDocumentTemplateRow>> GetClientDocumentTemplateAsync(Int32 clientID, Int32 documentTemplateID, Boolean includeStructuredBody);
	Task<List<GetClientDocumentTemplateContentRow>> GetClientDocumentTemplateContentAsync(Int32 clientID, Int32 documentTemplateID);
	Task<List<GetClientDocumentTypeRow>> GetClientDocumentTypeAsync(Int32 clientID, Int32 documentTypeID);
	Task<List<GetClientDocumentTemplateASRStylesheetRow>> GetClientDocumentTemplateASRStylesheetAsync(Int32 clientID, Int32 documentTemplateID);
	Task<List<GetClientDocumentTemplateCDAOptionsRow>> GetClientDocumentTemplateCDAOptionsAsync(Int32 clientID, Int32 documentTemplateID);
	Task<List<GetClientDocumentTemplateCDASectionsRow>> GetClientDocumentTemplateCDASectionsAsync(Int32 clientID, Int32 documentTemplateID);
	Task<List<GetClientDocumentTemplateInfoRow>> GetClientDocumentTemplateInfoAsync(Int32 clientID, Int32 templateId);
	Task<List<GetClientDocumentTypeLocationRow>> GetClientDocumentTypeLocationAsync(Int32 clientID, Int32 documentId);
	Task<List<GetClientDocumentTypeLocationsRow>> GetClientDocumentTypeLocationsAsync(Int32 clientID);
	Task<List<GetClientDocumentTypeSettingsRow>> GetClientDocumentTypeSettingsAsync(Int32 clientID, Int32 documentTypeID);
	Task<List<GetClientDocumentTypeGroupsRow>> GetClientDocumentTypeGroupsAsync(Int32 clientID);
	Task<List<GetClientDocumentTypesRow>> GetClientDocumentTypesAsync(Int32 clientID, Boolean includeInactive);
	Task<List<GetClientDocumentTypesPatientLettersRow>> GetClientDocumentTypesPatientLettersAsync(Int32 clientID);
	Task<List<GetClientFoldersRow>> GetClientFoldersAsync(Int32 clientID);
	Task<List<GetClientHeaderConfigurationRow>> GetClientHeaderConfigurationAsync(Int32 clientID, Int32 headerConfigurationID);
	Task<List<GetClientHeaderConfigurationByDocumentIDRow>> GetClientHeaderConfigurationByDocumentIDAsync(Int32 clientID, Int32 documentID);
	Task<List<GetClientHeaderConfigurationsRow>> GetClientHeaderConfigurationsAsync(Int32 clientID);
	Task<List<GetClientLocationRow>> GetClientLocationAsync(Int32 clientID, Int32 locationID);
	Task<List<GetClientLocationByClientCodeRow>> GetClientLocationByClientCodeAsync(Int32 clientID, String clientLocationID);
	Task<List<GetClientLocationResourceRow>> GetClientLocationResourceAsync(Int32 clientID, Int32 locationResourceID);
	Task<List<GetClientLocationResourceEncountersRow>> GetClientLocationResourceEncountersAsync(Int32 clientID, Int32 locationResourceID);
	Task<List<GetClientLocationResourceInpatientVisitsRow>> GetClientLocationResourceInpatientVisitsAsync(Int32 clientID, Int32 locationResourceID);
	Task<List<GetClientLocationsRow>> GetClientLocationsAsync(Int32 clientID, Boolean includeInactive);
	Task<List<GetClientPasswordComplexitySettingsRow>> GetClientPasswordComplexitySettingsAsync(Int32 clientID);
	Task<List<GetClientPatientDictationsRow>> GetClientPatientDictationsAsync(Int32 clientId, Guid patientGuid);
	Task<List<GetClientPatientProblemListCategoriesRow>> GetClientPatientProblemListCategoriesAsync(Int32 clientId, Guid patientGuid);
	Task<List<GetClientPatientProblemListCategoryRow>> GetClientPatientProblemListCategoryAsync(Int32 clientId, Guid patientGuid, Int32 categoryId);
	Task<List<GetClientPatientProblemListCategoryContentRow>> GetClientPatientProblemListCategoryContentAsync(Int32 clientId, Guid patientGuid, Int32 categoryId);
	Task<List<GetClientPatientTranscriptionDictationsRow>> GetClientPatientTranscriptionDictationsAsync(Int32 clientId, Guid patientGuid);
	Task<List<GetClientPatientLetterRow>> GetClientPatientLetterAsync(Int32 clientID, Int32 patientLetterID);
	Task<List<GetClientPatientLettersRow>> GetClientPatientLettersAsync(Int32 clientID);
	Task<List<GetClientPatientVisitRow>> GetClientPatientVisitAsync(Int32 clientID, Guid appointmentID);
	Task<List<GetClientPatientVisitDictationsRow>> GetClientPatientVisitDictationsAsync(Int32 clientID, Guid appointmentID);
	Task<List<GetClientPatientVisitTranscriptionsRow>> GetClientPatientVisitTranscriptionsAsync(Int32 clientID, Guid appointmentID);
	Task<List<GetClientProblemListCategoriesRow>> GetClientProblemListCategoriesAsync(Int32 clientId);
	Task<List<GetClientProblemListCategoryRow>> GetClientProblemListCategoryAsync(Int32 clientId, Int32 categoryId);
	Task<List<GetClientReferralsRow>> GetClientReferralsAsync(Int32 clientID, Boolean includeMasterClient);
	Task<List<GetClientServiceAccountRow>> GetClientServiceAccountAsync(Int32 clientID, Int32 serviceAccountID);
	Task<List<GetClientSettingsRow>> GetClientSettingsAsync(Int32 clientID);
	Task<List<GetClientSupportInformationRow>> GetClientSupportInformationAsync(Int32 clientID);
	Task<List<GetClientTagsRow>> GetClientTagsAsync(Int32 clientID);
	Task<List<GetClientTimeZoneIdentifierRow>> GetClientTimeZoneIdentifierAsync(Int32 clientID);
	Task<List<GetClientTranscriptionASRStylesheetRow>> GetClientTranscriptionASRStylesheetAsync(Int32 clientID, Int32 transcriptionID);
	Task<List<GetClientTranscriptionDictationFilePathByTIDRow>> GetClientTranscriptionDictationFilePathByTIDAsync(Int32 clientID, Int32 transcriptionID, Int32 userId, String userType);
	Task<List<GetClientTranscriptionDictationFiles2Row>> GetClientTranscriptionDictationFiles2Async(Int32 clientID, Int32 transcriptionID);
	Task<List<GetClientTranscriptionDictationPathsRow>> GetClientTranscriptionDictationPathsAsync(Int32 clientID, Int32 transcriptionID);
	Task<List<GetClientTranscriptionDictationPaths2Row>> GetClientTranscriptionDictationPaths2Async(Int32 clientID, Int32 transcriptionID);
	Task<List<GetClientTranscriptionDictationRecordsRow>> GetClientTranscriptionDictationRecordsAsync(Int32 clientID, Int32 transcriptionID);
	Task<List<GetClientTranscriptionDictationFilePathRow>> GetClientTranscriptionDictationFilePathAsync(Int32 clientID, Int32 transcriptionID);
	Task<List<GetClientTranscriptionDictationsByPatientIDRow>> GetClientTranscriptionDictationsByPatientIDAsync(Int32 clientId, String patientID);
	Task<List<GetClientTranscriptionOptionalVariablesRow>> GetClientTranscriptionOptionalVariablesAsync(Int32 clientID, Int32 transcriptionID);
	Task<List<GetClientTranscriptionPatientOrdersRow>> GetClientTranscriptionPatientOrdersAsync(Int32 clientID, Int32 transcriptionID);
	Task<List<GetClientTranscriptionTagsRow>> GetClientTranscriptionTagsAsync(Int32 clientID, Int32 transcriptionID);
	Task<List<GetClientUserRow>> GetClientUserAsync(Int32 clientID, Int32 userID);
	Task<List<GetClientUserAppointmentRow>> GetClientUserAppointmentAsync(Int32 clientID, Int32 userID, Guid appointmentID);
	Task<List<GetClientUserAppointmentsRow>> GetClientUserAppointmentsAsync(Int32 clientID, Int32 userID, DateTime startDate, DateTime endDate, DateTime prevApptDate, DateTime nextApptDate);
	Task<List<GetClientUserAttestationTemplatesRow>> GetClientUserAttestationTemplatesAsync(Int32 clientID, Int32 userID);
	Task<List<GetClientUserAuthenticatorsRow>> GetClientUserAuthenticatorsAsync(Int32 clientID, Int32 userID);
	Task<List<GetClientUserAuthorGroupsRow>> GetClientUserAuthorGroupsAsync(Int32 clientID, Int32 userID);
	Task<List<GetClientUserAuthorGroupsEnrolledRow>> GetClientUserAuthorGroupsEnrolledAsync(Int32 clientID, Int32 userID);
	Task<List<GetClientUserByUsernameAndCodeRow>> GetClientUserByUsernameAndCodeAsync(String clientCode, String username);
	Task<List<GetClientUserContactInfoRow>> GetClientUserContactInfoAsync(Int32 clientID, Int32 userID);
	Task<List<GetClientUserDictationTemplatesRow>> GetClientUserDictationTemplatesAsync(Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Boolean isShadowScribe);
	Task<List<GetClientUserDocumentTemplatesRow>> GetClientUserDocumentTemplatesAsync(Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Boolean isVR);
	Task<List<GetClientUserDocumentTypesRow>> GetClientUserDocumentTypesAsync(Int32 clientID, Int32 userID, Boolean includeInactive);
	Task<List<GetClientUserEmailVerificationStatusRow>> GetClientUserEmailVerificationStatusAsync(Int32 clientID, Int32 userID);
	Task<List<GetClientUserEncountersSearchRow>> GetClientUserEncountersSearchAsync(Int32 clientID, Int32 userID, Int32 patientsAppointmentsTypeID, String patientID, String patientName, String orderNumber);
	Task<List<GetClientUserFeatureFlagRow>> GetClientUserFeatureFlagAsync(String featureFlagName, Int32 clientID, Int32 userID);
	Task<List<GetClientUserFeatureFlag2_Row>> GetClientUserFeatureFlag2Async(String featureFlagName, Int32 clientID, Int32 userID);
	Task<List<GetClientUserFoldersRow>> GetClientUserFoldersAsync(Int32 clientID, Int32 userID);
	Task<List<GetClientUserForPasswordResetRow>> GetClientUserForPasswordResetAsync(String clientName, String userName, String iPAddress, String workstation, String programVersion);
	Task<List<GetClientUserInpatientWorklistRow>> GetClientUserInpatientWorklistAsync(Int32 clientID, Int32 userID);
	Task<List<GetClientUserLinkedAccountsRow>> GetClientUserLinkedAccountsAsync(Int32 sourceClientID, Int32 sourceUserID);
	Task<List<GetClientUserLocationResourcesRow>> GetClientUserLocationResourcesAsync(Int32 clientID, Int32 userID);
	Task<List<GetClientUserLocationsRow>> GetClientUserLocationsAsync(Int32 clientID, Int32 userID, Boolean includeInactive);
	Task<List<GetClientUserPasswordHistoryRow>> GetClientUserPasswordHistoryAsync(Int32 clientID, Int32 userID);
	Task<List<GetClientUserPasswordLockRow>> GetClientUserPasswordLockAsync(String clientName, String userName);
	Task<List<GetClientUserPreferredDocumentTemplatesRow>> GetClientUserPreferredDocumentTemplatesAsync(Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID);
	Task<List<GetClientUserProxyUsersRow>> GetClientUserProxyUsersAsync(Int32 clientID, Int32 userID);
	Task<List<GetClientUserScheduleResourcesRow>> GetClientUserScheduleResourcesAsync(Int32 clientID, Int32 userID);
	Task<List<GetClientUserSettingsRow>> GetClientUserSettingsAsync(Int32 clientID, Int32 userID);
	Task<List<GetClientUserTimeZoneIdentifierRow>> GetClientUserTimeZoneIdentifierAsync(Int32 clientID, Int32 userID);
	Task<List<GetClientUserTranscriptionCommentRow>> GetClientUserTranscriptionCommentAsync(Int32 transcriptionID);
	Task<List<GetClientUserTranscriptionTagsRow>> GetClientUserTranscriptionTagsAsync(Int32 transcriptionID, Boolean active);
	Task<List<GetClientUserTranscriptionsByPatientIDRow>> GetClientUserTranscriptionsByPatientIDAsync(Int32 clientID, Int32 userID, String patientID);
	Task<List<GetClientUserTranscriptionsFinalRow>> GetClientUserTranscriptionsFinalAsync(Int32 clientID, Int32 userID, Int32 transcriptionID);
	Task<List<GetClientUserTranscriptionsFinalLocationBasedRow>> GetClientUserTranscriptionsFinalLocationBasedAsync(Int32 clientID, Int32 userID, Int32 transcriptionID);
	Task<List<GetClientUserTranscriptionsFinal2Row>> GetClientUserTranscriptionsFinal2Async(Int32 clientID, Int32 userID, Int32 transcriptionID);
	Task<List<GetClientUserTranscriptionsFinal2LocationBasedRow>> GetClientUserTranscriptionsFinal2LocationBasedAsync(Int32 clientID, Int32 userID, Int32 transcriptionID);
	Task<List<GetClientUserTranscriptionsPreliminaryRow>> GetClientUserTranscriptionsPreliminaryAsync(Int32 clientID, Int32 userID, Int32 transcriptionID);
	Task<List<GetClientUserTranscriptionsReferralRow>> GetClientUserTranscriptionsReferralAsync(Int32 clientID, Int32 userID, Int32 transcriptionID);
	Task<List<GetClientUserTranscriptionsReviewRow>> GetClientUserTranscriptionsReviewAsync(Int32 clientID, Int32 userID, Int32 transcriptionID);
	Task<List<GetClientUserTranscriptionsReviewLocationBasedRow>> GetClientUserTranscriptionsReviewLocationBasedAsync(Int32 clientID, Int32 userID, Int32 transcriptionID);
	Task<List<GetClientUserTranscriptionsReview2Row>> GetClientUserTranscriptionsReview2Async(Int32 clientID, Int32 userID, Int32 transcriptionID);
	Task<List<GetClientUserTranscriptionsReview2LocationBasedRow>> GetClientUserTranscriptionsReview2LocationBasedAsync(Int32 clientID, Int32 userID, Int32 transcriptionID);
	Task<List<GetClientUserTranscriptionsSearchAllRow>> GetClientUserTranscriptionsSearchAllAsync(Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 clinicianID, Int32 locationID, Int32 documentID, String patientID, String patientName, String receiptCode, String orderNumber, Int32 additionalAuthenticatorID, DateTimeOffset dateDictatedStart, DateTimeOffset dateDictatedEnd, DateTimeOffset appointmentDateStart, DateTimeOffset appointmentDateEnd, Boolean includeLinkedUsers);
	Task<List<GetClientUserTranscriptionsSearchAllV2Row>> GetClientUserTranscriptionsSearchAllV2Async(Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 clinicianID, Int32 locationID, Int32 documentID, String patientID, String patientName, String receiptCode, String orderNumber, Int32 additionalAuthenticatorID, DateTimeOffset dateDictatedStart, DateTimeOffset dateDictatedEnd, DateTimeOffset appointmentDateStart, DateTimeOffset appointmentDateEnd, Boolean includeLinkedUsers);
	Task<List<GetClientUserTranscriptionsUndeliveredRow>> GetClientUserTranscriptionsUndeliveredAsync(Int32 clientID, Int32 userID, Int32 transcriptionID);
	Task<List<GetClientUserWorklistEncountersRow>> GetClientUserWorklistEncountersAsync(Int32 clientID, Int32 userID);
	Task<List<GetClientUsersRow>> GetClientUsersAsync(Int32 clientID);
	Task<List<GetClientUsersDefaultsRow>> GetClientUsersDefaultsAsync(Int32 clientID);
	Task<List<GetCloudAppRegistrationRow>> GetCloudAppRegistrationAsync(String emdatApplicationCode, Int32 cloudDirectoryID);
	Task<List<GetCompanyRow>> GetCompanyAsync(Int32 companyID);
	Task<List<GetCompanyClientDocumentTypesProgramsRow>> GetCompanyClientDocumentTypesProgramsAsync(Int32 companyId, Int32 clientID);
	Task<List<GetCompanyClientRelationshipRow>> GetCompanyClientRelationshipAsync(Int32 companyID, Int32 clientID);
	Task<List<GetCompanyClientsRow>> GetCompanyClientsAsync(Int32 companyID);
	Task<List<GetCompanyDefaultPasswordHashAlgorithmRow>> GetCompanyDefaultPasswordHashAlgorithmAsync(Int32 companyID);
	Task<List<GetCompanyEmailSettingsRow>> GetCompanyEmailSettingsAsync(Int32 companyID);
	Task<List<GetCompanyInTouchServerRow>> GetCompanyInTouchServerAsync(Int32 companyID, Int32 serverID);
	Task<List<GetCompanyInTouchServerClientUsersRow>> GetCompanyInTouchServerClientUsersAsync(Int32 companyID, Int32 serverID, Int32 clientID);
	Task<List<GetCompanyInTouchServerClientsRow>> GetCompanyInTouchServerClientsAsync(Int32 companyID, Int32 serverID, DateTime lastModifiedDate);
	Task<List<GetCompanyInTouchServerResetUsersRow>> GetCompanyInTouchServerResetUsersAsync(Int32 companyID, Int32 serverID);
	Task<List<GetCompanyInTouchAccountRow>> GetCompanyInTouchAccountAsync(Int32 companyID, Int32 inTouchAccountID);
	Task<List<GetCompanyPasswordComplexitySettingsRow>> GetCompanyPasswordComplexitySettingsAsync(Int32 companyID);
	Task<List<GetCompanyQARatingAuthorizationRow>> GetCompanyQARatingAuthorizationAsync(Int32 companyID, Int32 qARatingCompanyID);
	Task<List<GetCompanyQARatingCategoriesRow>> GetCompanyQARatingCategoriesAsync(Int32 companyId);
	Task<List<GetCompanyQARatingCategoryRow>> GetCompanyQARatingCategoryAsync(Int32 companyId, Int32 categoryId);
	Task<List<GetCompanyQARatingProgramRow>> GetCompanyQARatingProgramAsync(Int32 companyId, Int32 programId);
	Task<List<GetCompanyQARatingProgramRatingRow>> GetCompanyQARatingProgramRatingAsync(Int32 companyId, Int32 programId, Int32 ratingId);
	Task<List<GetCompanyQARatingProgramRatingsRow>> GetCompanyQARatingProgramRatingsAsync(Int32 companyId, Int32 programId);
	Task<List<GetCompanyQARatingProgramsRow>> GetCompanyQARatingProgramsAsync(Int32 companyId);
	Task<List<GetCompanySupportInformationRow>> GetCompanySupportInformationAsync(Int32 companyID);
	Task<List<GetCompanySupportInformationInScribeSupportNotesRow>> GetCompanySupportInformationInScribeSupportNotesAsync(Int32 companyID);
	Task<List<GetCompanyUserRow>> GetCompanyUserAsync(Int32 companyID, Int32 userID);
	Task<List<GetCompanyUserByUsernameAndCodeRow>> GetCompanyUserByUsernameAndCodeAsync(String companyCode, String username);
	Task<List<GetCompanyUserClientPoolTranscriptionJobRow>> GetCompanyUserClientPoolTranscriptionJobAsync(Int32 companyID, Int32 companyUserID, Int32 transcriptionID, Boolean enableAvailablePoolJobs);
	Task<List<GetCompanyUserClientPoolTranscriptionJobAssociatesRow>> GetCompanyUserClientPoolTranscriptionJobAssociatesAsync(Int32 companyID, Int32 companyUserID, Int32 transcriptionID);
	Task<List<GetCompanyUserClientPoolTranscriptionJobLogEntriesRow>> GetCompanyUserClientPoolTranscriptionJobLogEntriesAsync(Int32 companyID, Int32 companyUserID, Int32 transcriptionID);
	Task<List<GetCompanyUserClientPoolTranscriptionJobOptionalVariablesRow>> GetCompanyUserClientPoolTranscriptionJobOptionalVariablesAsync(Int32 companyID, Int32 companyUserID, Int32 transcriptionID);
	Task<List<GetCompanyUserClientPoolTranscriptionJobSignaturesRow>> GetCompanyUserClientPoolTranscriptionJobSignaturesAsync(Int32 companyID, Int32 companyUserID, Int32 transcriptionID);
	Task<List<GetCompanyUserClientPoolTranscriptionJobTagsRow>> GetCompanyUserClientPoolTranscriptionJobTagsAsync(Int32 companyID, Int32 companyUserID, Int32 transcriptionID, Boolean active);
	Task<List<GetCompanyUserContactInfoRow>> GetCompanyUserContactInfoAsync(Int32 companyID, Int32 userID);
	Task<List<GetCompanyUserEmailVerificationStatusRow>> GetCompanyUserEmailVerificationStatusAsync(Int32 companyID, Int32 userID);
	Task<List<GetCompanyUserFeatureFlagRow>> GetCompanyUserFeatureFlagAsync(String featureFlagName, Int32 userID);
	Task<List<GetCompanyUserFeatureFlag2Row>> GetCompanyUserFeatureFlag2Async(String featureFlagName, Int32 companyID, Int32 userID);
	Task<List<GetCompanyUserMachineClientPoolTranscriptionJobsRow>> GetCompanyUserMachineClientPoolTranscriptionJobsAsync(Int32 companyID, Int32 companyUserID, String machineCode);
	Task<List<GetCompanyUserMachineClientPoolTranscriptionJobsV2Row>> GetCompanyUserMachineClientPoolTranscriptionJobsV2Async(Int32 companyID, Int32 companyUserID, String machineCode);
	Task<List<GetCompanyUserPasswordHistoryRow>> GetCompanyUserPasswordHistoryAsync(Int32 companyID, Int32 transcriptionistID);
	Task<List<GetCompanyUserPasswordLockRow>> GetCompanyUserPasswordLockAsync(String companyName, String userName);
	Task<List<GetCompanyUserQAFeedbackCountsRow>> GetCompanyUserQAFeedbackCountsAsync(Int32 companyID, Int32 userID, DateTime lastDate);
	Task<List<GetCompanyUserSettingsRow>> GetCompanyUserSettingsAsync(Int32 companyID, Int32 companyUserID);
	Task<List<GetCompanyUserTranscriptionRow>> GetCompanyUserTranscriptionAsync(Int32 companyID, Int32 companyUserID, Int32 transcriptionID);
	Task<List<GetCompanyUserTranscriptionLogByDateDeliveredRow>> GetCompanyUserTranscriptionLogByDateDeliveredAsync(Int32 companyID, Int32 companyUserID, Int32 clientID, DateTime startDate, DateTime endDate);
	Task<List<GetCompanyUserTranscriptionLogByDateDelivered2Row>> GetCompanyUserTranscriptionLogByDateDelivered2Async(Int32 companyID, Int32 companyUserID, String clientName, DateTime startDate, DateTime endDate);
	Task<List<GetCompanyUserTranscriptionLogByDateTranscribedRow>> GetCompanyUserTranscriptionLogByDateTranscribedAsync(Int32 companyID, Int32 companyUserID, Int32 clientID, DateTime startDate, DateTime endDate);
	Task<List<GetCompanyUserTranscriptionLogByDateTranscribed2Row>> GetCompanyUserTranscriptionLogByDateTranscribed2Async(Int32 companyID, Int32 companyUserID, String clientName, DateTime startDate, DateTime endDate);
	Task<List<GetCompanyUserTranscriptionPreviewRow>> GetCompanyUserTranscriptionPreviewAsync(Int32 companyID, Int32 userID, Int32 previewID);
	Task<List<GetCompanyUserTranscriptionPreviewAssociatesRow>> GetCompanyUserTranscriptionPreviewAssociatesAsync(Int32 companyID, Int32 userID, Int32 previewID);
	Task<List<GetCompanyUserTranscriptionPreviewCountsRow>> GetCompanyUserTranscriptionPreviewCountsAsync(Int32 companyID, Int32 userID, Int32 clientID, String transcriptionText, String demographicsText);
	Task<List<GetCompanyUserTranscriptionsPoolRow>> GetCompanyUserTranscriptionsPoolAsync(Int32 transcriptionCompanyId, Int32 transcriptionistID, String machineCode, Boolean includeVR);
	Task<List<GetCompanyUserTranscriptionsPoolCountRow>> GetCompanyUserTranscriptionsPoolCountAsync(Int32 transcriptionCompanyId, Int32 transcriptionistID, String machineCode);
	Task<List<GetDefaultHeaderConfigurationRow>> GetDefaultHeaderConfigurationAsync();
	Task<List<GetDeviceByIdRow>> GetDeviceByIdAsync(Int32 deviceID);
	Task<List<GetDeviceByIdentifierRow>> GetDeviceByIdentifierAsync(String identifier);
	Task<List<GetDeviceFoldersRow>> GetDeviceFoldersAsync(Int32 deviceID);
	Task<List<GetDictationRow>> GetDictationAsync(Int32 clientID, Int32 dictationID);
	Task<List<GetDictationASRDraftRow>> GetDictationASRDraftAsync(Int32 clientID, Int32 dictationID);
	Task<List<GetDictationFilesRow>> GetDictationFilesAsync(Int32 dictationID);
	Task<List<GetDictationRouteRow>> GetDictationRouteAsync(Int32 dictationRouteID);
	Task<List<GetDictationRouteByDocumentRow>> GetDictationRouteByDocumentAsync(Int32 clientID, Int32 dictatingUserID, Int32 documentTypeID, Int32 dictationFileTypeID);
	Task<List<GetDictationRouteFileTypesRow>> GetDictationRouteFileTypesAsync(Int32 dictationRouteID);
	Task<List<GetDocumentServiceJobRow>> GetDocumentServiceJobAsync(Int32 clientID, Guid documentServiceJobID);
	Task<List<GetDocumentServiceJobAssociatesRow>> GetDocumentServiceJobAssociatesAsync(Int32 clientID, Guid documentServiceJobID);
	Task<List<GetDocumentServiceJobTagsRow>> GetDocumentServiceJobTagsAsync(Guid documentServiceJobID);
	Task<List<GetFeatureFlagRow>> GetFeatureFlagAsync(String featureFlagName);
	Task<List<GetFormatTypeRow>> GetFormatTypeAsync(String name);
	Task<List<GetInScribeLoginIPAddressesRow>> GetInScribeLoginIPAddressesAsync(Int64 defaultBatchSize);
	Task<List<GetInterpreterByPhoneNumberRow>> GetInterpreterByPhoneNumberAsync(String phoneNumber, Int32 languageID, Int32 clientID);
	Task<List<GetInterpreterLanguagesByClientRow>> GetInterpreterLanguagesByClientAsync(Int32 clientID);
	Task<List<GetInterpretersByLanguageRow>> GetInterpretersByLanguageAsync(Int32 languageID, Int32 clientID);
	Task<List<GetInTouchEmulationRow>> GetInTouchEmulationAsync(Int32 emulationID);
	Task<List<GetInTouchEmulationListenPromptsRow>> GetInTouchEmulationListenPromptsAsync(Int32 emulationID);
	Task<List<GetInTouchEmulationPromptsRow>> GetInTouchEmulationPromptsAsync(Int32 emulationID);
	Task<List<GetInTouchEmulationsRow>> GetInTouchEmulationsAsync();
	Task<List<GetLinkedTranscriptionsRow>> GetLinkedTranscriptionsAsync(Int32 clientID, Int32 transcriptionID);
	Task<List<GetMasterTIDRow>> GetMasterTIDAsync(Int32 clientID, Int32 transcriptionID);
	Task<List<GetPasswordHashAlgorithmRow>> GetPasswordHashAlgorithmAsync(Int32 algorithmID);
	Task<List<GetPatientRow>> GetPatientAsync(Int32 clientID, String patientID, Boolean useFieldMask);
	Task<List<GetPatientAppointmentRow>> GetPatientAppointmentAsync(Int32 clientID, Guid appointmentID);
	Task<List<GetProgramRow>> GetProgramAsync(Int32 programID);
	Task<List<GetProgramVersionRow>> GetProgramVersionAsync(Int32 programID, Int32 versionID);
	Task<List<GetProgramVersionByNumberRow>> GetProgramVersionByNumberAsync(Int32 programID, String versionNumber);
	Task<List<GetProgramVersionsRow>> GetProgramVersionsAsync(Int32 programID);
	Task<List<GetProgramsRow>> GetProgramsAsync();
	Task<List<GetReferralTranscriptionAuthorizationByUserIDRow>> GetReferralTranscriptionAuthorizationByUserIDAsync(Int32 clientID, Int32 userID, Int32 transcriptionClientID, Int32 transcriptionID);
	Task<List<GetServerTimeZoneIdentifierRow>> GetServerTimeZoneIdentifierAsync();
	Task<List<GetServerVariableRow>> GetServerVariableAsync(String serverVariable);
	Task<List<GetTranscriptionRow>> GetTranscriptionAsync(Int32 clientID, Int32 transcriptionID);
	Task<List<GetTranscriptionAssociatesRow>> GetTranscriptionAssociatesAsync(Int32 clientID, Int32 transcriptionID);
	Task<List<GetTranscriptionAuthorizationByCompanyUserIDRow>> GetTranscriptionAuthorizationByCompanyUserIDAsync(Int32 companyID, Int32 userID, Int32 transcriptionClientID, Int32 transcriptionID);
	Task<List<GetTranscriptionAuthorizationByUserIDRow>> GetTranscriptionAuthorizationByUserIDAsync(Int32 clientID, Int32 userID, Int32 transcriptionClientID, Int32 transcriptionID);
	Task<List<GetTranscriptionCommentAuthorizationByUserIDRow>> GetTranscriptionCommentAuthorizationByUserIDAsync(Int32 userID);
	Task<List<GetTranscriptionDictationRow>> GetTranscriptionDictationAsync(Int32 clientID, Int32 transcriptionID);
	Task<List<GetTranscriptionSignaturesRow>> GetTranscriptionSignaturesAsync(Int32 clientID, Int32 transcriptionID);
	Task<List<GetTranscriptionValidationRuleDataRow>> GetTranscriptionValidationRuleDataAsync(Int32 clientID, List<IntTableTypeRow> transcriptionIDs);
	Task<List<GetTranscriptionWorkflowFoldersRow>> GetTranscriptionWorkflowFoldersAsync(Int32 clientID, Int32 transcriptionID);
	Task<List<GetTranscriptionIDByDictationIDRow>> GetTranscriptionIDByDictationIDAsync(Int32 clientID, Int32 dictationID);
	Task<List<GetTranscriptionistClientPoolDefaultsRow>> GetTranscriptionistClientPoolDefaultsAsync(Int32 transcriptionCompanyID, Int32 transcriptionistID, Int32 clientID);
	Task<List<GetTranscriptionistClientsRow>> GetTranscriptionistClientsAsync(Int32 companyID, Int32 transcriptionistID);
	Task<Int32> GetTranscriptionistWorkstationPoliciesAsync(Int32 companyId, Int32 transcriptionistId);
	Task<List<GetTranscriptionistWorkstationPolicyRow>> GetTranscriptionistWorkstationPolicyAsync(Int32 companyId, Int32 transcriptionistId);
	Task<List<GetUserVRStatusByDocumentIDRow>> GetUserVRStatusByDocumentIDAsync(Int32 clientID, Int32 userID, Int32 documentID, Int32 dictationFileTypeID);
	Task<List<GetValidationRuleSnippetsByClientIdRow>> GetValidationRuleSnippetsByClientIdAsync(Int32 clientID);
	Task<List<GetValidationRulesRow>> GetValidationRulesAsync(Int32 clientID);
	Task<List<GetVRStatusByDictationIDRow>> GetVRStatusByDictationIDAsync(String clientName, String userDictationID, String audioFileExtension, String documentTypeDictationID);
	Task<List<GetWorkItemTranscriptionRow>> GetWorkItemTranscriptionAsync(Guid workItemID);
	Task<List<GetWorkItemDictationFileNameRow>> GetWorkItemDictationFileNameAsync(Guid workItemID);
	Task<List<GetWorkItemIDByTIDRow>> GetWorkItemIDByTIDAsync(Int32 transcriptionistID, String machineName, Int32 transcriptionID);
	Task<Int32> InvalidateWorkItemAsync(Int32 transcriptionID, Int32 clientID, Int32 transcriptionistID, String comment);
	Task<Int32> LogClientUserPasswordResetAttemptAsync(String clientName, String userName, String iPAddress, String workstation, String programVersion, String actionResult);
	Task<Int32> LogDictationPlayedAsync(Int32 clientID, Int32 userID, Int32 dictationID, String userType);
	Task<Int32> LogFailedLoginAttemptAsync(String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion, Int32 logEventID);
	Task<Int32> LogFailedTranscriptionistLoginAttemptAsync(String companyCode, String userName, String userPass, String iPAddress, String workstation, String programVersion, Int32 logEventID, String mACAddress);
	Task<Int32> LogSuccessfulLoginAttemptAsync(String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion, Int32 logEventID);
	Task<Int32> LogSuccessfulTranscriptionistLoginAttemptAsync(String companyCode, String userName, String userPass, String iPAddress, String workstation, String programVersion, Int32 logEventID, String mACAddress);
	Task<List<MapToDocumentTypeIDRow>> MapToDocumentTypeIDAsync(Int32 clientID, String documentType, String dictationID, String clientCode);
	Task<List<MapToLocationIDRow>> MapToLocationIDAsync(Int32 clientID, String medicalRecordsLocationName, String dictationID, String clientCode);
	Task<List<MapToUserIDRow>> MapToUserIDAsync(Int32 clientID, String username, String dictationID, String clientCode);
	Task<Int32> RepoolWorkItemAsync(Int32 transcriptionID, Int32 clientID, Int32 authorID, Int32 documentID, Int32 locationID, Int32 userID);
	Task<Int32> ResetInScribeUserPasswordAsync(Int32 userID, String newPassword, Int32 companyID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID);
	Task<Int32> ResetInScribeUserPassword2Async(Int32 userID, Int32 companyID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID);
	Task<List<SearchClientTranscriptionDictationsRow>> SearchClientTranscriptionDictationsAsync(Int32 clientId, String patientID, String accountNumber, String orderNumber, String receiptCode, Int32 documentID, Int32 locationID);
	Task<Int32> SearchCompanyUserTranscriptionsAsync(Int32 companyID, Int32 companyUserID, Int32 clientID, Int32 userID, Int32 documentID, String patientID, String patientName, Int32 transcriptionID);
	Task<Int32> SendClientUserEmailAsync(Int32 clientID, Int32 userID, String subject, String body, Byte format);
	Task<Int32> SendCompanyUserEmailAsync(Int32 companyID, Int32 userID, String subject, String body, Byte format);
	Task<Int32> SendInScribeUserPasswordEmailAsync(Int32 userID, Int32 companyID, String resetCode);
	Task<Int32> UpdateClientPatientProblemListCategoryContentAsync(Int32 clientId, Guid patientGuid, Int32 categoryId, String content);
	Task<List<UpdateClientUserPasswordRow>> UpdateClientUserPasswordAsync(Int32 userID, String newPassword, Int32 clientID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID);
	Task<List<UpdateClientUserPassword2_Row>> UpdateClientUserPassword2Async(Int32 userID, String newPassword, Int32 clientID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID);
	Task<List<UpdateCompanyUserPasswordRow>> UpdateCompanyUserPasswordAsync(Int32 userID, String newPassword, Int32 companyID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID);
	Task<List<UpdateCompanyUserPassword2_Row>> UpdateCompanyUserPassword2Async(Int32 userID, String newPassword, Int32 companyID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID);
	Task<Int32> UpdateGeoLocationAsync(Int32 logEventsSecurityID, String geoLocation);
	Task<Int32> UpdatePasswordLockAsync(String userName, String clientName);
	Task<Int32> UpdatePasswordLock2Async(String userName, String clientName);
	Task<Int32> UpdateTranscriptionistPasswordLockAsync(String userName, String companyCode);
}

public partial class AssociatesTable2Row // dbo.AssociatesTable2
{
	public Int32 ClientID { get; set; }
	public Int32? AssociateID { get; set; }
	public String? AssociateClientCode { get; set; }
	public String? NamePrefix { get; set; }
	public String? NameFirst { get; set; }
	public String? NameMiddle { get; set; }
	public String? NameLast { get; set; }
	public String? NameSuffix { get; set; }
	public String? BusinessName { get; set; }
	public String? Specialty { get; set; }
	public String? Greeting { get; set; }
	public String? Address1 { get; set; }
	public String? Address2 { get; set; }
	public String? Address3 { get; set; }
	public String? City { get; set; }
	public String? State { get; set; }
	public String? ZipCode { get; set; }
	public String? Country { get; set; }
	public String? Phone { get; set; }
	public String? Fax { get; set; }
	public String? Email { get; set; }
	public Int32? ReferralUserID { get; set; }
	public Boolean? UseAutoFax { get; set; }
	public Int32? ReferralLocationID { get; set; }
	public Int32? ExportType { get; set; }
	public Int16? AssociateTypeID { get; set; }
	public Boolean? IsPrimary { get; set; }
	public Boolean? IsInformal { get; set; }
	public Boolean? ISPCP { get; set; }
	public Boolean? AddToDB { get; set; }
	public String? AssociateCompany { get; set; }
}
public partial class AssociatesTable3Row // dbo.AssociatesTable3
{
	public Int32 ClientID { get; set; }
	public Int32? AssociateID { get; set; }
	public String? AssociateClientCode { get; set; }
	public String? NamePrefix { get; set; }
	public String? NameFirst { get; set; }
	public String? NameMiddle { get; set; }
	public String? NameLast { get; set; }
	public String? NameSuffix { get; set; }
	public String? BusinessName { get; set; }
	public String? Specialty { get; set; }
	public String? Greeting { get; set; }
	public String? Address1 { get; set; }
	public String? Address2 { get; set; }
	public String? Address3 { get; set; }
	public String? City { get; set; }
	public String? State { get; set; }
	public String? ZipCode { get; set; }
	public String? Country { get; set; }
	public String? Phone { get; set; }
	public String? Fax { get; set; }
	public String? Email { get; set; }
	public Int32? ReferralUserID { get; set; }
	public Boolean? UseAutoFax { get; set; }
	public Int32? ReferralLocationID { get; set; }
	public Int32? ExportType { get; set; }
	public Int16? AssociateTypeID { get; set; }
	public Boolean? IsPrimary { get; set; }
	public Boolean? IsInformal { get; set; }
	public Boolean? ISPCP { get; set; }
	public Boolean? AddToDB { get; set; }
	public String? AssociateCompany { get; set; }
}
public partial class AssociatesTableRow // dbo.AssociatesTable
{
	public Int32 ClientID { get; set; }
	public Int32? AssociateID { get; set; }
	public String? AssociateClientCode { get; set; }
	public String? NamePrefix { get; set; }
	public String? NameFirst { get; set; }
	public String? NameMiddle { get; set; }
	public String? NameLast { get; set; }
	public String? NameSuffix { get; set; }
	public String? BusinessName { get; set; }
	public String? Specialty { get; set; }
	public String? Greeting { get; set; }
	public String? Address1 { get; set; }
	public String? Address2 { get; set; }
	public String? Address3 { get; set; }
	public String? City { get; set; }
	public String? State { get; set; }
	public String? ZipCode { get; set; }
	public String? Country { get; set; }
	public String? Phone { get; set; }
	public String? Fax { get; set; }
	public String? Email { get; set; }
	public Int32? ReferralUserID { get; set; }
	public Boolean? UseAutoFax { get; set; }
	public Int32? ReferralLocationID { get; set; }
	public Int32? ExportType { get; set; }
	public Int16? AssociateTypeID { get; set; }
	public Boolean? IsPrimary { get; set; }
	public Boolean? IsInformal { get; set; }
	public Boolean? ISPCP { get; set; }
	public Boolean? AddToDB { get; set; }
	public String? AssociateCompany { get; set; }
}
public partial class IntTableTypeRow // dbo.int_TableType
{
	public Int32 ID { get; set; }
}
public partial class NameValuePairsTableRow // dbo.NameValuePairsTable
{
	public String Name { get; set; }
	public String? Value { get; set; }
}
public partial class OrdersTableRow // dbo.OrdersTable
{
	public Guid? OrderID { get; set; }
	public String PatientID { get; set; }
	public Guid? AppointmentID { get; set; }
	public String? AccountNumber { get; set; }
	public String OrderNumber { get; set; }
	public String? AccessionNumber { get; set; }
	public String? OrderStatusCode { get; set; }
	public DateTime? DateObserved { get; set; }
	public DateTime? DateRequested { get; set; }
	public String? ItemCode { get; set; }
	public String? Description { get; set; }
	public String? Notes { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
}
public partial class QAFeedbackRatingsTableRow // dbo.QAFeedbackRatingsTable
{
	public Int32 QARatingID { get; set; }
	public String? Comment { get; set; }
	public String? ErrorMarker { get; set; }
	public Int32 Seconds { get; set; }
}
public partial class SignaturesTable2Row // dbo.SignaturesTable2
{
	public Int32? SignatureUserID { get; set; }
	public String? SignatureUserFullName { get; set; }
	public Int32? SignOrder { get; set; }
	public DateTime? DateSigned { get; set; }
	public Int32? SignedByUserID { get; set; }
	public Boolean? IsAutoCompleted { get; set; }
}
public partial class SignaturesTableRow // dbo.SignaturesTable
{
	public Int32? SignatureUserID { get; set; }
	public String? SignatureUserFullName { get; set; }
	public Int32? SignOrder { get; set; }
	public DateTime? DateSigned { get; set; }
	public Int32? SignedByUserID { get; set; }
	public Boolean? IsAutoCompleted { get; set; }
}
public partial class TagsTableRow // dbo.TagsTable
{
	public Int32 TagID { get; set; }
	public String ModifiedUser { get; set; }
	public DateTime ModifiedDate { get; set; }
}
public partial class UniqueidentifierTableTypeRow // dbo.uniqueidentifier_TableType
{
	public Guid ID { get; set; }
}
public partial class AddCaseAttachmentRow
{
	public Int32? CaseAttachmentID { get; set; }
}
public partial class AddCaseRow
{
	public Guid? CaseID { get; set; }
}
public partial class AddClientUserAuthorGroupEnrollmentRow
{
	public Int32 ClientID { get; set; }
	public Int32 AuthorGroupID { get; set; }
	public String Name { get; set; }
	public String? Description { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public Int32 UserID { get; set; }
	public String? EnrollmentModifiedUser { get; set; }
	public DateTime? EnrollmentModifiedDate { get; set; }
}
public partial class AddClientUserEmailResetTokenRow
{
	public String? Token { get; set; }
}
public partial class AddClientUserEmailTokenRow
{
	public Guid? Instance { get; set; }
	public String? Token { get; set; }
}
public partial class AddClientUserLinkedAccountRow
{
	public Int32 SourceClientID { get; set; }
	public Int32 SourceUserID { get; set; }
	public Int32 TargetClientID { get; set; }
	public Int32 TargetUserID { get; set; }
	public String? TargetClientName { get; set; }
	public String? TargetUserName { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
}
public partial class AddClientUserTranscriptionLogRow
{
	public Int64? LogID { get; set; }
}
public partial class AddClientUserWorklistEncounterRow
{
	public Int32 ClientID { get; set; }
	public String PatientID { get; set; }
	public Int32 LocationID { get; set; }
	public String Physician { get; set; }
	public String? OrderNumber { get; set; }
	public String? DictationID { get; set; }
	public String? ApptUserField1 { get; set; }
	public String? ApptUserField2 { get; set; }
	public String? ApptUserField3 { get; set; }
	public String? ApptUserField4 { get; set; }
	public String? ApptUserField5 { get; set; }
	public String? AppointmentClientCode { get; set; }
	public Int32? PatientsAppointmentsTypeID { get; set; }
	public DateTime? AdmitDate { get; set; }
	public DateTime? DischargeDate { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public Guid AppointmentID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? PatientFullName { get; set; }
	public String? PatientNameFirst { get; set; }
	public String? PatientNameLast { get; set; }
	public String? PatientNameMiddle { get; set; }
	public Guid? PatientGUID { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? PatientGender { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
}
public partial class AddCompanyUserEmailTokenRow
{
	public Guid? Instance { get; set; }
	public String? Token { get; set; }
}
public partial class AddCompanyUserTranscriptionLogRow
{
	public Int64? LogID { get; set; }
}
public partial class AddDeviceFolderOptionRow
{
	public Int32 DeviceFolderOptionID { get; set; }
}
public partial class AddDeviceFolderRow
{
	public Int32 DeviceFolderID { get; set; }
}
public partial class AddDeviceRow
{
	public Int32 DeviceID { get; set; }
}
public partial class AddDictationFileRow
{
	public Int32 DictationID { get; set; }
	public Int32 DictationFileTypeID { get; set; }
	public String Path { get; set; }
	public String Action { get; set; }
}
public partial class AddDictationRow
{
	public Int32? DictationID { get; set; }
}
public partial class AddDocumentServiceJobAssociate2_Row
{
	public Int32 ClientID { get; set; }
	public Guid DocumentServiceJobID { get; set; }
	public Guid DocumentServiceJobAssociateID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public Int32? AssociateID { get; set; }
	public String AssociateClientCode { get; set; }
	public String? AssociateSpecialty { get; set; }
	public String? AssociateGreeting { get; set; }
	public String? AssociateBusinessName { get; set; }
	public String? AssociatePrefix { get; set; }
	public String? AssociateNameFirst { get; set; }
	public String? AssociateNameMiddle { get; set; }
	public String? AssociateNameLast { get; set; }
	public String? AssociateSuffix { get; set; }
	public String? AssociateAddress1 { get; set; }
	public String? AssociateAddress2 { get; set; }
	public String? AssociateAddress3 { get; set; }
	public String? AssociateCity { get; set; }
	public String? AssociateState { get; set; }
	public String? AssociateZipCode { get; set; }
	public String? AssociateCompany { get; set; }
	public String? AssociatePhone { get; set; }
	public String? AssociateFax { get; set; }
	public String? AssociateEMail { get; set; }
	public Int32? ReferralLocationID { get; set; }
	public Int32? ReferralUserID { get; set; }
}
public partial class AddDocumentServiceJobAssociateRow
{
	public Int32 ClientID { get; set; }
	public Guid DocumentServiceJobID { get; set; }
	public Guid DocumentServiceJobAssociateID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public Int32? AssociateID { get; set; }
	public String AssociateClientCode { get; set; }
	public String? AssociateSpecialty { get; set; }
	public String? AssociateGreeting { get; set; }
	public String? AssociateBusinessName { get; set; }
	public String? AssociatePrefix { get; set; }
	public String? AssociateNameFirst { get; set; }
	public String? AssociateNameMiddle { get; set; }
	public String? AssociateNameLast { get; set; }
	public String? AssociateSuffix { get; set; }
	public String? AssociateAddress1 { get; set; }
	public String? AssociateAddress2 { get; set; }
	public String? AssociateAddress3 { get; set; }
	public String? AssociateCity { get; set; }
	public String? AssociateState { get; set; }
	public String? AssociateZipCode { get; set; }
	public String? AssociateCompany { get; set; }
	public String? AssociatePhone { get; set; }
	public String? AssociateFax { get; set; }
	public String? AssociateEMail { get; set; }
	public Int32? ReferralLocationID { get; set; }
	public Int32? ReferralUserID { get; set; }
}
public partial class AddDocumentServiceJobRow
{
	public Guid? NewDocumentServiceJobID { get; set; }
}
public partial class AddGlobalUserRow
{
	public String? Username { get; set; }
	public String? Password { get; set; }
	public Decimal? DeleteID { get; set; }
}
public partial class AddTranscriptionPackage2_Row
{
	public Guid? NewReceivedTranscriptionJobID { get; set; }
	public String? TranscriptionDictationPath { get; set; }
	public String? OriginalTranscriptionDictationPath { get; set; }
}
public partial class AddTranscriptionPackage3_Row
{
	public Guid? NewReceivedTranscriptionJobID { get; set; }
	public String? TranscriptionDictationPath { get; set; }
	public String? OriginalTranscriptionDictationPath { get; set; }
}
public partial class AddTranscriptionPackageRow
{
	public Guid? NewReceivedTranscriptionJobID { get; set; }
	public String? TranscriptionDictationPath { get; set; }
	public String? OriginalTranscriptionDictationPath { get; set; }
}
public partial class AddTranscriptionPreview2_Row
{
	public Int32? PreviewID { get; set; }
	public String? PreviewFilePath { get; set; }
}
public partial class AddTranscriptionPreviewAppointmentRow
{
	public Int32? TranscriptionPreviewAppointmentID { get; set; }
}
public partial class AddTranscriptionPreviewOrderRow
{
	public Int32? TranscriptionPreviewOrderID { get; set; }
}
public partial class AddTranscriptionPreviewRow
{
	public Int32? PreviewID { get; set; }
	public String? PreviewFilePath { get; set; }
}
public partial class AddTranscriptionRow
{
	public Int32? TranscriptionID { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public Int64? ReceivedLogID { get; set; }
	public Int32? AppendedToTranscriptionID { get; set; }
	public Int64? AppendedToLogID { get; set; }
	public Int32? PrependedToTranscriptionID { get; set; }
	public Int64? PrependedToLogID { get; set; }
}
public partial class AddTranscriptionVersionRow
{
	public Guid TranscriptionVersionID { get; set; }
	public Int32 TranscriptionID { get; set; }
	public Int32 ClientID { get; set; }
	public Guid? TranscriptionContentVersionID { get; set; }
	public Int64? LogID { get; set; }
	public DateTime ModifiedDate { get; set; }
	public String ModifiedUser { get; set; }
	public String? Data { get; set; }
}
public partial class AddWorkItemRow
{
	public Guid? WorkItemID { get; set; }
}
public partial class ASRGetTranscriptionPreviewCDASortStyleSheetRow
{
	public String? SortStyleSheetPath { get; set; }
}
public partial class ASRGetTranscriptionPreviewCDAStylesheetRow
{
	public String? XSLStyleSheetPath { get; set; }
	public Boolean? IsCDSOnly { get; set; }
}
public partial class ASRGetWorkItemCDASortStyleSheetRow
{
	public String? SortStyleSheetPath { get; set; }
}
public partial class ASRGetWorkItemCDAStylesheetRow
{
	public String? XSLStyleSheetPath { get; set; }
	public Boolean? IsCDSOnly { get; set; }
}
public partial class AuthenticateAndroidUserRow
{
	public Int32 ClientID { get; set; }
	public Int32 UserID { get; set; }
}
public partial class AuthenticateAndroidUserWithHashRow
{
	public Int32? UserID { get; set; }
	public Int32? ClientID { get; set; }
	public Boolean? IsLocked { get; set; }
	public Int32? PasswordLockTimeout { get; set; }
	public Int32? PasswordDaysLeft { get; set; }
	public Boolean? UserDictates { get; set; }
	public Int32? PasswordExpirationWarningDays { get; set; }
}
public partial class AuthenticateAndroidUserWithLinkedAccountRow
{
	public Int32? UserID { get; set; }
	public Int32? ClientID { get; set; }
	public Boolean? IsLocked { get; set; }
	public Int32? PasswordLockTimeout { get; set; }
	public Int32? PasswordDaysLeft { get; set; }
	public Boolean? CanSavePassword { get; set; }
	public Boolean? UserDictates { get; set; }
	public Int32? PasswordExpirationWarningDays { get; set; }
}
public partial class AuthenticateAndroidUserWithLinkedAccountWithHashRow
{
	public Int32? UserID { get; set; }
	public Int32? ClientID { get; set; }
	public Boolean? IsLocked { get; set; }
	public Int32? PasswordLockTimeout { get; set; }
	public Int32? PasswordDaysLeft { get; set; }
	public Boolean? CanSavePassword { get; set; }
	public Boolean? UserDictates { get; set; }
	public Int32? PasswordExpirationWarningDays { get; set; }
}
public partial class AuthenticateAndroidUserWithLockRow
{
	public Int32? UserID { get; set; }
	public Int32? ClientID { get; set; }
	public Boolean? IsLocked { get; set; }
	public Int32? PasswordLockTimeout { get; set; }
	public Int32? PasswordDaysLeft { get; set; }
	public Boolean? UserDictates { get; set; }
	public Int32? PasswordExpirationWarningDays { get; set; }
}
public partial class AuthenticateInScribeUserForPasswordResetRow
{
	public Int32? TranscriptionistID { get; set; }
	public Int32? CompanyID { get; set; }
	public Boolean? IsLocked { get; set; }
	public Int32? PasswordLockTimeout { get; set; }
}
public partial class AuthenticateInScribeUserWithHashRow
{
	public Int32? TranscriptionistID { get; set; }
	public Int32? CompanyID { get; set; }
	public Boolean? IsLocked { get; set; }
	public Int32? PasswordLockTimeout { get; set; }
	public Int32? PasswordDaysLeft { get; set; }
}
public partial class AuthenticateInScribeUserWithLock2Row
{
	public Int32? TranscriptionistID { get; set; }
	public Int32? CompanyID { get; set; }
	public Boolean? IsLocked { get; set; }
	public Int32? PasswordLockTimeout { get; set; }
	public Int32? PasswordDaysLeft { get; set; }
}
public partial class AuthenticateInScribeUserWithLockRow
{
	public Int32? TranscriptionistID { get; set; }
	public Int32? CompanyID { get; set; }
	public Boolean? IsLocked { get; set; }
	public Int32? PasswordLockTimeout { get; set; }
	public Int32? PasswordDaysLeft { get; set; }
}
public partial class AuthenticateInSyncUserRow
{
	public Int32 ClientID { get; set; }
	public Int32 UserID { get; set; }
}
public partial class AuthenticateInSyncUserWithHashRow
{
	public Int32? UserID { get; set; }
	public Int32? ClientID { get; set; }
	public Boolean? IsLocked { get; set; }
	public Int32? PasswordLockTimeout { get; set; }
	public Int32? PasswordDaysLeft { get; set; }
}
public partial class AuthenticateInSyncUserWithLockRow
{
	public Int32? UserID { get; set; }
	public Int32? ClientID { get; set; }
	public Boolean? IsLocked { get; set; }
	public Int32? PasswordLockTimeout { get; set; }
	public Int32? PasswordDaysLeft { get; set; }
}
public partial class AuthenticateInTouchAccountRow
{
	public Int32 CompanyID { get; set; }
	public String CompanyCode { get; set; }
	public Boolean CompanyActive { get; set; }
	public Int32 InTouchAccountId { get; set; }
	public String? MachineCode { get; set; }
}
public partial class AuthenticateInTouchServerRow
{
	public Int32 CompanyID { get; set; }
	public String CompanyCode { get; set; }
	public Boolean CompanyActive { get; set; }
	public Int32 ServerId { get; set; }
	public String? MachineCode { get; set; }
}
public partial class AuthenticateInTouchUserRow
{
	public Int32 ClientID { get; set; }
	public Int32 UserID { get; set; }
}
public partial class AuthenticateIPhoneUserRow
{
	public Int32 ClientID { get; set; }
	public Int32 UserID { get; set; }
}
public partial class AuthenticateIPhoneUserWithHashRow
{
	public Int32? UserID { get; set; }
	public Int32? ClientID { get; set; }
	public Boolean? IsLocked { get; set; }
	public Int32? PasswordLockTimeout { get; set; }
	public Int32? PasswordDaysLeft { get; set; }
	public Int32? PasswordExpirationWarningDays { get; set; }
	public Boolean? UserDictates { get; set; }
}
public partial class AuthenticateIPhoneUserWithLinkedAccountRow
{
	public Int32? UserID { get; set; }
	public Int32? ClientID { get; set; }
	public Boolean? IsLocked { get; set; }
	public Int32? PasswordLockTimeout { get; set; }
	public Int32? PasswordDaysLeft { get; set; }
	public Int32? PasswordExpirationWarningDays { get; set; }
	public Boolean? CanSavePassword { get; set; }
	public Boolean? UserDictates { get; set; }
}
public partial class AuthenticateIPhoneUserWithLinkedAccountWithHashRow
{
	public Int32? UserID { get; set; }
	public Int32? ClientID { get; set; }
	public Boolean? IsLocked { get; set; }
	public Int32? PasswordLockTimeout { get; set; }
	public Int32? PasswordDaysLeft { get; set; }
	public Int32? PasswordExpirationWarningDays { get; set; }
	public Boolean? CanSavePassword { get; set; }
	public Boolean? UserDictates { get; set; }
}
public partial class AuthenticateIPhoneUserWithLock2Row
{
	public Int32? UserID { get; set; }
	public Int32? ClientID { get; set; }
	public Boolean? IsLocked { get; set; }
	public Int32? PasswordLockTimeout { get; set; }
	public Int32? PasswordDaysLeft { get; set; }
	public Int32? PasswordExpirationWarningDays { get; set; }
	public Boolean? UserDictates { get; set; }
}
public partial class AuthenticateIPhoneUserWithLockRow
{
	public Int32? UserID { get; set; }
	public Int32? ClientID { get; set; }
	public Boolean? IsLocked { get; set; }
	public Int32? PasswordLockTimeout { get; set; }
}
public partial class AuthenticateNMSConnectorUserRow
{
	public Int32? UserID { get; set; }
	public Int32? ClientID { get; set; }
	public Boolean? IsLocked { get; set; }
	public Int32? PasswordLockTimeout { get; set; }
	public Int32? PasswordDaysLeft { get; set; }
	public Boolean? UserDictates { get; set; }
}
public partial class AuthenticateNMSConnectorUserWithHashRow
{
	public Int32? UserID { get; set; }
	public Int32? ClientID { get; set; }
	public Boolean? IsLocked { get; set; }
	public Int32? PasswordLockTimeout { get; set; }
	public Int32? PasswordDaysLeft { get; set; }
	public Boolean? UserDictates { get; set; }
}
public partial class AuthenticateServiceAccountRow
{
	public Int32 ServiceAccountID { get; set; }
	public Int32 ClientID { get; set; }
	public String LoginCode { get; set; }
	public String Password { get; set; }
	public String? MachineCode { get; set; }
	public Boolean IsActive { get; set; }
}
public partial class AuthenticateShadowLinkServiceAccountRow
{
	public Int32 ServiceAccountID { get; set; }
	public Int32 ClientID { get; set; }
	public String LoginCode { get; set; }
	public String Password { get; set; }
	public String? MachineCode { get; set; }
	public Boolean IsActive { get; set; }
	public String? SendingFilepath { get; set; }
}
public partial class AuthorizeRegionByClientRow
{
	public Boolean IsAuthorized { get; set; }
}
public partial class CommitDocumentServiceJobRow
{
	public Int32 UpdateCount { get; set; }
}
public partial class DeleteClientUserAuthorGroupEnrollmentRow
{
	public Int32 ClientID { get; set; }
	public Int32 AuthorGroupID { get; set; }
	public Int32 UserID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
}
public partial class EditCaseAttachmentFileRow
{
	public Int32? CaseAttachmentID { get; set; }
}
public partial class EditClientUserContactInfoRow
{
	public Boolean? WasEmailUpdated { get; set; }
}
public partial class EditClientUserPasswordRow
{
	public Int32? UserID { get; set; }
}
public partial class EditCompanyUserContactInfoRow
{
	public Int32 TranscriptionistID { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public String? TranscriptionistEMail { get; set; }
	public String? TranscriptionistPhone1 { get; set; }
	public String? TranscriptionistPhone2 { get; set; }
	public Boolean? WasEmailUpdated { get; set; }
}
public partial class EditCompanyUserInfoRow
{
	public Int32 TranscriptionistID { get; set; }
	public String? TranscriptionistUsername { get; set; }
	public String? TranscriptionistFullname { get; set; }
	public String? TranscriptionistNameLast { get; set; }
	public String? TranscriptionistNameMiddle { get; set; }
	public String? TranscriptionistNameFirst { get; set; }
	public Boolean TranscriptionistActive { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public String? TranscriptionistEMail { get; set; }
	public String? TranscriptionistPhone1 { get; set; }
	public String? TranscriptionistPhone2 { get; set; }
	public Int32? PasswordDaysLeft { get; set; }
	public Boolean? WasEmailUpdated { get; set; }
}
public partial class EditCompanyUserPasswordRow
{
	public Int32? UserID { get; set; }
}
public partial class EditDictationAppendRow
{
	public Int32? AppendTranscriptionID { get; set; }
}
public partial class EditDictationPrependRow
{
	public Int32? PrependTranscriptionID { get; set; }
}
public partial class EditDictationRow
{
	public Int32? DictationStatusID { get; set; }
	public DateTime? DateConverted { get; set; }
	public DateTime? DateReceived { get; set; }
	public Int32? OldDictationStatusID { get; set; }
	public DateTime? OldDateConverted { get; set; }
	public DateTime? OldDateReceived { get; set; }
	public Int32? Length { get; set; }
	public Int32? OldLength { get; set; }
	public Int32? DictationRouteID { get; set; }
	public Int32? OldDictationRouteID { get; set; }
}
public partial class EditDictationStatusRow
{
	public Int32? DictationStatusID { get; set; }
	public Int32? OldDictationStatusID { get; set; }
}
public partial class EditDocumentServiceJobContentRow
{
	public Int32 UpdateCount { get; set; }
}
public partial class EditDocumentServiceJobRelatedTranscriptionRow
{
	public Int32? PrecedingTranscriptionID { get; set; }
	public Int32? FollowingTranscriptionID { get; set; }
}
public partial class EditTranscriptionCompletePreliminaryWithAppendRow
{
	public Int32? NewTID { get; set; }
	public Guid? NewContentVersionID { get; set; }
}
public partial class EditWorkItemStatusRow
{
	public Guid ReceivedTranscriptionJobID { get; set; }
	public Int32 ClientID { get; set; }
	public Int32? TranscriptionID { get; set; }
	public DateTime? DateProcessed { get; set; }
	public Int32 NewStatusID { get; set; }
	public Int32 OldStatusID { get; set; }
}
public partial class EmergencyGetCompanyUserClientPoolTranscriptionJobRow
{
	public Int32? TranscriptionistCompanyID { get; set; }
	public Int32 TranscriptionistID { get; set; }
	public Int32? ClientID { get; set; }
	public Int32 TranscriptionID { get; set; }
}
public partial class GetASRXSLStylesheetPathRow
{
	public String? XSLStyleSheetPath { get; set; }
	public Boolean? IsCDSOnly { get; set; }
	public String? SortPath { get; set; }
}
public partial class GetAttestationTemplateRow
{
	public Int32 TemplateID { get; set; }
	public String DictationCode { get; set; }
	public String? TemplateFilePath { get; set; }
}
public partial class GetCaseAttachmentsRow
{
	public Int32 CaseAttachmentID { get; set; }
	public Guid CaseID { get; set; }
	public String? FileName { get; set; }
	public DateTime DateCreated { get; set; }
	public DateTime? DateCompleted { get; set; }
	public String? ExternalID { get; set; }
}
public partial class GetClientAddressConfigurationRow
{
	public Boolean Address1_InUse { get; set; }
	public String? Address1_Label { get; set; }
	public Boolean Address2_InUse { get; set; }
	public String? Address2_Label { get; set; }
	public Boolean Address3_InUse { get; set; }
	public String? Address3_Label { get; set; }
	public Boolean CityInUse { get; set; }
	public String? CityLabel { get; set; }
	public Boolean StateInUse { get; set; }
	public String? StateLabel { get; set; }
	public Boolean ZipInUse { get; set; }
	public String? ZipLabel { get; set; }
	public Boolean CompanyInUse { get; set; }
	public String? CompanyLabel { get; set; }
	public Boolean CountryInUse { get; set; }
	public String? CountryLabel { get; set; }
}
public partial class GetClientAppointmentDictationsRow
{
	public Int32 DictationID { get; set; }
	public Int32? UserID { get; set; }
}
public partial class GetClientArtifactSearchPatientOrdersRow
{
	public Int32 ClientID { get; set; }
	public String PatientID { get; set; }
	public String? PatientNameFirst { get; set; }
	public String? PatientNameMiddle { get; set; }
	public String? PatientNameLast { get; set; }
	public String? PatientFullName { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? PatientGender { get; set; }
	public DateTime? PatientAppointmentDate { get; set; }
	public String? PatientOrderNumber { get; set; }
	public Guid? PatientGUID { get; set; }
	public DateTime? PatientModifiedDate { get; set; }
	public String? PatientModifiedUser { get; set; }
	public DateTime? AppointmentAppointmentDate { get; set; }
	public String? AppointmentOrderNumber { get; set; }
	public Guid? AppointmentAppointmentID { get; set; }
	public String? AppointmentUserField1 { get; set; }
	public String? AppointmentUserField2 { get; set; }
	public String? AppointmentUserField3 { get; set; }
	public String? AppointmentUserField4 { get; set; }
	public String? AppointmentUserField5 { get; set; }
	public String? AppointmentDescription { get; set; }
	public String? AppointmentAccountNumber { get; set; }
	public DateTime? AppointmentAdmitDate { get; set; }
	public DateTime? AppointmentDischargeDate { get; set; }
	public String? AppointmentBed { get; set; }
	public String? AppointmentFloor { get; set; }
	public String? AppointmentPatientClass { get; set; }
	public String? AppointmentPatientType { get; set; }
	public Int32? PatientsAppointmentsTypeID { get; set; }
	public String? AppointmentRoom { get; set; }
	public String? AppointmentFacility { get; set; }
	public String? AppointmentAppointmentClientCode { get; set; }
	public String? AppointmentPatientsAppointmentsStatusID { get; set; }
	public String? AppointmentPatientLocation { get; set; }
	public String? AppointmentAttendingPhysicianName { get; set; }
	public String? AppointmentAdmittingPhysicianName { get; set; }
	public String? AppointmentReferringPhysicianName { get; set; }
	public String? AppointmentConsultingPhysicianName { get; set; }
	public String? AppointmentPrimaryCarePhysicianName { get; set; }
	public String? AppointmentAttendingPhysicianNamePrefix { get; set; }
	public String? AppointmentAttendingPhysicianNameFirst { get; set; }
	public String? AppointmentAttendingPhysicianNameMiddle { get; set; }
	public String? AppointmentAttendingPhysicianNameLast { get; set; }
	public String? AppointmentAttendingPhysicianNameSuffix { get; set; }
	public String? AppointmentAdmittingPhysicianNamePrefix { get; set; }
	public String? AppointmentAdmittingPhysicianNameFirst { get; set; }
	public String? AppointmentAdmittingPhysicianNameMiddle { get; set; }
	public String? AppointmentAdmittingPhysicianNameLast { get; set; }
	public String? AppointmentAdmittingPhysicianNameSuffix { get; set; }
	public String? AppointmentReferringPhysicianNamePrefix { get; set; }
	public String? AppointmentReferringPhysicianNameFirst { get; set; }
	public String? AppointmentReferringPhysicianNameMiddle { get; set; }
	public String? AppointmentReferringPhysicianNameLast { get; set; }
	public String? AppointmentReferringPhysicianNameSuffix { get; set; }
	public String? AppointmentConsultingPhysicianNamePrefix { get; set; }
	public String? AppointmentConsultingPhysicianNameFirst { get; set; }
	public String? AppointmentConsultingPhysicianNameMiddle { get; set; }
	public String? AppointmentConsultingPhysicianNameLast { get; set; }
	public String? AppointmentConsultingPhysicianNameSuffix { get; set; }
	public String? AppointmentPrimaryCarePhysicianNamePrefix { get; set; }
	public String? AppointmentPrimaryCarePhysicianNameFirst { get; set; }
	public String? AppointmentPrimaryCarePhysicianNameMiddle { get; set; }
	public String? AppointmentPrimaryCarePhysicianNameLast { get; set; }
	public String? AppointmentPrimaryCarePhysicianNameSuffix { get; set; }
	public Int32? AppointmentLocationID { get; set; }
	public String? AppointmentLocationName { get; set; }
	public Int32? AppointmentTypeID { get; set; }
	public DateTime? AppointmentModifiedDate { get; set; }
	public String? AppointmentModifiedUser { get; set; }
	public Int32? AppointmentDictationCount { get; set; }
	public Int32? AppointmentTranscriptionCount { get; set; }
	public Int32? AppointmentSchedulingResourceID { get; set; }
	public Guid OrderID { get; set; }
	public String OrderOrderNumber { get; set; }
	public String? OrderDescription { get; set; }
	public String? OrderOrderStatusCode { get; set; }
	public String? OrderOrderStatusName { get; set; }
	public String? OrderOrderStatus { get; set; }
	public String? OrderOrderingPhysicianName { get; set; }
	public DateTime OrderModifiedDate { get; set; }
	public String OrderModifiedUser { get; set; }
	public String? OrderAccessionNumber { get; set; }
	public DateTime? OrderDateObserved { get; set; }
}
public partial class GetClientArtifactSearchPatientsRow
{
	public Int32 ClientID { get; set; }
	public String PatientID { get; set; }
	public String? PatientNameFirst { get; set; }
	public String? PatientNameMiddle { get; set; }
	public String? PatientNameLast { get; set; }
	public String? PatientFullName { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? PatientGender { get; set; }
	public DateTime? PatientAppointmentDate { get; set; }
	public String? PatientOrderNumber { get; set; }
	public Guid? PatientGUID { get; set; }
	public DateTime? PatientModifiedDate { get; set; }
	public String? PatientModifiedUser { get; set; }
}
public partial class GetClientArtifactSearchPatientVisitsRow
{
	public Int32 ClientID { get; set; }
	public String PatientID { get; set; }
	public String? PatientNameFirst { get; set; }
	public String? PatientNameMiddle { get; set; }
	public String? PatientNameLast { get; set; }
	public String? PatientFullName { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? PatientGender { get; set; }
	public DateTime? PatientAppointmentDate { get; set; }
	public String? PatientOrderNumber { get; set; }
	public Guid? PatientGUID { get; set; }
	public DateTime? PatientModifiedDate { get; set; }
	public String? PatientModifiedUser { get; set; }
	public DateTime? AppointmentAppointmentDate { get; set; }
	public String? AppointmentOrderNumber { get; set; }
	public Guid AppointmentAppointmentID { get; set; }
	public String? AppointmentUserField1 { get; set; }
	public String? AppointmentUserField2 { get; set; }
	public String? AppointmentUserField3 { get; set; }
	public String? AppointmentUserField4 { get; set; }
	public String? AppointmentUserField5 { get; set; }
	public String AppointmentDescription { get; set; }
	public String? AppointmentAccountNumber { get; set; }
	public DateTime? AppointmentAdmitDate { get; set; }
	public DateTime? AppointmentDischargeDate { get; set; }
	public String? AppointmentBed { get; set; }
	public String? AppointmentFloor { get; set; }
	public String? AppointmentPatientClass { get; set; }
	public String? AppointmentPatientType { get; set; }
	public Int32? PatientsAppointmentsTypeID { get; set; }
	public String? AppointmentRoom { get; set; }
	public String? AppointmentFacility { get; set; }
	public String? AppointmentAppointmentClientCode { get; set; }
	public String? AppointmentPatientsAppointmentsStatusID { get; set; }
	public String? AppointmentPatientLocation { get; set; }
	public String? AppointmentAttendingPhysicianName { get; set; }
	public String? AppointmentAdmittingPhysicianName { get; set; }
	public String? AppointmentReferringPhysicianName { get; set; }
	public String? AppointmentConsultingPhysicianName { get; set; }
	public String? AppointmentPrimaryCarePhysicianName { get; set; }
	public String? AppointmentAttendingPhysicianNamePrefix { get; set; }
	public String? AppointmentAttendingPhysicianNameFirst { get; set; }
	public String? AppointmentAttendingPhysicianNameMiddle { get; set; }
	public String? AppointmentAttendingPhysicianNameLast { get; set; }
	public String? AppointmentAttendingPhysicianNameSuffix { get; set; }
	public String? AppointmentAdmittingPhysicianNamePrefix { get; set; }
	public String? AppointmentAdmittingPhysicianNameFirst { get; set; }
	public String? AppointmentAdmittingPhysicianNameMiddle { get; set; }
	public String? AppointmentAdmittingPhysicianNameLast { get; set; }
	public String? AppointmentAdmittingPhysicianNameSuffix { get; set; }
	public String? AppointmentReferringPhysicianNamePrefix { get; set; }
	public String? AppointmentReferringPhysicianNameFirst { get; set; }
	public String? AppointmentReferringPhysicianNameMiddle { get; set; }
	public String? AppointmentReferringPhysicianNameLast { get; set; }
	public String? AppointmentReferringPhysicianNameSuffix { get; set; }
	public String? AppointmentConsultingPhysicianNamePrefix { get; set; }
	public String? AppointmentConsultingPhysicianNameFirst { get; set; }
	public String? AppointmentConsultingPhysicianNameMiddle { get; set; }
	public String? AppointmentConsultingPhysicianNameLast { get; set; }
	public String? AppointmentConsultingPhysicianNameSuffix { get; set; }
	public String? AppointmentPrimaryCarePhysicianNamePrefix { get; set; }
	public String? AppointmentPrimaryCarePhysicianNameFirst { get; set; }
	public String? AppointmentPrimaryCarePhysicianNameMiddle { get; set; }
	public String? AppointmentPrimaryCarePhysicianNameLast { get; set; }
	public String? AppointmentPrimaryCarePhysicianNameSuffix { get; set; }
	public Int32? AppointmentLocationID { get; set; }
	public String? AppointmentLocationName { get; set; }
	public Int32? AppointmentTypeID { get; set; }
	public DateTime? AppointmentModifiedDate { get; set; }
	public String? AppointmentModifiedUser { get; set; }
	public Int32? AppointmentDictationCount { get; set; }
	public Int32? AppointmentTranscriptionCount { get; set; }
	public Int32? AppointmentSchedulingResourceID { get; set; }
}
public partial class GetClientAssociateTypesRow
{
	public Int32 AssociateTypeID { get; set; }
	public Int32 ClientID { get; set; }
	public String? Name { get; set; }
	public String? ClientCode { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
}
public partial class GetClientAuthorGroupEncountersRow
{
	public Int32 ClientID { get; set; }
	public String PatientID { get; set; }
	public Int32 LocationID { get; set; }
	public String Physician { get; set; }
	public String? OrderNumber { get; set; }
	public String? DictationID { get; set; }
	public String? ApptUserField1 { get; set; }
	public String? ApptUserField2 { get; set; }
	public String? ApptUserField3 { get; set; }
	public String? ApptUserField4 { get; set; }
	public String? ApptUserField5 { get; set; }
	public String? AppointmentClientCode { get; set; }
	public Int32? PatientsAppointmentsTypeID { get; set; }
	public DateTime? AdmitDate { get; set; }
	public DateTime? DischargeDate { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public Guid AppointmentID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? PatientFullName { get; set; }
	public String? PatientNameFirst { get; set; }
	public String? PatientNameLast { get; set; }
	public String? PatientNameMiddle { get; set; }
	public Guid? PatientGUID { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? PatientGender { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
}
public partial class GetClientAuthorGroupInpatientVisitsRow
{
	public Guid? PatientGUID { get; set; }
	public Int32 ClientID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public String Description { get; set; }
	public Int32 LocationID { get; set; }
	public String? OrderNumber { get; set; }
	public Guid AppointmentID { get; set; }
	public String? ApptUserField1 { get; set; }
	public String? ApptUserField2 { get; set; }
	public String? ApptUserField3 { get; set; }
	public String? ApptUserField4 { get; set; }
	public String? ApptUserField5 { get; set; }
	public DateTime? AdmitDate { get; set; }
	public DateTime? DischargeDate { get; set; }
	public String? AccountNumber { get; set; }
	public String? Location { get; set; }
	public String? Room { get; set; }
	public String? Bed { get; set; }
	public String? Floor { get; set; }
	public String? Facility { get; set; }
	public String? PatientsAppointmentsStatusID { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public Int32? PatientsAppointmentsTypeID { get; set; }
	public String? PatientLocation { get; set; }
	public String? PatientClass { get; set; }
	public String? PatientType { get; set; }
	public String? AppointmentClientCode { get; set; }
	public String? AttendingPhysicianName { get; set; }
	public String? AdmittingPhysicianName { get; set; }
	public String? ReferringPhysicianName { get; set; }
	public String? ConsultingPhysicianName { get; set; }
	public String? PrimaryCarePhysicianName { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public Int32? AppointmentDictationCount { get; set; }
	public Int32? AppointmentTranscriptionCount { get; set; }
	public Int32? AppointmentSchedulingResourceID { get; set; }
	public String PatientID { get; set; }
	public String? PatientFullName { get; set; }
	public String? PatientNameFirst { get; set; }
	public String? PatientNameLast { get; set; }
	public String? PatientNameMiddle { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? PatientGender { get; set; }
}
public partial class GetClientAuthorGroupRow
{
	public Int32 AuthorGroupID { get; set; }
	public Int32 ClientID { get; set; }
	public String Name { get; set; }
	public String? Description { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
}
public partial class GetClientAuthorGroupsRow
{
	public Int32 AuthorGroupID { get; set; }
	public Int32 ClientID { get; set; }
	public String Name { get; set; }
	public String? Description { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
}
public partial class GetClientAuthorGroupUsersRow
{
	public Int32 ClientID { get; set; }
	public Int32 AuthorGroupID { get; set; }
	public Int32 UserID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
}
public partial class GetClientAuthorizationByCompanyInTouchServerIDRow
{
	public Boolean? IsAuthorized { get; set; }
}
public partial class GetClientAuthorizationByCompanyUserIDRow
{
	public Boolean IsAuthorized { get; set; }
}
public partial class GetClientDefaultPasswordHashAlgorithmRow
{
	public Int32 PasswordHashAlgorithmID { get; set; }
	public String Name { get; set; }
	public String? Description { get; set; }
	public Boolean CaseSensitive { get; set; }
	public String? PRF { get; set; }
	public Int32? SaltLength { get; set; }
	public Int32? HashLength { get; set; }
	public Int32? Iterations { get; set; }
	public DateTime ModifiedDate { get; set; }
	public String ModifiedUser { get; set; }
}
public partial class GetClientDictationFilePathRow
{
	public Int32? ClientID { get; set; }
	public Int32? TranscriptionID { get; set; }
	public Int32? DictationID { get; set; }
	public String? DictationPath { get; set; }
}
public partial class GetClientDictationPathsRow
{
	public Int32 ClientID { get; set; }
	public Int32 DictationID { get; set; }
	public Int32 DictationFileTypeID { get; set; }
	public String Path { get; set; }
	public Int32 IsOriginal { get; set; }
	public Boolean IsEncrypted { get; set; }
}
public partial class GetClientDictationRecordsRow
{
	public Int32 ClientID { get; set; }
	public Int32 DictationID { get; set; }
	public Int32 DictationFileTypeID { get; set; }
	public String Path { get; set; }
	public Int32 IsOriginal { get; set; }
	public Boolean IsEncrypted { get; set; }
}
public partial class GetClientDictationTemplateContentRow
{
	public String TemplateContentType { get; set; }
	public Byte[] TemplateContent { get; set; }
	public String ModifiedUser { get; set; }
	public DateTime ModifiedDate { get; set; }
}
public partial class GetClientDictationTemplateInfoRow
{
	public Int32 TemplateID { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public String DictationCode { get; set; }
	public Int32? ClientID { get; set; }
	public Int32 UserID { get; set; }
	public Int32 DocumentID { get; set; }
	public Int32 LocationID { get; set; }
	public String? MTNotes { get; set; }
	public Boolean CanDismiss { get; set; }
	public Int32? VisibleCharacters { get; set; }
	public Int32? NonVisibleCharacters { get; set; }
	public Int32? TemplateVisibleCharacters { get; set; }
	public Int32? TemplateNonVisibleCharacters { get; set; }
}
public partial class GetClientDictationTemplateRow
{
	public String? TemplateFilePath { get; set; }
	public Int32 IsVR { get; set; }
	public String? StructuredBody { get; set; }
}
public partial class GetClientDocumentTemplateASRStylesheetRow
{
	public String? XSLStyleSheetPath { get; set; }
	public Boolean? IsCDSOnly { get; set; }
}
public partial class GetClientDocumentTemplateCDAOptionsRow
{
	public Int32 ClientID { get; set; }
	public Int32 DocumentTemplateID { get; set; }
	public Int32 Version { get; set; }
	public Int32 MaximumSectionDepth { get; set; }
}
public partial class GetClientDocumentTemplateCDASectionsRow
{
	public Int32 ClientID { get; set; }
	public Int32 DocumentTemplateID { get; set; }
	public String? Title { get; set; }
	public String? Code { get; set; }
	public String? CodeSystem { get; set; }
	public String? CodeSystemName { get; set; }
	public Int32 SectionId { get; set; }
	public Int32? ParentSectionId { get; set; }
}
public partial class GetClientDocumentTemplateContentRow
{
	public String TemplateContentType { get; set; }
	public Byte[] TemplateContent { get; set; }
	public String ModifiedUser { get; set; }
	public DateTime ModifiedDate { get; set; }
}
public partial class GetClientDocumentTemplateInfoRow
{
	public Int32 DocumentTemplateID { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public String? Description { get; set; }
	public Int32 DocumentID { get; set; }
	public Int32 ClientID { get; set; }
	public Int32 UserID { get; set; }
	public Int32 LocationID { get; set; }
	public String? MTNotes { get; set; }
	public Boolean CanDismiss { get; set; }
	public Int32? VisibleCharacters { get; set; }
	public Int32? NonVisibleCharacters { get; set; }
	public Int32? TemplateVisibleCharacters { get; set; }
	public Int32? TemplateNonVisibleCharacters { get; set; }
}
public partial class GetClientDocumentTemplateRow
{
	public String? TemplateFilepath { get; set; }
	public Boolean IsVR { get; set; }
	public String? StructuredBody { get; set; }
}
public partial class GetClientDocumentTypeGroupsRow
{
	public String? Name { get; set; }
	public Int32 Mask { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
}
public partial class GetClientDocumentTypeLocationRow
{
	public Int32 DocumentId { get; set; }
	public String? DocumentType { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public Int32 LocationId { get; set; }
	public String? LocationName { get; set; }
}
public partial class GetClientDocumentTypeLocationsRow
{
	public Int32 DocumentId { get; set; }
	public String? DocumentType { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public Int32 LocationId { get; set; }
	public String? LocationName { get; set; }
}
public partial class GetClientDocumentTypeRow
{
	public Int32 ClientId { get; set; }
	public Int32 DocumentId { get; set; }
	public String? DocumentType { get; set; }
	public String? DocumentDescription { get; set; }
	public Int32? DocumentTypeGroupMask { get; set; }
	public Boolean DocumentActive { get; set; }
	public String? DictationId { get; set; }
	public String? ClientCode { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public Int32? RequiredLocationId { get; set; }
	public Int32? DictationEmulationPromptTypeID { get; set; }
	public String? InTouchID { get; set; }
}
public partial class GetClientDocumentTypeSettingsRow
{
	public Int32 ClientID { get; set; }
	public Int32 DocumentId { get; set; }
	public Int32? PreferredContentTypeID { get; set; }
	public Boolean? RequiresAdditionalSignature { get; set; }
	public Int32 ArtifactFieldsMergeOptionID { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
}
public partial class GetClientDocumentTypesPatientLettersRow
{
	public Int32 PatientLetterID { get; set; }
	public Int32? ClientID { get; set; }
	public String? Description { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public Int32 DocumentID { get; set; }
}
public partial class GetClientDocumentTypesRow
{
	public Int32 ClientId { get; set; }
	public Int32 DocumentId { get; set; }
	public String? DocumentType { get; set; }
	public String? DocumentDescription { get; set; }
	public Int32? DocumentTypeGroupMask { get; set; }
	public String? DictationId { get; set; }
	public String? ClientCode { get; set; }
	public String? InTouchID { get; set; }
	public Int32? DictationEmulationPromptTypeID { get; set; }
	public Int32? RequiredLocationId { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
}
public partial class GetClientFoldersRow
{
	public Int32 FolderID { get; set; }
	public String FolderName { get; set; }
}
public partial class GetClientHeaderConfigurationByDocumentIDRow
{
	public Int32 ClientID { get; set; }
	public Int32 HeaderConfigurationID { get; set; }
	public String Name { get; set; }
	public String? Description { get; set; }
	public String? DemographicConfiguration { get; set; }
	public String? PatientSearchConfiguration { get; set; }
	public String? SearchConfiguration { get; set; }
	public String? ArtifactSearchConfiguration { get; set; }
	public String ModifiedUser { get; set; }
	public DateTime ModifiedDate { get; set; }
	public Int32? RemovedPatientTranscriptionTagCompanyID { get; set; }
	public Int32? RemovedPatientTranscriptionTagID { get; set; }
	public Int32? RemovedArtifactsTranscriptionTagCompanyID { get; set; }
	public Int32? RemovedArtifactsTranscriptionTagID { get; set; }
}
public partial class GetClientHeaderConfigurationRow
{
	public Int32 ClientID { get; set; }
	public Int32 HeaderConfigurationID { get; set; }
	public String Name { get; set; }
	public String? Description { get; set; }
	public String? DemographicConfiguration { get; set; }
	public String? PatientSearchConfiguration { get; set; }
	public String? SearchConfiguration { get; set; }
	public String? ArtifactSearchConfiguration { get; set; }
	public String ModifiedUser { get; set; }
	public DateTime ModifiedDate { get; set; }
	public Int32? RemovedPatientTranscriptionTagCompanyID { get; set; }
	public Int32? RemovedPatientTranscriptionTagID { get; set; }
	public Int32? RemovedArtifactsTranscriptionTagCompanyID { get; set; }
	public Int32? RemovedArtifactsTranscriptionTagID { get; set; }
}
public partial class GetClientHeaderConfigurationsRow
{
	public Int32 ClientID { get; set; }
	public Int32 HeaderConfigurationID { get; set; }
	public String Name { get; set; }
	public String? Description { get; set; }
	public String? DemographicConfiguration { get; set; }
	public String? PatientSearchConfiguration { get; set; }
	public String? SearchConfiguration { get; set; }
	public String? ArtifactSearchConfiguration { get; set; }
	public String ModifiedUser { get; set; }
	public DateTime ModifiedDate { get; set; }
	public Int32? RemovedPatientTranscriptionTagCompanyID { get; set; }
	public Int32? RemovedPatientTranscriptionTagID { get; set; }
	public Int32? RemovedArtifactsTranscriptionTagCompanyID { get; set; }
	public Int32? RemovedArtifactsTranscriptionTagID { get; set; }
}
public partial class GetClientLocationByClientCodeRow
{
	public Int32 LocationID { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public Boolean LocationActive { get; set; }
}
public partial class GetClientLocationResourceEncountersRow
{
	public Int32 ClientID { get; set; }
	public String PatientID { get; set; }
	public Int32 LocationID { get; set; }
	public String Physician { get; set; }
	public String? OrderNumber { get; set; }
	public String? DictationID { get; set; }
	public String? ApptUserField1 { get; set; }
	public String? ApptUserField2 { get; set; }
	public String? ApptUserField3 { get; set; }
	public String? ApptUserField4 { get; set; }
	public String? ApptUserField5 { get; set; }
	public String? AppointmentClientCode { get; set; }
	public Int32? PatientsAppointmentsTypeID { get; set; }
	public DateTime? AdmitDate { get; set; }
	public DateTime? DischargeDate { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public Guid AppointmentID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? PatientFullName { get; set; }
	public String? PatientNameFirst { get; set; }
	public String? PatientNameLast { get; set; }
	public String? PatientNameMiddle { get; set; }
	public Guid? PatientGUID { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? PatientGender { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
}
public partial class GetClientLocationResourceInpatientVisitsRow
{
	public Guid? PatientGUID { get; set; }
	public Int32 ClientID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public String Description { get; set; }
	public Int32 LocationID { get; set; }
	public String? OrderNumber { get; set; }
	public Guid AppointmentID { get; set; }
	public String? ApptUserField1 { get; set; }
	public String? ApptUserField2 { get; set; }
	public String? ApptUserField3 { get; set; }
	public String? ApptUserField4 { get; set; }
	public String? ApptUserField5 { get; set; }
	public DateTime? AdmitDate { get; set; }
	public DateTime? DischargeDate { get; set; }
	public String? AccountNumber { get; set; }
	public String? Location { get; set; }
	public String? Room { get; set; }
	public String? Bed { get; set; }
	public String? Floor { get; set; }
	public String? Facility { get; set; }
	public String? PatientsAppointmentsStatusID { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public Int32? PatientsAppointmentsTypeID { get; set; }
	public String? PatientLocation { get; set; }
	public String? PatientClass { get; set; }
	public String? PatientType { get; set; }
	public String? AppointmentClientCode { get; set; }
	public String? AttendingPhysicianName { get; set; }
	public String? AdmittingPhysicianName { get; set; }
	public String? ReferringPhysicianName { get; set; }
	public String? ConsultingPhysicianName { get; set; }
	public String? PrimaryCarePhysicianName { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public Int32? AppointmentDictationCount { get; set; }
	public Int32? AppointmentTranscriptionCount { get; set; }
	public Int32? AppointmentSchedulingResourceID { get; set; }
	public String PatientID { get; set; }
	public String? PatientFullName { get; set; }
	public String? PatientNameFirst { get; set; }
	public String? PatientNameLast { get; set; }
	public String? PatientNameMiddle { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? PatientGender { get; set; }
}
public partial class GetClientLocationResourceRow
{
	public Int32 ClientID { get; set; }
	public Int32 LocationResourceID { get; set; }
	public String Code { get; set; }
	public String Name { get; set; }
	public String? Description { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
}
public partial class GetClientLocationRow
{
	public Int32 LocationID { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public String? LocationName { get; set; }
	public Boolean LocationActive { get; set; }
	public String? ClientCode { get; set; }
	public String? DictationID { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
}
public partial class GetClientLocationsRow
{
	public Int32 LocationID { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public String? LocationName { get; set; }
	public Boolean LocationActive { get; set; }
	public String? ClientCode { get; set; }
	public String? DictationID { get; set; }
	public String? InTouchID { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public String? PatientIDPrefix { get; set; }
	public String? PatientIDSuffix { get; set; }
	public Int32? PatientIDPaddedLength { get; set; }
	public String? AccountNumberPrefix { get; set; }
	public String? AccountNumberSuffix { get; set; }
	public Int32? AccountNumberPaddedLength { get; set; }
	public String? OrderNumberPrefix { get; set; }
	public String? OrderNumberSuffix { get; set; }
	public Int32? OrderNumberPaddedLength { get; set; }
}
public partial class GetClientPasswordComplexitySettingsRow
{
	public Int32 ClientID { get; set; }
	public Int32 PasswordHistoryCount { get; set; }
	public Int32 PasswordMinimumLength { get; set; }
	public Int32 PasswordPatternLength { get; set; }
	public Boolean PasswordCaseSensitive { get; set; }
	public Boolean PasswordRequireUpperCase { get; set; }
	public Boolean PasswordRequireLowerCase { get; set; }
	public Boolean PasswordRequireNumerical { get; set; }
	public Boolean PasswordRequireSpecial { get; set; }
	public Int32 PasswordUsernamePatternLength { get; set; }
	public Int32 PasswordMinimumDays { get; set; }
}
public partial class GetClientPatientDictationsRow
{
	public Int32 DictationID { get; set; }
	public Int32 ClientID { get; set; }
	public Int32? UserID { get; set; }
	public Int32? DocumentID { get; set; }
	public Int32? LocationID { get; set; }
	public Boolean IsStat { get; set; }
	public String? SourceMachineName { get; set; }
	public Int32? Length { get; set; }
	public DateTimeOffset? DateDictated { get; set; }
	public String? PatientID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public String? ReceiptCode { get; set; }
}
public partial class GetClientPatientLetterRow
{
	public Int32 PatientLetterID { get; set; }
	public Int32? ClientID { get; set; }
	public String? Description { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public Int32 DocumentID { get; set; }
}
public partial class GetClientPatientLettersRow
{
	public Int32 PatientLetterID { get; set; }
	public Int32? ClientID { get; set; }
	public String? Description { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public Int32 DocumentID { get; set; }
}
public partial class GetClientPatientProblemListCategoriesRow
{
	public Int32 ClientID { get; set; }
	public Guid? PatientGUID { get; set; }
	public Int32 CategoryID { get; set; }
	public String? Description { get; set; }
	public Int32? CategoryOrder { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
}
public partial class GetClientPatientProblemListCategoryContentRow
{
	public String? Problem { get; set; }
}
public partial class GetClientPatientProblemListCategoryRow
{
	public Int32 ClientID { get; set; }
	public Guid? PatientGUID { get; set; }
	public Int32 CategoryID { get; set; }
	public String? Description { get; set; }
	public Int32? CategoryOrder { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
}
public partial class GetClientPatientTranscriptionDictationsRow
{
	public Int32 TranscriptionID { get; set; }
	public Int32? DictationID { get; set; }
	public Int32? ClientID { get; set; }
	public Int32? UserID { get; set; }
	public Int32? DocumentID { get; set; }
	public Int32? LocationID { get; set; }
	public Boolean? IsStat { get; set; }
	public String? SourceMachineName { get; set; }
	public Int32? Length { get; set; }
	public DateTimeOffset? DateDictated { get; set; }
	public String? PatientId { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public Int32? TranscriptionDocumentID { get; set; }
	public Int32? TranscriptionLocationID { get; set; }
	public String? ReceiptCode { get; set; }
}
public partial class GetClientPatientVisitDictationsRow
{
	public Int32 ClientID { get; set; }
	public Int32 DictationID { get; set; }
	public String? AccountNumber { get; set; }
	public Guid? AppointmentID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public DateTimeOffset? DateDictated { get; set; }
	public String? SourceFilePath { get; set; }
	public String? SourceMachineName { get; set; }
	public String? OrderNumber { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public Int32? Length { get; set; }
	public Int32? DictationSourceID { get; set; }
	public Int32? UserID { get; set; }
	public Int32? DocumentID { get; set; }
	public Int32? LocationID { get; set; }
	public Boolean IsStat { get; set; }
	public String? PatientID { get; set; }
	public String? Comment { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String? ServerTimeZoneIdentifier { get; set; }
}
public partial class GetClientPatientVisitRow
{
	public Guid? PatientGUID { get; set; }
	public Int32 ClientID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public String Description { get; set; }
	public Int32 LocationID { get; set; }
	public String? OrderNumber { get; set; }
	public Guid AppointmentID { get; set; }
	public String? ApptUserField1 { get; set; }
	public String? ApptUserField2 { get; set; }
	public String? ApptUserField3 { get; set; }
	public String? ApptUserField4 { get; set; }
	public String? ApptUserField5 { get; set; }
	public DateTime? AdmitDate { get; set; }
	public DateTime? DischargeDate { get; set; }
	public String? AccountNumber { get; set; }
	public String? Location { get; set; }
	public String? Room { get; set; }
	public String? Bed { get; set; }
	public String? Floor { get; set; }
	public String? Facility { get; set; }
	public String? PatientsAppointmentsStatusID { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public Int32? PatientsAppointmentsTypeID { get; set; }
	public String? PatientLocation { get; set; }
	public String? PatientClass { get; set; }
	public String? PatientType { get; set; }
	public String? AppointmentClientCode { get; set; }
	public String? AttendingPhysicianName { get; set; }
	public String? AdmittingPhysicianName { get; set; }
	public String? ReferringPhysicianName { get; set; }
	public String? ConsultingPhysicianName { get; set; }
	public String? PrimaryCarePhysicianName { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public Int32? AppointmentDictationCount { get; set; }
	public Int32? AppointmentTranscriptionCount { get; set; }
	public Int32? AppointmentSchedulingResourceID { get; set; }
}
public partial class GetClientPatientVisitTranscriptionsRow
{
	public Int32 ClientID { get; set; }
	public Int32 TranscriptionID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public String? Comment { get; set; }
	public DateTime? DateArchived { get; set; }
	public DateTime? DateDictated { get; set; }
	public DateTime? DateDictatedCST { get; set; }
	public Int32? DocumentID { get; set; }
	public String? DocumentType { get; set; }
	public String? DocumentDescription { get; set; }
	public Int32? LocationID { get; set; }
	public String? LocationName { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public String? OrderNumber { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? PatientGender { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public String? ReceiptCode { get; set; }
	public Boolean TranscriptionStat { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public String? UserFullname { get; set; }
	public Int32? UserID { get; set; }
	public String? UserUsername { get; set; }
	public String? UserNameFirst { get; set; }
	public String? UserNameLast { get; set; }
	public String? UserNameMiddle { get; set; }
	public String? UserNamePrefix { get; set; }
	public String? UserNameSuffix { get; set; }
	public Guid? AppointmentID { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String? ServerTimeZoneIdentifier { get; set; }
}
public partial class GetClientProblemListCategoriesRow
{
	public Int32 ClientID { get; set; }
	public Int32 CategoryID { get; set; }
	public Int32? CategoryOrder { get; set; }
	public String? Description { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
}
public partial class GetClientProblemListCategoryRow
{
	public Int32 ClientID { get; set; }
	public Int32 CategoryID { get; set; }
	public Int32? CategoryOrder { get; set; }
	public String? Description { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
}
public partial class GetClientReferralsRow
{
	public Int32 AllowedClientID { get; set; }
	public String ClientName { get; set; }
	public String? ClientFullName { get; set; }
}
public partial class GetClientRow
{
	public Int32 ClientID { get; set; }
	public String ClientName { get; set; }
	public String? ClientFullName { get; set; }
	public Boolean ClientActive { get; set; }
	public String? ClientAddress1 { get; set; }
	public String? ClientAddress2 { get; set; }
	public String? ClientAddress3 { get; set; }
	public String? ClientCity { get; set; }
	public String? ClientState { get; set; }
	public String? ClientZipCode { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? TimeZoneIdentifier { get; set; }
}
public partial class GetClientServiceAccountRow
{
	public Int32 ServiceAccountID { get; set; }
	public Int32 ClientID { get; set; }
	public String LoginCode { get; set; }
	public String Password { get; set; }
	public String? MachineCode { get; set; }
	public Boolean IsActive { get; set; }
	public String? LocalIPAddress { get; set; }
	public String? SendingFilepath { get; set; }
	public String? OSVersion { get; set; }
	public String? ServiceVersion { get; set; }
	public DateTime ModifiedDate { get; set; }
}
public partial class GetClientSettingsRow
{
	public String? LabelPatientID { get; set; }
	public String? LabelPatientName { get; set; }
	public String? LabelGender { get; set; }
	public String? LabelBirthdate { get; set; }
	public String? LabelAppointmentDate { get; set; }
	public String? LabelOrderNumber { get; set; }
	public String? LabelUserField1 { get; set; }
	public String? LabelUserField2 { get; set; }
	public String? LabelUserField3 { get; set; }
	public String? LabelUserField4 { get; set; }
	public String? LabelUserField5 { get; set; }
	public String? LabelPatientLetter { get; set; }
	public String? LabelDictator { get; set; }
	public String LabelPreliminary { get; set; }
	public String CompleteLabelFinal { get; set; }
	public String CompleteLabelFinal2 { get; set; }
	public String CompleteLabelPreliminary { get; set; }
	public String CompleteLabelReferral { get; set; }
	public String CompleteLabelReview { get; set; }
	public String CompleteLabelReview2 { get; set; }
	public String CompleteLabelPreliminaryNoESign { get; set; }
	public Boolean CanSaveMobilePassword { get; set; }
	public Boolean CanSaveInSyncPassword { get; set; }
	public Int32? PreferredContentTypeID { get; set; }
	public Boolean? IsBenchmarkKBEnabled { get; set; }
	public Boolean SetPatientsProperCase { get; set; }
	public Boolean MapLocations { get; set; }
	public Int32 TruncateZeroFields { get; set; }
	public Int32? PatientNameFormat { get; set; }
	public String? DictationFilepath { get; set; }
	public String ClientName { get; set; }
	public String? DictationFilepathBackup { get; set; }
	public Boolean UseProblemList { get; set; }
	public String? LabelPatient { get; set; }
	public String? LabelPatients { get; set; }
	public Int32 ClientWorkflowTypeID { get; set; }
	public Boolean ShowCommentOnCopy { get; set; }
	public String? LabelAccountNumber { get; set; }
	public String? LabelAdmitDate { get; set; }
	public String? LabelDischargeDate { get; set; }
	public String? LabelPatientClass { get; set; }
	public String? LabelPatientType { get; set; }
	public String? LabelFloor { get; set; }
	public String? LabelBed { get; set; }
	public String? LabelOrders { get; set; }
	public String? LabelOrdersOrderNumber { get; set; }
	public String? LabelOrderDescription { get; set; }
	public String? LabelAppointments { get; set; }
	public String? LabelAppointment { get; set; }
	public String? LabelOrder { get; set; }
	public Boolean CanSaveInSyncDictations { get; set; }
	public Int32 DefaultDocumentTypeID { get; set; }
	public Int32? DefaultLocationID { get; set; }
	public Int32 EmailTokenExpirationMinutes { get; set; }
	public Boolean MatchDocumentTypeOnAppend { get; set; }
	public String FolderSearch { get; set; }
	public Boolean CanAccessCodingMessages { get; set; }
}
public partial class GetClientSupportInformationRow
{
	public Int32 ClientID { get; set; }
	public String ClientName { get; set; }
	public Int32 LicenseID { get; set; }
	public String? LicenseDescription { get; set; }
	public String? HelpDeskPhone { get; set; }
	public String? HelpDeskEMail { get; set; }
	public String? InQuiryLogo { get; set; }
	public String? SystemName { get; set; }
	public String? InSyncLogo { get; set; }
	public String? InScribeLogo { get; set; }
	public String? HelpDeskURL { get; set; }
	public String? CompanyEmail { get; set; }
	public String? CompanyURL { get; set; }
	public String? InQuiryURL { get; set; }
	public String? InQuiryHelpURL { get; set; }
	public String? InSyncHelpURL { get; set; }
	public String? InScribeHelpURL { get; set; }
	public String? WelcomeURL { get; set; }
	public String? SoftwareURL { get; set; }
	public String? ReportStyleOptions { get; set; }
	public String? MobileInstructions { get; set; }
	public String? WebSiteURL { get; set; }
	public String? EmailVerificationSubject { get; set; }
	public String? EmailVerificationBodyTemplate { get; set; }
	public Int32? EmailVerificationBodyFormat { get; set; }
	public String? EmailResetSubject { get; set; }
	public String? EmailResetBody { get; set; }
	public Int32? EmailResetBodyFormat { get; set; }
	public String? EmailResetURLTemplate { get; set; }
	public String? LicenseLogoURL { get; set; }
}
public partial class GetClientTagsRow
{
	public Int32 CompanyID { get; set; }
	public Int32 TranscriptionTagID { get; set; }
	public String? Name { get; set; }
	public String? Color { get; set; }
	public Boolean IsActive { get; set; }
	public DateTime ModifiedDate { get; set; }
	public String ModifiedUser { get; set; }
}
public partial class GetClientTimeZoneIdentifierRow
{
	public String? Identifier { get; set; }
}
public partial class GetClientTranscriptionASRStylesheetRow
{
	public String? XSLStyleSheetPath { get; set; }
	public Boolean? IsCDSOnly { get; set; }
}
public partial class GetClientTranscriptionDictationFilePathByTIDRow
{
	public Int32? ClientID { get; set; }
	public Int32? TranscriptionID { get; set; }
	public Int32? DictationID { get; set; }
	public String? DictationPath { get; set; }
}
public partial class GetClientTranscriptionDictationFilePathRow
{
	public Int32 ClientID { get; set; }
	public String? TranscriptionDictationPath { get; set; }
}
public partial class GetClientTranscriptionDictationFiles2Row
{
	public Int32 ClientID { get; set; }
	public Int32 OriginalTranscriptionID { get; set; }
	public Int32 DictationID { get; set; }
	public Int32 DictationFileTypeID { get; set; }
	public Int32? DictationFormatID { get; set; }
	public String Uri { get; set; }
	public Int32 CloudStorageAccountID { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public Int32 CloudDirectoryID { get; set; }
	public String Resource { get; set; }
	public Boolean IsEncrypted { get; set; }
}
public partial class GetClientTranscriptionDictationPaths2Row
{
	public Int32 ClientID { get; set; }
	public Int32 TranscriptionID { get; set; }
	public Int32 DictationID { get; set; }
	public Int32 DictationFileTypeID { get; set; }
	public Int32? DictationFormatID { get; set; }
	public String Uri { get; set; }
	public Int32 CloudStorageAccountID { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public Int32 CloudDirectoryID { get; set; }
	public String Resource { get; set; }
	public Boolean IsEncrypted { get; set; }
}
public partial class GetClientTranscriptionDictationPathsRow
{
	public Int32 ClientID { get; set; }
	public Int32 TranscriptionID { get; set; }
	public Int32 DictationID { get; set; }
	public Int32 DictationFileTypeID { get; set; }
	public String Path { get; set; }
	public Int32 IsOriginal { get; set; }
	public Boolean IsEncrypted { get; set; }
}
public partial class GetClientTranscriptionDictationRecordsRow
{
	public Int32 ClientID { get; set; }
	public Int32 TranscriptionID { get; set; }
	public Int32 DictationID { get; set; }
	public Int32 DictationFileTypeID { get; set; }
	public String Path { get; set; }
	public Int32 IsOriginal { get; set; }
	public Boolean IsEncrypted { get; set; }
}
public partial class GetClientTranscriptionDictationsByPatientIDRow
{
	public Int32 TranscriptionID { get; set; }
	public Int32? DictationID { get; set; }
	public Int32? ClientID { get; set; }
	public Int32? UserID { get; set; }
	public Int32? DocumentID { get; set; }
	public Int32? LocationID { get; set; }
	public Boolean? IsStat { get; set; }
	public String? SourceMachineName { get; set; }
	public Int32? Length { get; set; }
	public DateTimeOffset? DateDictated { get; set; }
	public String? PatientId { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public String? ReceiptCode { get; set; }
}
public partial class GetClientTranscriptionOptionalVariablesRow
{
	public Int32 TranscriptionID { get; set; }
	public Int32 ClientID { get; set; }
	public String FieldName { get; set; }
	public String? FieldValue { get; set; }
}
public partial class GetClientTranscriptionPatientOrdersRow
{
	public Int32 TranscriptionOrderID { get; set; }
	public Int32 ClientID { get; set; }
	public Int32 TranscriptionID { get; set; }
	public Guid? OrderID { get; set; }
	public String PatientID { get; set; }
	public Guid? AppointmentID { get; set; }
	public String? AccountNumber { get; set; }
	public String OrderNumber { get; set; }
	public String? AccessionNumber { get; set; }
	public String? OrderStatusCode { get; set; }
	public DateTime? DateObserved { get; set; }
	public DateTime? DateRequested { get; set; }
	public String? ItemCode { get; set; }
	public String? Description { get; set; }
	public String? Notes { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public Guid? PatientGUID { get; set; }
	public String ModifiedUser { get; set; }
	public DateTime ModifiedDate { get; set; }
	public String? OrderingPhysicianName { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
}
public partial class GetClientTranscriptionTagsRow
{
	public Int32 TranscriptionTagID { get; set; }
	public Int32 CompanyID { get; set; }
	public String? Name { get; set; }
	public String? Color { get; set; }
	public Boolean IsActive { get; set; }
}
public partial class GetClientUserAppointmentRow
{
	public Guid AppointmentID { get; set; }
	public String PatientID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public Int32 LocationID { get; set; }
	public String Physician { get; set; }
	public String? OrderNumber { get; set; }
	public String? ApptUserField1 { get; set; }
	public String? ApptUserField2 { get; set; }
	public String? ApptUserField3 { get; set; }
	public String? ApptUserField4 { get; set; }
	public String? ApptUserField5 { get; set; }
	public String? PatientFullName { get; set; }
	public String? PatientNameLast { get; set; }
	public String? PatientNameFirst { get; set; }
	public String? PatientNameMiddle { get; set; }
	public String? PatientGender { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public Guid? PatientGUID { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
}
public partial class GetClientUserAppointmentsRow
{
	public Int32 ClientID { get; set; }
	public Guid AppointmentID { get; set; }
	public String PatientID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public Int32 LocationID { get; set; }
	public String Physician { get; set; }
	public String? OrderNumber { get; set; }
	public String? ApptUserField1 { get; set; }
	public String? ApptUserField2 { get; set; }
	public String? ApptUserField3 { get; set; }
	public String? ApptUserField4 { get; set; }
	public String? ApptUserField5 { get; set; }
	public String? PatientFullName { get; set; }
	public String? PatientNameLast { get; set; }
	public String? PatientNameFirst { get; set; }
	public String? PatientNameMiddle { get; set; }
	public String? PatientGender { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public Guid? PatientGUID { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public Boolean? HasDictation { get; set; }
	public Int32? SchedulingResourceID { get; set; }
	public String? DictationID { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
}
public partial class GetClientUserAttestationTemplatesRow
{
	public Int32 TemplateID { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String DictationCode { get; set; }
}
public partial class GetClientUserAuthenticatorsRow
{
	public Int32 ClientID { get; set; }
	public Int32 UserID { get; set; }
	public String? UserFullname { get; set; }
	public String? DisplayName { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
}
public partial class GetClientUserAuthorGroupsEnrolledRow
{
	public Int32 AuthorGroupID { get; set; }
	public Int32 ClientID { get; set; }
	public String Name { get; set; }
	public String? Description { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public Int32 UserID { get; set; }
	public String? EnrollmentModifiedUser { get; set; }
	public DateTime? EnrollmentModifiedDate { get; set; }
}
public partial class GetClientUserAuthorGroupsRow
{
	public Int32 AuthorGroupID { get; set; }
	public Int32 ClientID { get; set; }
	public String Name { get; set; }
	public String? Description { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
}
public partial class GetClientUserByUsernameAndCodeRow
{
	public String? UserUsername { get; set; }
	public String? UserFullname { get; set; }
	public String? UserNameLast { get; set; }
	public String? UserNameFirst { get; set; }
	public Boolean UserActive { get; set; }
	public Int32? DocumentTypeGroupMask { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public String? DictationID { get; set; }
	public String? ClientCode { get; set; }
	public String? UserEmail { get; set; }
	public Int32? PasswordHashAlgorithmID { get; set; }
	public Byte[]? PasswordSalt { get; set; }
	public Byte[]? PasswordHash { get; set; }
	public DateTime PasswordModifiedDate { get; set; }
}
public partial class GetClientUserContactInfoRow
{
	public String? UserEmail { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
}
public partial class GetClientUserDictationTemplatesRow
{
	public Int32 TemplateID { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public String DictationCode { get; set; }
	public Int32? ClientID { get; set; }
	public Int32 UserID { get; set; }
	public Int32 DocumentID { get; set; }
	public Int32 LocationID { get; set; }
	public String? MTNotes { get; set; }
	public Boolean CanDismiss { get; set; }
	public Int32? VisibleCharacters { get; set; }
	public Int32? NonVisibleCharacters { get; set; }
	public Int32? TemplateVisibleCharacters { get; set; }
	public Int32? TemplateNonVisibleCharacters { get; set; }
}
public partial class GetClientUserDocumentTemplatesRow
{
	public Int32 DocumentTemplateID { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public String? Description { get; set; }
	public Int32 DocumentID { get; set; }
	public Int32 ClientID { get; set; }
	public Int32 UserID { get; set; }
	public Int32 LocationID { get; set; }
	public String? MTNotes { get; set; }
	public Boolean CanDismiss { get; set; }
	public Int32? VisibleCharacters { get; set; }
	public Int32? NonVisibleCharacters { get; set; }
	public Int32? TemplateVisibleCharacters { get; set; }
	public Int32? TemplateNonVisibleCharacters { get; set; }
}
public partial class GetClientUserDocumentTypesRow
{
	public Int32 ClientId { get; set; }
	public Int32 DocumentId { get; set; }
	public String? DocumentType { get; set; }
	public String? DocumentDescription { get; set; }
	public Int32? RequiredLocationId { get; set; }
	public Int32? DocumentTypeGroupMask { get; set; }
	public String? DictationId { get; set; }
	public String? ClientCode { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public Int32? DictationEmulationPromptTypeID { get; set; }
	public String? InTouchID { get; set; }
}
public partial class GetClientUserEmailVerificationStatusRow
{
	public Int32 StatusID { get; set; }
}
public partial class GetClientUserEncountersSearchRow
{
	public Int32 ClientID { get; set; }
	public String PatientID { get; set; }
	public Int32 LocationID { get; set; }
	public String Physician { get; set; }
	public String? OrderNumber { get; set; }
	public String? DictationID { get; set; }
	public String? ApptUserField1 { get; set; }
	public String? ApptUserField2 { get; set; }
	public String? ApptUserField3 { get; set; }
	public String? ApptUserField4 { get; set; }
	public String? ApptUserField5 { get; set; }
	public String? AppointmentClientCode { get; set; }
	public Int32? PatientsAppointmentsTypeID { get; set; }
	public DateTime? AdmitDate { get; set; }
	public DateTime? DischargeDate { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public Guid AppointmentID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? PatientFullName { get; set; }
	public String? PatientNameFirst { get; set; }
	public String? PatientNameLast { get; set; }
	public String? PatientNameMiddle { get; set; }
	public Guid? PatientGUID { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? PatientGender { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
}
public partial class GetClientUserFeatureFlag2_Row
{
	public Boolean? IsEnabled { get; set; }
}
public partial class GetClientUserFeatureFlagRow
{
	public Int32? IsEnabled { get; set; }
}
public partial class GetClientUserFoldersRow
{
	public Int32 FolderID { get; set; }
	public String FolderName { get; set; }
	public Boolean? IsFolderEnabled { get; set; }
	public Boolean? IsFolderLocationBased { get; set; }
	public String? CompleteLabel { get; set; }
	public Boolean? CanCompleteAll { get; set; }
	public Int32? BracketedFieldBehavior { get; set; }
}
public partial class GetClientUserForPasswordResetRow
{
	public Int32 ClientID { get; set; }
	public Int32 UserID { get; set; }
	public String? UserEmail { get; set; }
	public DateTime? UserEmailVerifiedDate { get; set; }
	public Boolean IsLocked { get; set; }
}
public partial class GetClientUserInpatientWorklistRow
{
	public Guid? PatientGUID { get; set; }
	public Int32 ClientID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public String Description { get; set; }
	public Int32 LocationID { get; set; }
	public String? OrderNumber { get; set; }
	public Guid AppointmentID { get; set; }
	public String? ApptUserField1 { get; set; }
	public String? ApptUserField2 { get; set; }
	public String? ApptUserField3 { get; set; }
	public String? ApptUserField4 { get; set; }
	public String? ApptUserField5 { get; set; }
	public DateTime? AdmitDate { get; set; }
	public DateTime? DischargeDate { get; set; }
	public String? AccountNumber { get; set; }
	public String? Location { get; set; }
	public String? Room { get; set; }
	public String? Bed { get; set; }
	public String? Floor { get; set; }
	public String? Facility { get; set; }
	public String? PatientsAppointmentsStatusID { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public Int32? PatientsAppointmentsTypeID { get; set; }
	public String? PatientLocation { get; set; }
	public String? PatientClass { get; set; }
	public String? PatientType { get; set; }
	public String? AppointmentClientCode { get; set; }
	public String? AttendingPhysicianName { get; set; }
	public String? AdmittingPhysicianName { get; set; }
	public String? ReferringPhysicianName { get; set; }
	public String? ConsultingPhysicianName { get; set; }
	public String? PrimaryCarePhysicianName { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public Int32? AppointmentDictationCount { get; set; }
	public Int32? AppointmentTranscriptionCount { get; set; }
	public Int32? AppointmentSchedulingResourceID { get; set; }
	public String PatientID { get; set; }
	public String? PatientFullName { get; set; }
	public String? PatientNameFirst { get; set; }
	public String? PatientNameLast { get; set; }
	public String? PatientNameMiddle { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? PatientGender { get; set; }
}
public partial class GetClientUserLinkedAccountsRow
{
	public Int32 SourceClientID { get; set; }
	public Int32 SourceUserID { get; set; }
	public Int32 TargetClientID { get; set; }
	public Int32 TargetUserID { get; set; }
	public String? TargetClientName { get; set; }
	public String? TargetUserName { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
}
public partial class GetClientUserLocationResourcesRow
{
	public Int32 ClientID { get; set; }
	public Int32 LocationResourceID { get; set; }
	public String Code { get; set; }
	public String Name { get; set; }
	public String? Description { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
}
public partial class GetClientUserLocationsRow
{
	public Int32 LocationID { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public String? LocationName { get; set; }
	public String? DictationId { get; set; }
	public String? ClientCode { get; set; }
}
public partial class GetClientUserPasswordHistoryRow
{
	public Int32 UserID { get; set; }
	public Byte[]? PasswordHash { get; set; }
	public Byte[]? PasswordSalt { get; set; }
	public Int32? PasswordHashAlgorithmID { get; set; }
	public DateTime? PasswordDate { get; set; }
	public Boolean CaseSensitive { get; set; }
	public Int32? HashLength { get; set; }
	public Int32? SaltLength { get; set; }
	public Int32? Iterations { get; set; }
	public String? PRF { get; set; }
}
public partial class GetClientUserPasswordLockRow
{
	public Boolean IsLocked { get; set; }
	public Int32? PasswordDaysLeft { get; set; }
}
public partial class GetClientUserPreferredDocumentTemplatesRow
{
	public Int32 DocumentTemplateID { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public String? Description { get; set; }
	public Int32 DocumentID { get; set; }
	public Int32 ClientID { get; set; }
	public Int32 UserID { get; set; }
	public Int32 LocationID { get; set; }
	public String? MTNotes { get; set; }
	public Boolean CanDismiss { get; set; }
	public Boolean IsVR { get; set; }
}
public partial class GetClientUserProxyUsersRow
{
	public Int32 ClientID { get; set; }
	public Int32 UserID { get; set; }
	public String? DisplayName { get; set; }
	public String? UserFullname { get; set; }
	public String? UserNameFirst { get; set; }
	public String? UserNameLast { get; set; }
	public String? UserUsername { get; set; }
	public Int32? DocumentTypeGroupMask { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
}
public partial class GetClientUserRow
{
	public String? UserUsername { get; set; }
	public String? UserFullname { get; set; }
	public String? UserNameLast { get; set; }
	public String? UserNameFirst { get; set; }
	public Boolean UserActive { get; set; }
	public Int32? DocumentTypeGroupMask { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public String? DictationID { get; set; }
	public String? ClientCode { get; set; }
	public String? UserEmail { get; set; }
	public Int32? PasswordHashAlgorithmID { get; set; }
	public Byte[]? PasswordSalt { get; set; }
	public Byte[]? PasswordHash { get; set; }
	public DateTime PasswordModifiedDate { get; set; }
}
public partial class GetClientUserScheduleResourcesRow
{
	public Int32 SchedulingResourceID { get; set; }
	public String Code { get; set; }
	public String? Description { get; set; }
	public String ModifiedUser { get; set; }
	public DateTime ModifiedDate { get; set; }
	public Boolean IsActive { get; set; }
	public String? Name { get; set; }
}
public partial class GetClientUsersDefaultsRow
{
	public Int32 UserID { get; set; }
	public Int32? DefaultDocumentTypeID { get; set; }
	public Int32? DefaultLocationID { get; set; }
}
public partial class GetClientUserSettingsRow
{
	public Int32? SessionTimeout { get; set; }
	public String CanSaveMobilePassword { get; set; }
	public Boolean? CanResumeMobileSession { get; set; }
	public String CanSaveInSyncPassword { get; set; }
	public Boolean? CanAccessSearchAll { get; set; }
	public Boolean? CanDictate { get; set; }
	public Int32? PreferredContentTypeID { get; set; }
	public Boolean? RequiresAdditionalSignature { get; set; }
	public Int32? DefaultDocumentTypeID { get; set; }
	public Int32? DefaultLocationID { get; set; }
	public Boolean? CanViewComments { get; set; }
	public Int32? EmailVerificationPolicy { get; set; }
	public Boolean? CanOverrideCompletionPreventions { get; set; }
}
public partial class GetClientUsersRow
{
	public Int32 ClientID { get; set; }
	public Int32 UserID { get; set; }
	public String? UserFullname { get; set; }
	public String? DisplayName { get; set; }
	public Int32? DocumentTypeGroupMask { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public String? DictationID { get; set; }
	public String? ClientCode { get; set; }
	public String? UserUsername { get; set; }
	public Boolean UserActive { get; set; }
	public String? UserEmail { get; set; }
	public String? UserNameLast { get; set; }
	public String? UserNameMiddle { get; set; }
	public String? UserNameFirst { get; set; }
	public String? UserNameSuffix { get; set; }
	public String? UserNamePrefix { get; set; }
	public Boolean UserNameComma { get; set; }
}
public partial class GetClientUserTimeZoneIdentifierRow
{
	public String? Identifier { get; set; }
}
public partial class GetClientUserTranscriptionCommentRow
{
	public String? Comment { get; set; }
}
public partial class GetClientUserTranscriptionsByPatientIDRow
{
	public Int32 TranscriptionID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public DateTime? DateDictated { get; set; }
	public String? DocumentType { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public Int32 ForClientID { get; set; }
	public Int32? ForUserID { get; set; }
	public String ClientName { get; set; }
	public Byte? WorkflowStatus { get; set; }
	public String? UserFullname { get; set; }
	public Int32? LocationID { get; set; }
	public Int32? DocumentID { get; set; }
	public DateTime? DateDictatedCST { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String? ServerTimeZoneIdentifier { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
}
public partial class GetClientUserTranscriptionsFinal2LocationBasedRow
{
	public Int32 ClientID { get; set; }
	public Int32? UserID { get; set; }
	public Int32 TranscriptionID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public DateTime? DateDictated { get; set; }
	public String? DocumentType { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public Int32 ForClientID { get; set; }
	public Int32? ForUserID { get; set; }
	public Int32? AdditionalTemplateID { get; set; }
	public Boolean? CanEdit { get; set; }
	public Boolean? CanEditHeader { get; set; }
	public Boolean? CanComplete { get; set; }
	public String? UserFullname { get; set; }
	public Int32? LocationID { get; set; }
	public Int32? DocumentID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? PatientGender { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? OrderNumber { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public DateTime? DateDictatedCST { get; set; }
	public String? Comment { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String? ServerTimeZoneIdentifier { get; set; }
}
public partial class GetClientUserTranscriptionsFinal2Row
{
	public Int32 ClientID { get; set; }
	public Int32? UserID { get; set; }
	public Int32 TranscriptionID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public DateTime? DateDictated { get; set; }
	public String? DocumentType { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public Int32 ForClientID { get; set; }
	public Int32? ForUserID { get; set; }
	public Int32? AdditionalTemplateID { get; set; }
	public Boolean? CanEdit { get; set; }
	public Boolean? CanEditHeader { get; set; }
	public Boolean? CanComplete { get; set; }
	public String? UserFullname { get; set; }
	public Int32? LocationID { get; set; }
	public Int32? DocumentID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? PatientGender { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? OrderNumber { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public DateTime? DateDictatedCST { get; set; }
	public String? Comment { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String? ServerTimeZoneIdentifier { get; set; }
}
public partial class GetClientUserTranscriptionsFinalLocationBasedRow
{
	public Int32 ClientID { get; set; }
	public Int32? UserID { get; set; }
	public Int32 TranscriptionID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public DateTime? DateDictated { get; set; }
	public String? DocumentType { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public Int32 ForClientID { get; set; }
	public Int32? ForUserID { get; set; }
	public Int32? AdditionalTemplateID { get; set; }
	public Boolean? CanEdit { get; set; }
	public Boolean? CanEditHeader { get; set; }
	public Boolean? CanComplete { get; set; }
	public String? UserFullname { get; set; }
	public Int32? LocationID { get; set; }
	public Int32? DocumentID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? PatientGender { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? OrderNumber { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public DateTime? DateDictatedCST { get; set; }
	public String? Comment { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String? ServerTimeZoneIdentifier { get; set; }
}
public partial class GetClientUserTranscriptionsFinalRow
{
	public Int32 ClientID { get; set; }
	public Int32? UserID { get; set; }
	public Int32 TranscriptionID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public DateTime? DateDictated { get; set; }
	public String? DocumentType { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public Int32 ForClientID { get; set; }
	public Int32? ForUserID { get; set; }
	public Int32? AdditionalTemplateID { get; set; }
	public Boolean? CanEdit { get; set; }
	public Boolean? CanEditHeader { get; set; }
	public Boolean? CanComplete { get; set; }
	public String? UserFullname { get; set; }
	public Int32? LocationID { get; set; }
	public Int32? DocumentID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? PatientGender { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? OrderNumber { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public DateTime? DateDictatedCST { get; set; }
	public String? Comment { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String? ServerTimeZoneIdentifier { get; set; }
}
public partial class GetClientUserTranscriptionsPreliminaryRow
{
	public Int32 TranscriptionID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public DateTime? DateDictated { get; set; }
	public String? DocumentType { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public Int32 ForClientID { get; set; }
	public Int32? ForUserID { get; set; }
	public String? ForUserFullName { get; set; }
	public Int32? AdditionalTemplateID { get; set; }
	public Int32? DefaultAttestationTemplateID { get; set; }
	public Boolean? CanEdit { get; set; }
	public Boolean? CanEditHeader { get; set; }
	public Boolean? CanComplete { get; set; }
	public Boolean? RequiresAttestation { get; set; }
	public String? UserFullname { get; set; }
	public Int32? LocationID { get; set; }
	public Int32? DocumentID { get; set; }
	public Int32? UserID { get; set; }
	public Int32 ClientID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? PatientGender { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? OrderNumber { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public DateTime? DateDictatedCST { get; set; }
	public String? Comment { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String? ServerTimeZoneIdentifier { get; set; }
}
public partial class GetClientUserTranscriptionsReferralRow
{
	public Int32 ClientID { get; set; }
	public Int32? UserID { get; set; }
	public Int32 TranscriptionID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public DateTime? DateDictated { get; set; }
	public String? DocumentType { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public Int32? ForClientID { get; set; }
	public Int32? ForUserID { get; set; }
	public Int32? AdditionalTemplateID { get; set; }
	public Boolean? CanEdit { get; set; }
	public Boolean? CanEditHeader { get; set; }
	public Boolean? CanComplete { get; set; }
	public String? UserFullname { get; set; }
	public Int32? LocationID { get; set; }
	public Int32? DocumentID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? PatientGender { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? OrderNumber { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public DateTime? DateDictatedCST { get; set; }
	public String? Comment { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String? ServerTimeZoneIdentifier { get; set; }
}
public partial class GetClientUserTranscriptionsReview2LocationBasedRow
{
	public Int32 ClientID { get; set; }
	public Int32? UserID { get; set; }
	public Int32 TranscriptionID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public DateTime? DateDictated { get; set; }
	public String? DocumentType { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public Int32 ForClientID { get; set; }
	public Int32? ForUserID { get; set; }
	public Int32? AdditionalTemplateID { get; set; }
	public Boolean? CanEdit { get; set; }
	public Boolean? CanEditHeader { get; set; }
	public Boolean? CanComplete { get; set; }
	public String? UserFullname { get; set; }
	public Int32? LocationID { get; set; }
	public Int32? DocumentID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? PatientGender { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? OrderNumber { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public DateTime? DateDictatedCST { get; set; }
	public String? Comment { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String? ServerTimeZoneIdentifier { get; set; }
}
public partial class GetClientUserTranscriptionsReview2Row
{
	public Int32 ClientID { get; set; }
	public Int32? UserID { get; set; }
	public Int32 TranscriptionID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public DateTime? DateDictated { get; set; }
	public String? DocumentType { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public Int32 ForClientID { get; set; }
	public Int32? ForUserID { get; set; }
	public Int32? AdditionalTemplateID { get; set; }
	public Boolean? CanEdit { get; set; }
	public Boolean? CanEditHeader { get; set; }
	public Boolean? CanComplete { get; set; }
	public String? UserFullname { get; set; }
	public Int32? LocationID { get; set; }
	public Int32? DocumentID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? PatientGender { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? OrderNumber { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public DateTime? DateDictatedCST { get; set; }
	public String? Comment { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String? ServerTimeZoneIdentifier { get; set; }
}
public partial class GetClientUserTranscriptionsReviewLocationBasedRow
{
	public Int32 ClientID { get; set; }
	public Int32? UserID { get; set; }
	public Int32 TranscriptionID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public DateTime? DateDictated { get; set; }
	public String? DocumentType { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public Int32 ForClientID { get; set; }
	public Int32? ForUserID { get; set; }
	public Int32? AdditionalTemplateID { get; set; }
	public Boolean? CanEdit { get; set; }
	public Boolean? CanEditHeader { get; set; }
	public Boolean? CanComplete { get; set; }
	public String? UserFullname { get; set; }
	public Int32? LocationID { get; set; }
	public Int32? DocumentID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? PatientGender { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? OrderNumber { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public DateTime? DateDictatedCST { get; set; }
	public String? Comment { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String? ServerTimeZoneIdentifier { get; set; }
}
public partial class GetClientUserTranscriptionsReviewRow
{
	public Int32 ClientID { get; set; }
	public Int32? UserID { get; set; }
	public Int32 TranscriptionID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public DateTime? DateDictated { get; set; }
	public String? DocumentType { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public Int32 ForClientID { get; set; }
	public Int32? ForUserID { get; set; }
	public Int32? AdditionalTemplateID { get; set; }
	public Boolean? CanEdit { get; set; }
	public Boolean? CanEditHeader { get; set; }
	public Boolean? CanComplete { get; set; }
	public String? UserFullname { get; set; }
	public Int32? LocationID { get; set; }
	public Int32? DocumentID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? PatientGender { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? OrderNumber { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public DateTime? DateDictatedCST { get; set; }
	public String? Comment { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String? ServerTimeZoneIdentifier { get; set; }
}
public partial class GetClientUserTranscriptionsSearchAllRow
{
	public String? ClientName { get; set; }
	public Int32? ClientID { get; set; }
	public Int32? TranscriptionID { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public Int32? UserID { get; set; }
	public String? UserFullname { get; set; }
	public Int32? DocumentID { get; set; }
	public String? DocumentType { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public Boolean? TranscriptionMarkedForReview { get; set; }
	public DateTime? DateSigned { get; set; }
	public DateTime? DateCheckedIn { get; set; }
	public DateTime? DateArchived { get; set; }
	public Int32? LocationID { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public Int32? PatientLetterID { get; set; }
	public String? OrderNumber { get; set; }
	public Boolean? PatientEnvelope { get; set; }
	public Boolean? UserCanView { get; set; }
	public Boolean? UserCanEdit { get; set; }
	public Boolean? UserCanComplete { get; set; }
	public Boolean? UserCanEditHead { get; set; }
	public Int32? WorkflowStatus { get; set; }
	public String? TagColor { get; set; }
	public String? Comment { get; set; }
	public DateTime? DateDictatedCST { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public Int32? LinkedUserID { get; set; }
	public String? LinkedUsername { get; set; }
	public String? ReceiptCode { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String? ServerTimeZoneIdentifier { get; set; }
}
public partial class GetClientUserTranscriptionsSearchAllV2Row
{
	public Int32 TranscriptionID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public DateTime? DateDictated { get; set; }
	public String? DocumentType { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public Int32 ForClientID { get; set; }
	public Int32? ForUserID { get; set; }
	public Int32? AdditionalTemplateID { get; set; }
	public Boolean? CanView { get; set; }
	public Boolean? CanEdit { get; set; }
	public Boolean? CanEditHeader { get; set; }
	public Boolean? CanComplete { get; set; }
	public Int32? WorkflowStatus { get; set; }
	public String? UserFullName { get; set; }
	public Int32? LocationID { get; set; }
	public Int32? DocumentID { get; set; }
	public Int32? UserID { get; set; }
	public Int32 ClientID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public DateTime? DateDictatedCST { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String? ServerTimeZoneIdentifier { get; set; }
	public Int32? DefaultAttestationTemplateID { get; set; }
	public Boolean? RequiresAttestation { get; set; }
	public String? Comment { get; set; }
}
public partial class GetClientUserTranscriptionsUndeliveredRow
{
	public Int32 ClientID { get; set; }
	public Int32? UserID { get; set; }
	public Int32 TranscriptionID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public DateTime? DateDictated { get; set; }
	public String? DocumentType { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public Int32 ForClientID { get; set; }
	public Int32? ForUserID { get; set; }
	public Int32? AdditionalTemplateID { get; set; }
	public Boolean? CanEdit { get; set; }
	public Boolean? CanEditHeader { get; set; }
	public Boolean? CanComplete { get; set; }
	public String? UserFullname { get; set; }
	public Int32? LocationID { get; set; }
	public Int32? DocumentID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? PatientGender { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? OrderNumber { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public DateTime? DateDictatedCST { get; set; }
	public String? Comment { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String? ServerTimeZoneIdentifier { get; set; }
}
public partial class GetClientUserTranscriptionTagsRow
{
	public Int32 TranscriptionTagID { get; set; }
	public String? Name { get; set; }
	public Boolean IsActive { get; set; }
}
public partial class GetClientUserWorklistEncountersRow
{
	public Int32 ClientID { get; set; }
	public String PatientID { get; set; }
	public Int32 LocationID { get; set; }
	public String Physician { get; set; }
	public String? OrderNumber { get; set; }
	public String? DictationID { get; set; }
	public String? ApptUserField1 { get; set; }
	public String? ApptUserField2 { get; set; }
	public String? ApptUserField3 { get; set; }
	public String? ApptUserField4 { get; set; }
	public String? ApptUserField5 { get; set; }
	public String? AppointmentClientCode { get; set; }
	public Int32? PatientsAppointmentsTypeID { get; set; }
	public DateTime? AdmitDate { get; set; }
	public DateTime? DischargeDate { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public Guid AppointmentID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? PatientFullName { get; set; }
	public String? PatientNameFirst { get; set; }
	public String? PatientNameLast { get; set; }
	public String? PatientNameMiddle { get; set; }
	public Guid? PatientGUID { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? PatientGender { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
}
public partial class GetCloudAppRegistrationRow
{
	public Int32 CloudAppRegistrationID { get; set; }
	public Int32 CloudDirectoryID { get; set; }
	public String CloudAppRegistrationName { get; set; }
	public String ApplicationID { get; set; }
	public String? CertificateThumbprint { get; set; }
	public String EmdatApplicationCode { get; set; }
	public String Authority { get; set; }
	public String CloudDirectoryName { get; set; }
	public String TenantID { get; set; }
}
public partial class GetCompanyClientDocumentTypesProgramsRow
{
	public Int32 CompanyID { get; set; }
	public Int32 ClientID { get; set; }
	public Int32 DocumentId { get; set; }
	public String? DocumentType { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public Int32 QARatingProgramID { get; set; }
}
public partial class GetCompanyClientRelationshipRow
{
	public Int32 CompanyID { get; set; }
	public Int32 ClientID { get; set; }
	public Boolean ClientPrimaryCompany { get; set; }
	public Int32 MaxCheckoutMinutes { get; set; }
	public Boolean AddAssociates { get; set; }
	public Boolean CanKeepWorkLocal { get; set; }
	public Boolean IsClientFeedbackEnabled { get; set; }
	public Boolean CanCorrect { get; set; }
	public Boolean MarkPriorAsQT { get; set; }
	public Boolean TranCoQA { get; set; }
	public Boolean TranCoQAOptional { get; set; }
	public Int32? QALevels { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
}
public partial class GetCompanyClientsRow
{
	public Int32 ClientID { get; set; }
	public String ClientName { get; set; }
	public String? ClientFullName { get; set; }
	public Boolean ClientActive { get; set; }
	public String? ClientAddress1 { get; set; }
	public String? ClientAddress2 { get; set; }
	public String? ClientAddress3 { get; set; }
	public String? ClientCity { get; set; }
	public String? ClientState { get; set; }
	public String? ClientZipCode { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? TimeZoneIdentifier { get; set; }
	public Int32? QARatingProgramID { get; set; }
}
public partial class GetCompanyDefaultPasswordHashAlgorithmRow
{
	public Int32 PasswordHashAlgorithmID { get; set; }
	public String Name { get; set; }
	public String? Description { get; set; }
	public Boolean CaseSensitive { get; set; }
	public String? PRF { get; set; }
	public Int32? SaltLength { get; set; }
	public Int32? HashLength { get; set; }
	public Int32? Iterations { get; set; }
	public DateTime ModifiedDate { get; set; }
	public String ModifiedUser { get; set; }
}
public partial class GetCompanyEmailSettingsRow
{
	public String? CompanyName { get; set; }
	public String? CompanyEmail { get; set; }
	public String? WebSiteURL { get; set; }
	public String? HelpDeskPhone { get; set; }
	public String? HelpDeskURL { get; set; }
	public String? SystemName { get; set; }
	public String? EmailVerificationSubject { get; set; }
	public String? EmailVerificationBodyTemplate { get; set; }
	public Int32? EmailVerificationBodyFormat { get; set; }
}
public partial class GetCompanyInTouchAccountRow
{
	public Int32 InTouchAccountID { get; set; }
	public String? MachineCode { get; set; }
	public Boolean UseAlternateDIDs { get; set; }
	public DateTime? LastUpdate { get; set; }
	public Int32? CompanyID { get; set; }
}
public partial class GetCompanyInTouchServerClientsRow
{
	public Int32 ClientID { get; set; }
	public String ClientName { get; set; }
	public String? ClientFullName { get; set; }
	public Boolean ClientActive { get; set; }
	public Boolean UseDictation { get; set; }
	public Boolean RelationshipActive { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? TimeZoneIdentifier { get; set; }
	public Int32? InTouchSuspendedAutoUploadHours { get; set; }
	public String? InTouchGreeting { get; set; }
}
public partial class GetCompanyInTouchServerClientUsersRow
{
	public Int32 ClientID { get; set; }
	public Int32 UserID { get; set; }
	public String? UserFullname { get; set; }
	public String? DisplayName { get; set; }
	public String? UserNameLast { get; set; }
	public String? UserNameFirst { get; set; }
	public Int32? DocumentTypeGroupMask { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public String? DictationID { get; set; }
	public String? ClientCode { get; set; }
	public String? UserUsername { get; set; }
	public Int32? InTouchReviewPIN { get; set; }
	public Int32? DictationEmulationID { get; set; }
	public String? InTouchDID { get; set; }
	public String? InTouchID { get; set; }
	public Int32? LocationID { get; set; }
	public String? InTouchGreeting { get; set; }
}
public partial class GetCompanyInTouchServerResetUsersRow
{
	public Int32 UserID { get; set; }
	public String? DisplayName { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
}
public partial class GetCompanyInTouchServerRow
{
	public Int32 ServerID { get; set; }
	public String? MachineCode { get; set; }
	public Boolean UseAlternateDIDs { get; set; }
	public DateTime? LastUpdate { get; set; }
	public Int32? CompanyID { get; set; }
}
public partial class GetCompanyPasswordComplexitySettingsRow
{
	public Int32 CompanyID { get; set; }
	public Int32 PasswordHistoryCount { get; set; }
	public Int32 PasswordMinimumLength { get; set; }
	public Int32 PasswordPatternLength { get; set; }
	public Boolean PasswordCaseSensitive { get; set; }
	public Boolean PasswordRequireUpperCase { get; set; }
	public Boolean PasswordRequireLowerCase { get; set; }
	public Boolean PasswordRequireNumerical { get; set; }
	public Boolean PasswordRequireSpecial { get; set; }
	public Int32 PasswordUsernamePatternLength { get; set; }
}
public partial class GetCompanyQARatingAuthorizationRow
{
	public Boolean? IsAuthorized { get; set; }
}
public partial class GetCompanyQARatingCategoriesRow
{
	public Int32 CompanyID { get; set; }
	public Int32 QARatingCategoryID { get; set; }
	public String? Name { get; set; }
	public Int32 MaxErrorCount { get; set; }
	public Decimal MaxErrorDeduction { get; set; }
	public Int32? SortOrder { get; set; }
	public Boolean IsActive { get; set; }
	public DateTime ModifiedDate { get; set; }
	public String ModifiedUser { get; set; }
}
public partial class GetCompanyQARatingCategoryRow
{
	public Int32 CompanyID { get; set; }
	public Int32 QARatingCategoryID { get; set; }
	public String? Name { get; set; }
	public Int32 MaxErrorCount { get; set; }
	public Decimal MaxErrorDeduction { get; set; }
	public Int32? SortOrder { get; set; }
	public Boolean IsActive { get; set; }
	public DateTime ModifiedDate { get; set; }
	public String ModifiedUser { get; set; }
}
public partial class GetCompanyQARatingProgramRatingRow
{
	public Int32 CompanyID { get; set; }
	public Int32 QARatingProgramID { get; set; }
	public Int32 QARatingCategoryCompanyID { get; set; }
	public Int32 QARatingCategoryID { get; set; }
	public Int32 QARatingID { get; set; }
	public String Description { get; set; }
	public Decimal Points { get; set; }
	public Int32 SortOrder { get; set; }
	public Boolean IsActive { get; set; }
	public String? Shortcut { get; set; }
	public DateTime ModifiedDate { get; set; }
	public String ModifiedUser { get; set; }
}
public partial class GetCompanyQARatingProgramRatingsRow
{
	public Int32 CompanyID { get; set; }
	public Int32 QARatingProgramID { get; set; }
	public Int32 QARatingCategoryCompanyID { get; set; }
	public Int32 QARatingCategoryID { get; set; }
	public Int32 QARatingID { get; set; }
	public String Description { get; set; }
	public Decimal Points { get; set; }
	public Int32 SortOrder { get; set; }
	public Boolean IsActive { get; set; }
	public String? Shortcut { get; set; }
	public DateTime ModifiedDate { get; set; }
	public String ModifiedUser { get; set; }
}
public partial class GetCompanyQARatingProgramRow
{
	public Int32 CompanyID { get; set; }
	public Int32 QARatingProgramID { get; set; }
	public String Name { get; set; }
	public String? Description { get; set; }
	public Boolean IsActive { get; set; }
	public DateTime ModifiedDate { get; set; }
	public String ModifiedUser { get; set; }
}
public partial class GetCompanyQARatingProgramsRow
{
	public Int32 CompanyID { get; set; }
	public Int32 QARatingProgramID { get; set; }
	public String Name { get; set; }
	public String? Description { get; set; }
	public Boolean IsActive { get; set; }
	public DateTime ModifiedDate { get; set; }
	public String ModifiedUser { get; set; }
}
public partial class GetCompanyRow
{
	public Int32 CompanyID { get; set; }
	public String CompanyCode { get; set; }
	public String? CompanyName { get; set; }
	public Boolean CompanyActive { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? TimeZoneIdentifier { get; set; }
}
public partial class GetCompanySupportInformationInScribeSupportNotesRow
{
	public Int32 CompanyID { get; set; }
	public String? InScribeSupportNotes { get; set; }
}
public partial class GetCompanySupportInformationRow
{
	public Int32 CompanyID { get; set; }
	public Int32 LicenseID { get; set; }
	public String? LicenseDescription { get; set; }
	public String? SystemName { get; set; }
	public String? HelpDeskPhone { get; set; }
}
public partial class GetCompanyUserByUsernameAndCodeRow
{
	public Int32 TranscriptionistID { get; set; }
	public String? TranscriptionistUsername { get; set; }
	public String? TranscriptionistFullname { get; set; }
	public String? TranscriptionistNameLast { get; set; }
	public String? TranscriptionistNameMiddle { get; set; }
	public String? TranscriptionistNameFirst { get; set; }
	public Boolean TranscriptionistActive { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public String? TranscriptionistEMail { get; set; }
	public String? TranscriptionistPhone1 { get; set; }
	public String? TranscriptionistPhone2 { get; set; }
	public Int32? PasswordDaysLeft { get; set; }
	public Int32? PasswordHashAlgorithmID { get; set; }
	public Byte[]? PasswordSalt { get; set; }
	public Byte[]? PasswordHash { get; set; }
	public DateTime PasswordModifiedDate { get; set; }
}
public partial class GetCompanyUserClientPoolTranscriptionJobAssociatesRow
{
	public Int32? ClientID { get; set; }
	public Int32 AssociateID { get; set; }
	public String? AssociateNameFirst { get; set; }
	public String? AssociateNameLast { get; set; }
	public String? AssociateNameMiddle { get; set; }
	public String? AssociateFullName { get; set; }
	public String? AssociatePrefix { get; set; }
	public String? AssociateSuffix { get; set; }
	public String? AssociateAddress1 { get; set; }
	public String? AssociateAddress2 { get; set; }
	public String? AssociateAddress3 { get; set; }
	public String? AssociateBusinessName { get; set; }
	public String? AssociateCity { get; set; }
	public String? AssociateClientCode { get; set; }
	public String? AssociateCountry { get; set; }
	public String? AssociateEMail { get; set; }
	public String? AssociateFax { get; set; }
	public String? AssociateGreeting { get; set; }
	public String? AssociatePhone { get; set; }
	public String? AssociateSpecialty { get; set; }
	public String? AssociateState { get; set; }
	public Int16 AssociateTypeID { get; set; }
	public String? AssociateZipCode { get; set; }
	public String? AssociateCompany { get; set; }
	public Boolean InformalAssociate { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public Boolean PrimaryAssociate { get; set; }
	public Int32 TranscriptionID { get; set; }
	public Int32? ReferralLocationID { get; set; }
	public Int32? ReferralUserID { get; set; }
	public Boolean AssociateAutoFax { get; set; }
	public Int32 DeliveryType { get; set; }
}
public partial class GetCompanyUserClientPoolTranscriptionJobLogEntriesRow
{
	public String? Initials { get; set; }
	public Int32? MTUserID { get; set; }
	public String? MTUserName { get; set; }
	public Int32? MTLevel { get; set; }
	public String? MTFirstName { get; set; }
	public String? MTLastName { get; set; }
	public String? MTInitials { get; set; }
	public Int32? QAUserID { get; set; }
	public String? QAUserName { get; set; }
	public Int32? QALevel { get; set; }
	public String? QAFirstName { get; set; }
	public String? QALastName { get; set; }
	public String? QAInitials { get; set; }
}
public partial class GetCompanyUserClientPoolTranscriptionJobOptionalVariablesRow
{
	public Int32 TranscriptionID { get; set; }
	public Int32 ClientID { get; set; }
	public String FieldName { get; set; }
	public String? FieldValue { get; set; }
}
public partial class GetCompanyUserClientPoolTranscriptionJobRow
{
	public Int32? TranscriptionistCompanyID { get; set; }
	public Int32 TranscriptionistID { get; set; }
	public Int32? ClientID { get; set; }
	public Int32 TranscriptionID { get; set; }
	public Int32 CorrectionTID { get; set; }
	public Int32? OriginalTID { get; set; }
	public Int32 TranPriorID { get; set; }
	public Int32 TranNextID { get; set; }
	public Int32? TranscriptionUserID { get; set; }
	public Int32? DocumentTypeID { get; set; }
	public Int32? LocationID { get; set; }
	public Int32? PatientLetterID { get; set; }
	public DateTime? DateDictated { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? PatientGender { get; set; }
	public String? PatientCompany { get; set; }
	public String? PatientAddress1 { get; set; }
	public String? PatientAddress2 { get; set; }
	public String? PatientAddress3 { get; set; }
	public String? PatientCity { get; set; }
	public String? PatientState { get; set; }
	public String? PatientZipCode { get; set; }
	public String? PatientHomePhone { get; set; }
	public String? PatientWorkPhone { get; set; }
	public String? PatientNameLast { get; set; }
	public String? PatientNameFirst { get; set; }
	public String? PatientNameMiddle { get; set; }
	public Guid? PatientGUID { get; set; }
	public String? PatientOrderNumber { get; set; }
	public String? PatientUserField1 { get; set; }
	public String? PatientUserField2 { get; set; }
	public String? PatientUserField3 { get; set; }
	public String? PatientUserField4 { get; set; }
	public String? PatientUserField5 { get; set; }
	public String? OrderNumber { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public String? Comment { get; set; }
	public String? TranscriptionFilepath { get; set; }
	public String? TranscriptionDictationPath { get; set; }
	public String? Initials { get; set; }
	public Int32? DictationID { get; set; }
	public DateTime? DueDate { get; set; }
	public DateTime? DateDictationReceived { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String? ServerTimeZoneIdentifier { get; set; }
	public String? ReceiptCode { get; set; }
	public Int32? HeaderConfigurationID { get; set; }
	public Int32? Priority { get; set; }
	public Int32? PoolPriority { get; set; }
	public Int32? DictationLengthInSeconds { get; set; }
	public Boolean? QAOptional { get; set; }
	public Int32? QAPercent { get; set; }
	public Boolean? CanCorrect { get; set; }
	public Boolean? CanInvalidate { get; set; }
	public Boolean? CanChooseQALevel { get; set; }
	public Boolean? CanDeliverToClient { get; set; }
	public Int32? DefaultWorkflowOverride { get; set; }
	public Boolean? QARatingsEnabled { get; set; }
	public Int32? QARatingProgramID { get; set; }
	public Int32? QARatingCompanyID { get; set; }
	public Boolean? IsQAFeedbackGraded { get; set; }
	public Boolean? CanChangeIsQAFeedbackGraded { get; set; }
	public Int32? ContentTypeID { get; set; }
	public Boolean? CanViewPrior { get; set; }
	public Int32? LoadFirstPatientVisitArtifactOptionID { get; set; }
	public Int32? SearchForPatientRelatedArtifactsOnLoadOptionID { get; set; }
	public Int32? ShowSinglePatientArtifactOptionID { get; set; }
	public Int32? ShowSinglePatientArtifactFromAuthorListingOptionID { get; set; }
	public Int32? ShowSinglePatientRelatedArtifactOptionID { get; set; }
	public Boolean TranscriptionMarkedForReview { get; set; }
	public Int32? DictationIndexInSeconds { get; set; }
	public String? Description { get; set; }
	public DateTime? AdmitDate { get; set; }
	public DateTime? DischargeDate { get; set; }
	public String? AccountNumber { get; set; }
	public String? Bed { get; set; }
	public String? Floor { get; set; }
	public String? PatientLocation { get; set; }
	public Guid? AppointmentID { get; set; }
	public Int32? AppointmentPatientsAppointmentsTypeID { get; set; }
	public DateTime? AppointmentAppointmentDate { get; set; }
	public Int32? AppointmentLocationID { get; set; }
	public String? AppointmentDescription { get; set; }
	public String? AppointmentOrderNumber { get; set; }
	public String? AppointmentUserField1 { get; set; }
	public String? AppointmentUserField2 { get; set; }
	public String? AppointmentUserField3 { get; set; }
	public String? AppointmentUserField4 { get; set; }
	public String? AppointmentUserField5 { get; set; }
	public DateTime? AppointmentAdmitDate { get; set; }
	public DateTime? AppointmentDischargeDate { get; set; }
	public String? AppointmentAccountNumber { get; set; }
	public String? AppointmentBed { get; set; }
	public String? AppointmentRoom { get; set; }
	public String? AppointmentFloor { get; set; }
	public String? AppointmentFacility { get; set; }
	public String? AppointmentPatientLocation { get; set; }
	public String? AppointmentPatientClass { get; set; }
	public String? AppointmentPatientType { get; set; }
	public String? AppointmentAttendingPhysicianName { get; set; }
	public String? AppointmentAdmittingPhysicianName { get; set; }
	public String? AppointmentReferringPhysicianName { get; set; }
	public String? AppointmentConsultingPhysicianName { get; set; }
	public String? AppointmentPrimaryCarePhysicianName { get; set; }
	public String? AppointmentPatientsAppointmentsStatusID { get; set; }
	public String? AppointmentAppointmentClientCode { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public Boolean CanPrintFromInScribe { get; set; }
}
public partial class GetCompanyUserClientPoolTranscriptionJobSignaturesRow
{
	public Int32 ClientID { get; set; }
	public String? AuthorizerFullName { get; set; }
	public Int32 AuthorizerID { get; set; }
	public Int32? AuthenticatorID { get; set; }
	public DateTime? DateSigned { get; set; }
	public Int32? SignOrder { get; set; }
}
public partial class GetCompanyUserClientPoolTranscriptionJobTagsRow
{
	public Int32 CompanyID { get; set; }
	public Int32 TranscriptionTagID { get; set; }
	public String? Name { get; set; }
	public String? Color { get; set; }
	public Boolean IsActive { get; set; }
}
public partial class GetCompanyUserContactInfoRow
{
	public Int32 TranscriptionistID { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public String? Email { get; set; }
	public String? Phone1 { get; set; }
	public String? Phone2 { get; set; }
}
public partial class GetCompanyUserEmailVerificationStatusRow
{
	public Int32 StatusID { get; set; }
}
public partial class GetCompanyUserFeatureFlag2Row
{
	public Boolean? IsEnabled { get; set; }
}
public partial class GetCompanyUserFeatureFlagRow
{
	public Int32? IsEnabled { get; set; }
}
public partial class GetCompanyUserMachineClientPoolTranscriptionJobsRow
{
	public Int32? TranscriptionistCompanyID { get; set; }
	public Int32 TranscriptionistID { get; set; }
	public Int32? ClientID { get; set; }
	public Int32 TranscriptionID { get; set; }
	public Int32 CorrectionTID { get; set; }
	public Int32? OriginalTID { get; set; }
	public Int32 TranPriorID { get; set; }
	public Int32 TranNextID { get; set; }
	public Int32? TranscriptionUserID { get; set; }
	public Int32? DocumentTypeID { get; set; }
	public Int32? LocationID { get; set; }
	public Int32? PatientLetterID { get; set; }
	public DateTime? DateDictated { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? PatientGender { get; set; }
	public String? OrderNumber { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public String? Comment { get; set; }
	public String? TranscriptionFilepath { get; set; }
	public String? TranscriptionDictationPath { get; set; }
	public String? Initials { get; set; }
	public Int32? DictationID { get; set; }
	public DateTime? DueDate { get; set; }
	public DateTime? DateDictationReceived { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String? ServerTimeZoneIdentifier { get; set; }
	public String? ReceiptCode { get; set; }
	public Int32? Priority { get; set; }
	public Int32? PoolPriority { get; set; }
	public Int32? DictationLengthInSeconds { get; set; }
	public Boolean? QAOptional { get; set; }
	public Int32? QAPercent { get; set; }
	public Boolean? CanCorrect { get; set; }
	public Boolean? CanInvalidate { get; set; }
	public Boolean? CanChooseQALevel { get; set; }
	public Boolean? CanDeliverToClient { get; set; }
	public Int32? DefaultWorkflowOverride { get; set; }
	public Boolean? QARatingsEnabled { get; set; }
	public Int32? QARatingProgramID { get; set; }
	public Boolean? IsQAFeedbackGraded { get; set; }
	public Boolean? CanChangeIsQAFeedbackGraded { get; set; }
	public Int32? ContentTypeID { get; set; }
	public Boolean? CanViewPrior { get; set; }
}
public partial class GetCompanyUserMachineClientPoolTranscriptionJobsV2Row
{
	public Int32 TranscriptionID { get; set; }
}
public partial class GetCompanyUserPasswordHistoryRow
{
	public Int32 TranscriptionistID { get; set; }
	public Byte[]? PasswordHash { get; set; }
	public Byte[]? PasswordSalt { get; set; }
	public Int32? PasswordHashAlgorithmID { get; set; }
	public DateTime? PasswordDate { get; set; }
	public Boolean CaseSensitive { get; set; }
	public Int32? HashLength { get; set; }
	public Int32? SaltLength { get; set; }
	public Int32? Iterations { get; set; }
	public String? PRF { get; set; }
}
public partial class GetCompanyUserPasswordLockRow
{
	public Boolean IsLocked { get; set; }
	public Int32? PasswordDaysLeft { get; set; }
}
public partial class GetCompanyUserQAFeedbackCountsRow
{
	public Int32? NumberOfItems { get; set; }
	public DateTime? NewestItemDate { get; set; }
}
public partial class GetCompanyUserRow
{
	public Int32 TranscriptionistID { get; set; }
	public String? TranscriptionistUsername { get; set; }
	public String? TranscriptionistFullname { get; set; }
	public String? TranscriptionistNameLast { get; set; }
	public String? TranscriptionistNameMiddle { get; set; }
	public String? TranscriptionistNameFirst { get; set; }
	public Boolean TranscriptionistActive { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public String? TranscriptionistEMail { get; set; }
	public String? TranscriptionistPhone1 { get; set; }
	public String? TranscriptionistPhone2 { get; set; }
	public Int32? PasswordDaysLeft { get; set; }
	public Int32? PasswordHashAlgorithmID { get; set; }
	public Byte[]? PasswordSalt { get; set; }
	public Byte[]? PasswordHash { get; set; }
	public DateTime PasswordModifiedDate { get; set; }
}
public partial class GetCompanyUserSettingsRow
{
	public Int32? TranscriptionistCompanyID { get; set; }
	public Int32 TranscriptionistID { get; set; }
	public Int32? MaxDocumentsInQueue { get; set; }
	public Int32 DocumentsInQueue { get; set; }
	public Boolean CanAddAssociate { get; set; }
	public Boolean CanCheckForDictations { get; set; }
	public Boolean CanEditPatient { get; set; }
	public Boolean CanEnterNewTranscription { get; set; }
	public Boolean CanViewPool { get; set; }
	public Boolean CanViewPrior { get; set; }
	public Boolean DefaultCanInvalidate { get; set; }
	public Int32? QALevel { get; set; }
	public Boolean ShowFinalCounts { get; set; }
	public String? BenchmarkKBApiURL { get; set; }
	public String? BenchmarkKBSiteID { get; set; }
	public String? BenchmarkKBSiteKey { get; set; }
	public Boolean DefaultUseTemplateCharacters { get; set; }
	public String? InScribe6EditorURL { get; set; }
	public String InScribe6FeedbackURL { get; set; }
	public String? InScribe6SoftwareURL { get; set; }
	public String? InScribe6KnowledgeBaseURL { get; set; }
	public String InScribe6BenchmarkKBInformationURL { get; set; }
	public Boolean CanPrintFromInScribe { get; set; }
	public Int32 EmailTokenExpirationMinutes { get; set; }
	public Int32? EmailVerificationPolicy { get; set; }
}
public partial class GetCompanyUserTranscriptionLogByDateDelivered2Row
{
	public Int32 TranscriptionID { get; set; }
	public Int32 ClientID { get; set; }
	public String ClientName { get; set; }
	public String? DocumentType { get; set; }
	public String? UserFullname { get; set; }
	public String? LocationName { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public String? ReceiptCode { get; set; }
	public Int32? Lines { get; set; }
	public Int32? TemplateLines { get; set; }
	public Decimal? TranscriptionistRate { get; set; }
	public Decimal? TemplateRate { get; set; }
	public Decimal? DocumentPrice { get; set; }
	public Boolean TranscriptionStat { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public Boolean IsShadowScribe { get; set; }
	public Int32? TranscriptionLengthInSeconds { get; set; }
}
public partial class GetCompanyUserTranscriptionLogByDateDeliveredRow
{
	public Int32 TranscriptionistID { get; set; }
	public Int32? TranscriptionistCompanyID { get; set; }
	public Int32 TranscriptionID { get; set; }
	public Int32 ClientID { get; set; }
	public DateTime? DateDictated { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public Int32? DocumentID { get; set; }
	public String? DocumentType { get; set; }
	public String? DocumentDescription { get; set; }
	public String? TranscriptionFilepath { get; set; }
	public DateTime? DateSigned { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public Int32? UserID { get; set; }
	public String? UserUsername { get; set; }
	public String? UserFullname { get; set; }
	public String? UserNameFirst { get; set; }
	public String? UserNameLast { get; set; }
	public String? UserNamePrefix { get; set; }
	public String? UserNameMiddle { get; set; }
	public String? UserNameSuffix { get; set; }
	public Int32? LocationID { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public String? LocationName { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? PatientGender { get; set; }
	public Guid? PatientGUID { get; set; }
	public String? OrderNumber { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public String? ReceiptCode { get; set; }
	public DateTime? DateDictatedCST { get; set; }
	public Int32? Lines { get; set; }
	public Int32? TemplateLines { get; set; }
	public Decimal? TranscriptionistRate { get; set; }
	public Decimal? TemplateRate { get; set; }
	public Decimal? DocumentPrice { get; set; }
	public Boolean TranscriptionStat { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String ServerTimeZoneIdentifier { get; set; }
	public String? ModifiedUser { get; set; }
}
public partial class GetCompanyUserTranscriptionLogByDateTranscribed2Row
{
	public Int32 TranscriptionID { get; set; }
	public Int32 ClientID { get; set; }
	public String ClientName { get; set; }
	public String? DocumentType { get; set; }
	public String? UserFullname { get; set; }
	public String? LocationName { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public String? ReceiptCode { get; set; }
	public Int32? Lines { get; set; }
	public Int32? TemplateLines { get; set; }
	public Decimal? TranscriptionistRate { get; set; }
	public Decimal? TemplateRate { get; set; }
	public Decimal? DocumentPrice { get; set; }
	public Boolean TranscriptionStat { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public Boolean IsShadowScribe { get; set; }
	public Int32? TranscriptionLengthInSeconds { get; set; }
}
public partial class GetCompanyUserTranscriptionLogByDateTranscribedRow
{
	public Int32 TranscriptionistID { get; set; }
	public Int32? TranscriptionistCompanyID { get; set; }
	public Int32 TranscriptionID { get; set; }
	public Int32 ClientID { get; set; }
	public DateTime? DateDictated { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public Int32? DocumentID { get; set; }
	public String? DocumentType { get; set; }
	public String? DocumentDescription { get; set; }
	public String? TranscriptionFilepath { get; set; }
	public DateTime? DateSigned { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public Int32? UserID { get; set; }
	public String? UserUsername { get; set; }
	public String? UserFullname { get; set; }
	public String? UserNameFirst { get; set; }
	public String? UserNameLast { get; set; }
	public String? UserNamePrefix { get; set; }
	public String? UserNameMiddle { get; set; }
	public String? UserNameSuffix { get; set; }
	public Int32? LocationID { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public String? LocationName { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? PatientGender { get; set; }
	public Guid? PatientGUID { get; set; }
	public String? OrderNumber { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public String? ReceiptCode { get; set; }
	public DateTime? DateDictatedCST { get; set; }
	public Int32? Lines { get; set; }
	public Int32? TemplateLines { get; set; }
	public Decimal? TranscriptionistRate { get; set; }
	public Decimal? TemplateRate { get; set; }
	public Decimal? DocumentPrice { get; set; }
	public Boolean TranscriptionStat { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String ServerTimeZoneIdentifier { get; set; }
	public String? ModifiedUser { get; set; }
}
public partial class GetCompanyUserTranscriptionPreviewAssociatesRow
{
	public Int32? TranscriptionistCompanyID { get; set; }
	public Int32 TranscriptionistID { get; set; }
	public Int32? ClientID { get; set; }
	public Int32 PreviewID { get; set; }
	public String? AssociateClientCode { get; set; }
	public String? AssociatePrefix { get; set; }
	public String? AssociateNameFirst { get; set; }
	public String? AssociateNameMiddle { get; set; }
	public String? AssociateNameLast { get; set; }
	public String? AssociateSuffix { get; set; }
	public String? AssociateBusinessName { get; set; }
	public String? AssociateSpecialty { get; set; }
	public String? AssociateGreeting { get; set; }
	public String? AssociateAddress1 { get; set; }
	public String? AssociateAddress2 { get; set; }
	public String? AssociateAddress3 { get; set; }
	public String? AssociateCity { get; set; }
	public String? AssociateState { get; set; }
	public String? AssociateZipCode { get; set; }
	public String? AssociateCompany { get; set; }
	public String? AssociateCountry { get; set; }
	public String? AssociatePhone { get; set; }
	public String? AssociateFax { get; set; }
	public String? AssociateEMail { get; set; }
}
public partial class GetCompanyUserTranscriptionPreviewCountsRow
{
	public Int32? TotalCharacters { get; set; }
	public Int32? TemplateCharacters { get; set; }
	public Int32? StandardCharacters { get; set; }
	public Int32? TotalLines { get; set; }
	public Int32? TemplateLines { get; set; }
	public Int32? StandardLines { get; set; }
	public Int32? CharacterCountTypeID { get; set; }
	public Int32? CharactersPerBillingUnit { get; set; }
	public Boolean? UseAAMT { get; set; }
	public Boolean? UseQT { get; set; }
}
public partial class GetCompanyUserTranscriptionPreviewRow
{
	public Int32? TranscriptionistCompanyID { get; set; }
	public Int32 TranscriptionistID { get; set; }
	public Int32 ClientID { get; set; }
	public Int32 PreviewID { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public String? PatientGender { get; set; }
	public Int32? UserID { get; set; }
	public Int32? LocationID { get; set; }
	public Int32? DocumentID { get; set; }
	public String? DocumentType { get; set; }
	public String? OrderNumber { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public Int32? CanPrint { get; set; }
}
public partial class GetCompanyUserTranscriptionRow
{
	public Int32 TranscriptionID { get; set; }
	public Int32 ClientID { get; set; }
	public Int32? UserID { get; set; }
	public String? UserFullname { get; set; }
	public String? UserUsername { get; set; }
	public Int32? LocationID { get; set; }
	public Int32? DocumentID { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public String? OrderNumber { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public String? PatientGender { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public DateTime? DateDictated { get; set; }
	public DateTime? DateDictatedCST { get; set; }
	public DateTime? DateArchived { get; set; }
	public String? DocumentType { get; set; }
	public String? ReceiptCode { get; set; }
	public String? Comment { get; set; }
}
public partial class GetCompanyUserTranscriptionsPoolCountRow
{
	public Int32? TheCount { get; set; }
}
public partial class GetCompanyUserTranscriptionsPoolRow
{
	public Int32 TranscriptionID { get; set; }
	public Int32? DictationLengthInSeconds { get; set; }
	public Int32 ClientID { get; set; }
	public Int32? TranscriptionUserID { get; set; }
	public String? UserFullName { get; set; }
	public Int32? LocationID { get; set; }
	public Int32? DocumentTypeID { get; set; }
	public String? DocumentType { get; set; }
	public DateTime? DateDictated { get; set; }
	public String? Initials { get; set; }
	public DateTime? DateCheckedOut { get; set; }
	public Int32? Priority { get; set; }
	public Int32? PoolPriority { get; set; }
	public DateTime? DateDictationReceived { get; set; }
	public DateTime? DateCheckedOutSort { get; set; }
	public String? ReceiptCode { get; set; }
	public DateTime? DueDate { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String? ServerTimeZoneIdentifier { get; set; }
}
public partial class GetDefaultHeaderConfigurationRow
{
	public Int32 ClientID { get; set; }
	public Int32 HeaderConfigurationID { get; set; }
	public String Name { get; set; }
	public String? Description { get; set; }
	public String? DemographicConfiguration { get; set; }
	public String? PatientSearchConfiguration { get; set; }
	public String? ArtifactSearchConfiguration { get; set; }
	public String ModifiedUser { get; set; }
	public DateTime ModifiedDate { get; set; }
	public Int32? RemovedPatientTranscriptionTagCompanyID { get; set; }
	public Int32? RemovedPatientTranscriptionTagID { get; set; }
	public Int32? RemovedArtifactsTranscriptionTagCompanyID { get; set; }
	public Int32? RemovedArtifactsTranscriptionTagID { get; set; }
}
public partial class GetDeviceByIdentifierRow
{
	public Int32 DeviceID { get; set; }
	public Int32 DeviceAPITypeID { get; set; }
	public Boolean ShowDictationLog { get; set; }
	public Boolean? PrintDictationLog { get; set; }
	public String? ExtendedConfigurationInfo { get; set; }
	public DateTime ModifiedDate { get; set; }
	public String ModifiedUser { get; set; }
}
public partial class GetDeviceByIdRow
{
	public Int32 DeviceID { get; set; }
	public String Identifier { get; set; }
	public Boolean ShowDictationLog { get; set; }
	public String? ExtendedConfigurationInfo { get; set; }
	public DateTime ModifiedDate { get; set; }
	public String ModifiedUser { get; set; }
}
public partial class GetDeviceFoldersRow
{
	public Int32 DeviceFolderID { get; set; }
	public Int32? ParentDeviceFolderID { get; set; }
	public String Folder { get; set; }
	public String? DisplayName { get; set; }
	public Int32? ClientID { get; set; }
	public Int32? UserID { get; set; }
	public Int32? DocumentID { get; set; }
	public Int32? LocationID { get; set; }
	public Boolean? IsStat { get; set; }
}
public partial class GetDictationASRDraftRow
{
	public Byte[]? ASRContent { get; set; }
}
public partial class GetDictationFilesRow
{
	public Int32 DictationFileTypeID { get; set; }
	public String Path { get; set; }
	public Int32? SamplesPerSecond { get; set; }
}
public partial class GetDictationRouteByDocumentRow
{
	public Int32 DictationRouteID { get; set; }
	public String Name { get; set; }
	public Boolean RequiresOriginalDictationFile { get; set; }
}
public partial class GetDictationRouteFileTypesRow
{
	public Int32 DictationRouteID { get; set; }
	public Int32 DictationFileTypeID { get; set; }
	public String Name { get; set; }
	public String? ExtendedInfo { get; set; }
	public Boolean? IsEncrypted { get; set; }
}
public partial class GetDictationRouteRow
{
	public String Name { get; set; }
	public String? Description { get; set; }
	public Boolean RequiresOriginalDictationFile { get; set; }
}
public partial class GetDictationRow
{
	public Int32 DictationID { get; set; }
	public Int32? DictationRouteID { get; set; }
	public Int32? DictationStatusID { get; set; }
	public Int32? DictationSourceID { get; set; }
	public String? SourceMachineName { get; set; }
	public Boolean IsStat { get; set; }
	public Int32? Length { get; set; }
	public DateTimeOffset? DateDictated { get; set; }
	public DateTime? DateUploaded { get; set; }
	public DateTime? DateConverted { get; set; }
	public DateTime? DateReceived { get; set; }
	public Int32 ClientID { get; set; }
	public Int32? UserID { get; set; }
	public Int32? DocumentID { get; set; }
	public Int32? LocationID { get; set; }
	public Guid? AppointmentID { get; set; }
	public String? PatientID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public Boolean? DictationRouteRequiresOriginalDictationFile { get; set; }
	public String? OrderNumber { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public String? SourceFilePath { get; set; }
	public Int32? AppendTranscriptionID { get; set; }
	public Int32? PrependTranscriptionID { get; set; }
	public Boolean? IsArchived { get; set; }
}
public partial class GetDocumentServiceJobAssociatesRow
{
	public Int32 ClientID { get; set; }
	public Guid DocumentServiceJobID { get; set; }
	public Guid DocumentServiceJobAssociateID { get; set; }
	public Int32? AssociateID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String AssociateClientCode { get; set; }
	public String? AssociateSpecialty { get; set; }
	public String? AssociateGreeting { get; set; }
	public String? AssociateBusinessName { get; set; }
	public String? AssociatePrefix { get; set; }
	public String? AssociateNameFirst { get; set; }
	public String? AssociateNameMiddle { get; set; }
	public String? AssociateNameLast { get; set; }
	public String? AssociateSuffix { get; set; }
	public String? AssociateAddress1 { get; set; }
	public String? AssociateAddress2 { get; set; }
	public String? AssociateAddress3 { get; set; }
	public String? AssociateCity { get; set; }
	public String? AssociateState { get; set; }
	public String? AssociateZipCode { get; set; }
	public String? AssociateCompany { get; set; }
	public String? AssociatePhone { get; set; }
	public String? AssociateFax { get; set; }
	public String? AssociateEMail { get; set; }
	public Int32? ReferralLocationID { get; set; }
	public Int32? ReferralUserID { get; set; }
}
public partial class GetDocumentServiceJobRow
{
	public Int32 ClientID { get; set; }
	public Int32 UserID { get; set; }
	public Int32? DocumentID { get; set; }
	public Int32? LocationID { get; set; }
	public Guid? AppointmentID { get; set; }
	public String StatusID { get; set; }
	public Int32? TranscriptionID { get; set; }
	public DateTime DateCreated { get; set; }
	public DateTime? DateProcessed { get; set; }
	public String? ReceiptCode { get; set; }
	public String? Comment { get; set; }
	public Boolean? IsMarkedForClientReview { get; set; }
}
public partial class GetDocumentServiceJobTagsRow
{
	public Guid DocumentServiceJobID { get; set; }
	public Int32 TranscriptionTagID { get; set; }
	public Int32 CompanyID { get; set; }
	public String ModifiedUser { get; set; }
	public DateTime ModifiedDate { get; set; }
}
public partial class GetFeatureFlagRow
{
	public Boolean? IsEnabled { get; set; }
}
public partial class GetFormatTypeRow
{
	public String Name { get; set; }
	public String CLRAssemblyName { get; set; }
	public String CLRTypeName { get; set; }
	public Int32 EntityTypeID { get; set; }
	public String? DefaultFormatInfo { get; set; }
}
public partial class GetInScribeLoginIPAddressesRow
{
	public Int64 LogEventsSecurityID { get; set; }
	public String? IPAddress { get; set; }
}
public partial class GetInterpreterByPhoneNumberRow
{
	public Int32 InterpreterID { get; set; }
	public String InterpreterName { get; set; }
	public String? InterpreterDescription { get; set; }
}
public partial class GetInterpreterLanguagesByClientRow
{
	public Int32 LanguageID { get; set; }
	public String LanguageName { get; set; }
	public String LanguageNativeName { get; set; }
	public String ModifiedUser { get; set; }
	public DateTime ModifiedDate { get; set; }
}
public partial class GetInterpretersByLanguageRow
{
	public Int32 InterpreterID { get; set; }
	public String PhoneNumber { get; set; }
}
public partial class GetInTouchEmulationListenPromptsRow
{
	public Int32 EmulationListenPromptID { get; set; }
	public Int32 EmulationID { get; set; }
	public Int32 EmulationPromptTypeID { get; set; }
	public String? Name { get; set; }
	public String? TagName { get; set; }
	public Int32 SortOrder { get; set; }
	public String ModifiedUser { get; set; }
	public DateTime ModifiedDate { get; set; }
}
public partial class GetInTouchEmulationPromptsRow
{
	public Int32 EmulationPromptID { get; set; }
	public Int32 EmulationID { get; set; }
	public Int32 EmulationPromptTypeID { get; set; }
	public String? Name { get; set; }
	public String? TagName { get; set; }
	public Int32 SortOrder { get; set; }
	public String ModifiedUser { get; set; }
	public DateTime ModifiedDate { get; set; }
}
public partial class GetInTouchEmulationRow
{
	public Int32 EmulationID { get; set; }
	public String? EmulationDescription { get; set; }
	public String? KeyHearInfo { get; set; }
	public String? KeyRecord { get; set; }
	public String? KeyPlay { get; set; }
	public String? KeyStop { get; set; }
	public String? KeyRewind { get; set; }
	public String? KeyFastForward { get; set; }
	public String? KeyInsert { get; set; }
	public String? KeyToStart { get; set; }
	public String? KeyToEnd { get; set; }
	public String? KeyHelp { get; set; }
	public String? KeyCancel { get; set; }
	public String? KeyDone { get; set; }
	public String? KeyCommand { get; set; }
	public String? KeyA { get; set; }
	public String? KeyB { get; set; }
	public String? KeyC { get; set; }
	public String? KeyD { get; set; }
	public Boolean UseWorkType { get; set; }
	public Boolean UsePatientID { get; set; }
	public Boolean RequireWorkType { get; set; }
	public Int32? CompanyID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ExtraPrompt { get; set; }
	public String? ExtraPromptTag { get; set; }
	public Boolean UseLocation { get; set; }
	public String? KeyInsertMode { get; set; }
	public String? KeyOverwrite { get; set; }
	public String? KeyPending { get; set; }
	public Boolean? IsDictationReviewEnabled { get; set; }
	public Int32? PatientIDSort { get; set; }
	public Int32? WorkTypeSort { get; set; }
	public Int32? LocationSort { get; set; }
	public Int32? ExtraPromptSort { get; set; }
	public Int32? DefaultRecordingMethod { get; set; }
	public Int32? MenuDelaySeconds { get; set; }
	public Boolean? IsMenuBeepEnabled { get; set; }
	public String? KeyNextPatient { get; set; }
	public String? KeyContinuousRewind { get; set; }
	public String? KeyContinuousFastForward { get; set; }
	public Int32? RewindSeconds { get; set; }
	public Int32? FastForwardSeconds { get; set; }
	public Boolean IsMenuEnabled { get; set; }
	public Boolean IsStopPromptEnabled { get; set; }
	public Int32 MinimumToneLength { get; set; }
	public Boolean StopOnAllTones { get; set; }
	public Boolean PlayReceiptCode { get; set; }
	public Boolean PromptForListenLocation { get; set; }
	public Int32 RecordingSilenceSeconds { get; set; }
	public Boolean RecordingTrimSilence { get; set; }
	public Int32 RecordingGainControl { get; set; }
	public Int32 RecordingVolume { get; set; }
}
public partial class GetInTouchEmulationsRow
{
	public Int32 EmulationID { get; set; }
	public String? EmulationDescription { get; set; }
	public String? KeyHearInfo { get; set; }
	public String? KeyRecord { get; set; }
	public String? KeyPlay { get; set; }
	public String? KeyStop { get; set; }
	public String? KeyRewind { get; set; }
	public String? KeyFastForward { get; set; }
	public String? KeyInsert { get; set; }
	public String? KeyToStart { get; set; }
	public String? KeyToEnd { get; set; }
	public String? KeyHelp { get; set; }
	public String? KeyCancel { get; set; }
	public String? KeyDone { get; set; }
	public String? KeyCommand { get; set; }
	public String? KeyA { get; set; }
	public String? KeyB { get; set; }
	public String? KeyC { get; set; }
	public String? KeyD { get; set; }
	public Boolean UseWorkType { get; set; }
	public Boolean UsePatientID { get; set; }
	public Boolean RequireWorkType { get; set; }
	public Int32? CompanyID { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ExtraPrompt { get; set; }
	public String? ExtraPromptTag { get; set; }
	public Boolean UseLocation { get; set; }
	public String? KeyInsertMode { get; set; }
	public String? KeyOverwrite { get; set; }
	public String? KeyPending { get; set; }
	public Boolean? IsDictationReviewEnabled { get; set; }
	public Int32? PatientIDSort { get; set; }
	public Int32? WorkTypeSort { get; set; }
	public Int32? LocationSort { get; set; }
	public Int32? ExtraPromptSort { get; set; }
	public Int32? DefaultRecordingMethod { get; set; }
	public Int32? MenuDelaySeconds { get; set; }
	public Boolean? IsMenuBeepEnabled { get; set; }
	public String? KeyNextPatient { get; set; }
	public String? KeyContinuousRewind { get; set; }
	public String? KeyContinuousFastForward { get; set; }
	public Int32? RewindSeconds { get; set; }
	public Int32? FastForwardSeconds { get; set; }
	public Boolean IsMenuEnabled { get; set; }
	public Boolean IsStopPromptEnabled { get; set; }
	public Int32 MinimumToneLength { get; set; }
	public Boolean StopOnAllTones { get; set; }
	public Boolean PlayReceiptCode { get; set; }
	public Boolean PromptForListenLocation { get; set; }
	public Int32 RecordingSilenceSeconds { get; set; }
	public Boolean RecordingTrimSilence { get; set; }
	public Int32 RecordingGainControl { get; set; }
	public Int32 RecordingVolume { get; set; }
}
public partial class GetLinkedTranscriptionsRow
{
	public Int32? TranscriptionID { get; set; }
	public Int32? TranPriorID { get; set; }
	public Int32? TranNextID { get; set; }
}
public partial class GetMasterTIDRow
{
	public Int32? TranscriptionID { get; set; }
}
public partial class GetPasswordHashAlgorithmRow
{
	public Int32 PasswordHashAlgorithmID { get; set; }
	public String Name { get; set; }
	public String? Description { get; set; }
	public DateTime ModifiedDate { get; set; }
	public String ModifiedUser { get; set; }
	public Boolean CaseSensitive { get; set; }
	public String? PRF { get; set; }
	public Int32? SaltLength { get; set; }
	public Int32? HashLength { get; set; }
	public Int32? Iterations { get; set; }
}
public partial class GetPatientAppointmentRow
{
	public String PatientID { get; set; }
	public Int32 ClientID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public Int32 LocationID { get; set; }
	public String Physician { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? OrderNumber { get; set; }
	public String? DictationID { get; set; }
	public String? ApptUserField1 { get; set; }
	public String? ApptUserField2 { get; set; }
	public String? ApptUserField3 { get; set; }
	public String? ApptUserField4 { get; set; }
	public String? ApptUserField5 { get; set; }
	public Guid AppointmentId { get; set; }
	public String? AppointmentClientCode { get; set; }
	public String? ExtendedInfo { get; set; }
}
public partial class GetPatientRow
{
	public String PatientID { get; set; }
	public Int32 ClientID { get; set; }
	public Int32? LocationID { get; set; }
	public String? PatientNameFirst { get; set; }
	public String? PatientNameMiddle { get; set; }
	public String? PatientNameLast { get; set; }
	public String? PatientFullName { get; set; }
	public String? PatientGender { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? PatientAddress1 { get; set; }
	public String? PatientAddress2 { get; set; }
	public String? PatientCity { get; set; }
	public String? PatientState { get; set; }
	public String? PatientZipCode { get; set; }
	public String? PatientHomePhone { get; set; }
	public String? PatientWorkPhone { get; set; }
	public String? OrderNumber { get; set; }
	public Int32? PrimaryAssociateID { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public DateTime? AdmitDate { get; set; }
	public DateTime? DischargeDate { get; set; }
	public Int16 PrimaryAssociateTypeID { get; set; }
	public Guid? PatientGUID { get; set; }
}
public partial class GetProgramRow
{
	public Int32? ProgramID { get; set; }
	public String? ProgramName { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public Int32? LatestVersionID { get; set; }
	public String? LatestVersionNumber { get; set; }
	public String? LatestVersionModifiedUser { get; set; }
	public DateTime? LatestVersionModifiedDate { get; set; }
}
public partial class GetProgramsRow
{
	public Int32? ProgramID { get; set; }
	public String? ProgramName { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public Int32? VersionsCount { get; set; }
}
public partial class GetProgramVersionByNumberRow
{
	public Int32? ProgramID { get; set; }
	public String? ProgramName { get; set; }
	public Int32 VersionID { get; set; }
	public String VersionNumber { get; set; }
	public Boolean UpgradeRequired { get; set; }
	public Boolean UpgradeAvailable { get; set; }
	public String? UpgradeMessage { get; set; }
	public String? UpgradeURL { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public Boolean IsPrivate { get; set; }
}
public partial class GetProgramVersionRow
{
	public Int32? ProgramID { get; set; }
	public String? ProgramName { get; set; }
	public Int32 VersionID { get; set; }
	public String VersionNumber { get; set; }
	public Boolean UpgradeRequired { get; set; }
	public Boolean UpgradeAvailable { get; set; }
	public String? UpgradeMessage { get; set; }
	public String? UpgradeURL { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public Boolean IsPrivate { get; set; }
}
public partial class GetProgramVersionsRow
{
	public Int32 VersionID { get; set; }
	public String VersionNumber { get; set; }
	public Boolean UpgradeRequired { get; set; }
	public Boolean UpgradeAvailable { get; set; }
	public String? UpgradeMessage { get; set; }
	public String? UpgradeURL { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public Boolean IsPrivate { get; set; }
}
public partial class GetReferralTranscriptionAuthorizationByUserIDRow
{
	public Int32 CanView { get; set; }
}
public partial class GetServerTimeZoneIdentifierRow
{
	public String? Identifier { get; set; }
}
public partial class GetServerVariableRow
{
	public String? ServerValue { get; set; }
	public String? ModifiedUser { get; set; }
	public DateTime? ModifiedDate { get; set; }
}
public partial class GetTranscriptionAssociatesRow
{
	public Int32 AssociateID { get; set; }
	public String? AssociateNameFirst { get; set; }
	public String? AssociateNameLast { get; set; }
	public String? AssociateNameMiddle { get; set; }
	public String? AssociatePrefix { get; set; }
	public String? AssociateSuffix { get; set; }
}
public partial class GetTranscriptionAuthorizationByCompanyUserIDRow
{
	public Boolean? IsAuthorized { get; set; }
}
public partial class GetTranscriptionAuthorizationByUserIDRow
{
	public Int32 TranscriptionID { get; set; }
	public Boolean? CanEdit { get; set; }
	public Boolean? CanEditHeader { get; set; }
}
public partial class GetTranscriptionCommentAuthorizationByUserIDRow
{
	public Int32 A { get; set; }
}
public partial class GetTranscriptionDictationRow
{
	public Int32 DictationID { get; set; }
	public Int32 ClientID { get; set; }
	public Int32? UserID { get; set; }
	public Int32? DocumentID { get; set; }
	public Int32? LocationID { get; set; }
	public String? PatientID { get; set; }
	public Guid? AppointmentID { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public String? OrderNumber { get; set; }
	public String? AccountNumber { get; set; }
	public String? Comment { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public String? DictationSourceName { get; set; }
	public Boolean IsStat { get; set; }
}
public partial class GetTranscriptionIDByDictationIDRow
{
	public Int32 DictationID { get; set; }
	public Int32 TranscriptionID { get; set; }
	public DateTime? DateDictated { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public Int32? UserID { get; set; }
	public String? TranscriptionDictationPath { get; set; }
}
public partial class GetTranscriptionistClientPoolDefaultsRow
{
	public Int32? TranscriptionistCompanyID { get; set; }
	public Int32 TranscriptionistID { get; set; }
	public Int32 ClientID { get; set; }
	public Boolean? QAOptional { get; set; }
	public Boolean? StripFontChange { get; set; }
	public Boolean? HideFontOptions { get; set; }
	public Boolean? CanCorrect { get; set; }
	public Boolean? CanInvalidate { get; set; }
	public Int32 QARatingPoolOptionID { get; set; }
	public Int32? DefaultWorkflowOverride { get; set; }
	public Boolean? CanChooseQALevel { get; set; }
	public Boolean? CanDeliverToClient { get; set; }
	public Boolean MarkPriorAsQT { get; set; }
	public Boolean? CanViewPrior { get; set; }
	public Int32? LoadFirstPatientVisitArtifactOptionID { get; set; }
	public Int32? SearchForPatientRelatedArtifactsOnLoadOptionID { get; set; }
	public Int32? ShowSinglePatientArtifactOptionID { get; set; }
	public Int32? ShowSinglePatientArtifactFromAuthorListingOptionID { get; set; }
	public Int32? ShowSinglePatientRelatedArtifactOptionID { get; set; }
	public Boolean CanPrintFromInScribe { get; set; }
}
public partial class GetTranscriptionistClientsRow
{
	public Int32 ClientID { get; set; }
	public String ClientName { get; set; }
	public String? ClientFullName { get; set; }
	public Boolean ClientActive { get; set; }
	public String? ClientAddress1 { get; set; }
	public String? ClientAddress2 { get; set; }
	public String? ClientAddress3 { get; set; }
	public String? ClientCity { get; set; }
	public String? ClientState { get; set; }
	public String? ClientZipCode { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public String? ModifiedUser { get; set; }
	public Int32? QARatingProgramID { get; set; }
}
public partial class GetTranscriptionistWorkstationPolicyRow
{
	public Int32 FirewallEnforcementLevel { get; set; }
	public Int32 AntivirusEnforcementLevel { get; set; }
	public Int32 AntispywareEnforcementLevel { get; set; }
	public String? IPv4Mask { get; set; }
	public String? DomainName { get; set; }
	public String? MoboSerialNumber { get; set; }
	public String? BiosSerialNumber { get; set; }
}
public partial class GetTranscriptionRow
{
	public Int32 TranscriptionID { get; set; }
	public DateTime? DateDictated { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public Int32? DocumentID { get; set; }
	public String? DocumentType { get; set; }
	public String? DocumentDescription { get; set; }
	public String? TranscriptionFilepath { get; set; }
	public DateTime? DateSigned { get; set; }
	public DateTime? ModifiedDate { get; set; }
	public Int32? UserID { get; set; }
	public String? UserUsername { get; set; }
	public String? UserFullname { get; set; }
	public String? UserNameFirst { get; set; }
	public String? UserNameLast { get; set; }
	public String? UserNamePrefix { get; set; }
	public String? UserNameMiddle { get; set; }
	public String? UserNameSuffix { get; set; }
	public Int32? LocationID { get; set; }
	public String? MedicalRecordsLocationName { get; set; }
	public String? LocationName { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public String? PatientGender { get; set; }
	public Guid? PatientGUID { get; set; }
	public String? OrderNumber { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public String? ReceiptCode { get; set; }
	public DateTime? DateDictatedCST { get; set; }
	public String? Comment { get; set; }
	public String? ClientTimeZoneIdentifier { get; set; }
	public String? ServerTimeZoneIdentifier { get; set; }
	public String? ModifiedUser { get; set; }
	public Guid? AppointmentID { get; set; }
}
public partial class GetTranscriptionSignaturesRow
{
	public String? AuthorizerFullName { get; set; }
	public Int32? AuthorizerID { get; set; }
	public Int32? AuthenticatorID { get; set; }
	public DateTime? DateSigned { get; set; }
	public Int32? SignOrder { get; set; }
}
public partial class GetTranscriptionValidationRuleDataRow
{
	public Int32 TranscriptionID { get; set; }
	public Int32 ClientID { get; set; }
	public Int32? DocumentID { get; set; }
	public Int32? LocationID { get; set; }
	public Int32? UserID { get; set; }
	public Boolean TranscriptionStat { get; set; }
	public String? PatientID { get; set; }
	public String? PatientName { get; set; }
	public String? UserField1 { get; set; }
	public String? UserField2 { get; set; }
	public String? UserField3 { get; set; }
	public String? UserField4 { get; set; }
	public String? UserField5 { get; set; }
	public String? OrderNumber { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public DateTime? AdmitDate { get; set; }
	public DateTime? DischargeDate { get; set; }
	public DateTime? DateDictated { get; set; }
	public DateTime? PatientBirthdate { get; set; }
	public Guid? AppointmentID { get; set; }
	public String? PatientGender { get; set; }
	public String? PatientClass { get; set; }
	public String? PatientType { get; set; }
	public String? Floor { get; set; }
	public String? Bed { get; set; }
	public String? Facility { get; set; }
	public String? Location { get; set; }
	public String? AccountNumber { get; set; }
	public Int32? DictatingUserGroupID { get; set; }
	public String? AssociatesJson { get; set; }
	public String? SignaturesJson { get; set; }
	public String? OrdersJson { get; set; }
	public String? MtStatisticsJson { get; set; }
}
public partial class GetTranscriptionWorkflowFoldersRow
{
	public Byte Status { get; set; }
}
public partial class GetUserVRStatusByDocumentIDRow
{
	public Int32? ProfileCount { get; set; }
}
public partial class GetValidationRuleSnippetsByClientIdRow
{
	public Int32 ValidationRuleID { get; set; }
	public Int32 ValidationSnippetID { get; set; }
	public Int32? TranscriptionTagID { get; set; }
	public String Name { get; set; }
	public String SnippetData { get; set; }
}
public partial class GetValidationRulesRow
{
	public Int32 ValidationRuleID { get; set; }
	public Int32? ClientID { get; set; }
	public String Name { get; set; }
	public String? Description { get; set; }
	public Boolean IsActive { get; set; }
	public String DocumentTypeFilterType { get; set; }
	public String LocationFilterType { get; set; }
	public String UserFilterType { get; set; }
	public String StatFilterType { get; set; }
	public Boolean MarkForQA { get; set; }
	public Boolean MarkForReview { get; set; }
	public String UserGroupFilterType { get; set; }
	public String ModifiedUser { get; set; }
	public DateTime ModifiedDate { get; set; }
	public String UserIdArrayJson { get; set; }
	public String LocationIdArrayJson { get; set; }
	public String DocumentIdArrayJson { get; set; }
	public String UserGroupIdArrayJson { get; set; }
	public Int32 CompletionOption { get; set; }
	public Boolean UseReview1 { get; set; }
	public Boolean UseReview2 { get; set; }
	public Boolean UsePreliminary { get; set; }
	public Boolean UseFinal1 { get; set; }
	public Boolean UseFinal2 { get; set; }
}
public partial class GetVRStatusByDictationIDRow
{
	public Int32? ProfileCount { get; set; }
	public Int32? UserID { get; set; }
	public Int32? ClientID { get; set; }
	public Int32? DocumentTypeID { get; set; }
}
public partial class GetWorkItemDictationFileNameRow
{
	public String? DictationFileName { get; set; }
}
public partial class GetWorkItemIDByTIDRow
{
	public Guid WorkItemID { get; set; }
}
public partial class GetWorkItemTranscriptionRow
{
	public Guid ReceivedTranscriptionJobID { get; set; }
	public Byte[] TranscriptionContent { get; set; }
	public Int32? ContentTypeID { get; set; }
}
public partial class MapToDocumentTypeIDRow
{
	public Int32? DocumentTypeID { get; set; }
}
public partial class MapToLocationIDRow
{
	public Int32? LocationID { get; set; }
}
public partial class MapToUserIDRow
{
	public Int32? UserID { get; set; }
}
public partial class SearchClientTranscriptionDictationsRow
{
	public Int32 TranscriptionID { get; set; }
	public Int32? DictationID { get; set; }
	public Int32? ClientID { get; set; }
	public Int32? UserID { get; set; }
	public Int32? DocumentID { get; set; }
	public Int32? LocationID { get; set; }
	public Boolean? IsStat { get; set; }
	public String? SourceMachineName { get; set; }
	public Int32? Length { get; set; }
	public DateTimeOffset? DateDictated { get; set; }
	public String? PatientId { get; set; }
	public DateTime? AppointmentDate { get; set; }
	public String? ReceiptCode { get; set; }
}
public partial class UpdateClientUserPassword2_Row
{
	public Int32? UserID { get; set; }
}
public partial class UpdateClientUserPasswordRow
{
	public String? FailureDescription { get; set; }
	public Int32? LineCount { get; set; }
}
public partial class UpdateCompanyUserPassword2_Row
{
	public Int32? UserID { get; set; }
}
public partial class UpdateCompanyUserPasswordRow
{
	public String? FailureDescription { get; set; }
	public Int32? LineCount { get; set; }
}
public sealed partial class AssociatesTableRowDataTable : DataTable
{
	public AssociatesTableRowDataTable() : this(new List<AssociatesTableRow>()) { }
	public AssociatesTableRowDataTable(List<AssociatesTableRow> rows) : base()
	{
		ArgumentNullException.ThrowIfNull(rows);

		base.Columns.Add(new DataColumn() { ColumnName = "Client_ID", DataType = typeof(Int32), AllowDBNull = false, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Associate_ID", DataType = typeof(Int32), AllowDBNull = true, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Associate_Client_Code", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Name_Prefix", DataType = typeof(String), AllowDBNull = true, MaxLength = 10 });
		base.Columns.Add(new DataColumn() { ColumnName = "Name_First", DataType = typeof(String), AllowDBNull = true, MaxLength = 100 });
		base.Columns.Add(new DataColumn() { ColumnName = "Name_Middle", DataType = typeof(String), AllowDBNull = true, MaxLength = 100 });
		base.Columns.Add(new DataColumn() { ColumnName = "Name_Last", DataType = typeof(String), AllowDBNull = true, MaxLength = 100 });
		base.Columns.Add(new DataColumn() { ColumnName = "Name_Suffix", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Business_Name", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Specialty", DataType = typeof(String), AllowDBNull = true, MaxLength = 100 });
		base.Columns.Add(new DataColumn() { ColumnName = "Greeting", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Address_1", DataType = typeof(String), AllowDBNull = true, MaxLength = 300 });
		base.Columns.Add(new DataColumn() { ColumnName = "Address_2", DataType = typeof(String), AllowDBNull = true, MaxLength = 300 });
		base.Columns.Add(new DataColumn() { ColumnName = "Address_3", DataType = typeof(String), AllowDBNull = true, MaxLength = 300 });
		base.Columns.Add(new DataColumn() { ColumnName = "City", DataType = typeof(String), AllowDBNull = true, MaxLength = 300 });
		base.Columns.Add(new DataColumn() { ColumnName = "State", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Zip_Code", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Country", DataType = typeof(String), AllowDBNull = true, MaxLength = 20 });
		base.Columns.Add(new DataColumn() { ColumnName = "Phone", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Fax", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Email", DataType = typeof(String), AllowDBNull = true, MaxLength = 100 });
		base.Columns.Add(new DataColumn() { ColumnName = "Referral_User_ID", DataType = typeof(Int32), AllowDBNull = true, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Use_AutoFax", DataType = typeof(Boolean), AllowDBNull = true, MaxLength = 1 });
		base.Columns.Add(new DataColumn() { ColumnName = "Referral_Location_ID", DataType = typeof(Int32), AllowDBNull = true, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Export_Type", DataType = typeof(Int32), AllowDBNull = true, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Associate_Type_ID", DataType = typeof(Int16), AllowDBNull = true, MaxLength = 2 });
		base.Columns.Add(new DataColumn() { ColumnName = "Is_Primary", DataType = typeof(Boolean), AllowDBNull = true, MaxLength = 1 });
		base.Columns.Add(new DataColumn() { ColumnName = "Is_Informal", DataType = typeof(Boolean), AllowDBNull = true, MaxLength = 1 });
		base.Columns.Add(new DataColumn() { ColumnName = "IS_PCP", DataType = typeof(Boolean), AllowDBNull = true, MaxLength = 1 });
		base.Columns.Add(new DataColumn() { ColumnName = "AddToDB", DataType = typeof(Boolean), AllowDBNull = true, MaxLength = 1 });
		base.Columns.Add(new DataColumn() { ColumnName = "Associate_Company", DataType = typeof(String), AllowDBNull = true, MaxLength = 100 });
		foreach (var row in rows)
		{
			var clientID = row.ClientID;
			var associateID = row.AssociateID;
			var associateClientCode = String.IsNullOrEmpty(row.AssociateClientCode) || row.AssociateClientCode.Length <= 50 ? row.AssociateClientCode : row.AssociateClientCode.Remove(50);
			var namePrefix = String.IsNullOrEmpty(row.NamePrefix) || row.NamePrefix.Length <= 10 ? row.NamePrefix : row.NamePrefix.Remove(10);
			var nameFirst = String.IsNullOrEmpty(row.NameFirst) || row.NameFirst.Length <= 100 ? row.NameFirst : row.NameFirst.Remove(100);
			var nameMiddle = String.IsNullOrEmpty(row.NameMiddle) || row.NameMiddle.Length <= 100 ? row.NameMiddle : row.NameMiddle.Remove(100);
			var nameLast = String.IsNullOrEmpty(row.NameLast) || row.NameLast.Length <= 100 ? row.NameLast : row.NameLast.Remove(100);
			var nameSuffix = String.IsNullOrEmpty(row.NameSuffix) || row.NameSuffix.Length <= 50 ? row.NameSuffix : row.NameSuffix.Remove(50);
			var businessName = String.IsNullOrEmpty(row.BusinessName) || row.BusinessName.Length <= 50 ? row.BusinessName : row.BusinessName.Remove(50);
			var specialty = String.IsNullOrEmpty(row.Specialty) || row.Specialty.Length <= 100 ? row.Specialty : row.Specialty.Remove(100);
			var greeting = String.IsNullOrEmpty(row.Greeting) || row.Greeting.Length <= 50 ? row.Greeting : row.Greeting.Remove(50);
			var address1 = String.IsNullOrEmpty(row.Address1) || row.Address1.Length <= 300 ? row.Address1 : row.Address1.Remove(300);
			var address2 = String.IsNullOrEmpty(row.Address2) || row.Address2.Length <= 300 ? row.Address2 : row.Address2.Remove(300);
			var address3 = String.IsNullOrEmpty(row.Address3) || row.Address3.Length <= 300 ? row.Address3 : row.Address3.Remove(300);
			var city = String.IsNullOrEmpty(row.City) || row.City.Length <= 300 ? row.City : row.City.Remove(300);
			var state = String.IsNullOrEmpty(row.State) || row.State.Length <= 50 ? row.State : row.State.Remove(50);
			var zipCode = String.IsNullOrEmpty(row.ZipCode) || row.ZipCode.Length <= 50 ? row.ZipCode : row.ZipCode.Remove(50);
			var country = String.IsNullOrEmpty(row.Country) || row.Country.Length <= 20 ? row.Country : row.Country.Remove(20);
			var phone = String.IsNullOrEmpty(row.Phone) || row.Phone.Length <= 50 ? row.Phone : row.Phone.Remove(50);
			var fax = String.IsNullOrEmpty(row.Fax) || row.Fax.Length <= 50 ? row.Fax : row.Fax.Remove(50);
			var email = String.IsNullOrEmpty(row.Email) || row.Email.Length <= 100 ? row.Email : row.Email.Remove(100);
			var referralUserID = row.ReferralUserID;
			var useAutoFax = row.UseAutoFax;
			var referralLocationID = row.ReferralLocationID;
			var exportType = row.ExportType;
			var associateTypeID = row.AssociateTypeID;
			var isPrimary = row.IsPrimary;
			var isInformal = row.IsInformal;
			var iSPCP = row.ISPCP;
			var addToDB = row.AddToDB;
			var associateCompany = String.IsNullOrEmpty(row.AssociateCompany) || row.AssociateCompany.Length <= 100 ? row.AssociateCompany : row.AssociateCompany.Remove(100);
			base.Rows.Add(clientID, associateID, associateClientCode, namePrefix, nameFirst, nameMiddle, nameLast, nameSuffix, businessName, specialty, greeting, address1, address2, address3, city, state, zipCode, country, phone, fax, email, referralUserID, useAutoFax, referralLocationID, exportType, associateTypeID, isPrimary, isInformal, iSPCP, addToDB, associateCompany);
		}
	}
}
public sealed partial class AssociatesTable2RowDataTable : DataTable
{
	public AssociatesTable2RowDataTable() : this(new List<AssociatesTable2Row>()) { }
	public AssociatesTable2RowDataTable(List<AssociatesTable2Row> rows) : base()
	{
		ArgumentNullException.ThrowIfNull(rows);

		base.Columns.Add(new DataColumn() { ColumnName = "Client_ID", DataType = typeof(Int32), AllowDBNull = false, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Associate_ID", DataType = typeof(Int32), AllowDBNull = true, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Associate_Client_Code", DataType = typeof(String), AllowDBNull = true, MaxLength = 20 });
		base.Columns.Add(new DataColumn() { ColumnName = "Name_Prefix", DataType = typeof(String), AllowDBNull = true, MaxLength = 10 });
		base.Columns.Add(new DataColumn() { ColumnName = "Name_First", DataType = typeof(String), AllowDBNull = true, MaxLength = 20 });
		base.Columns.Add(new DataColumn() { ColumnName = "Name_Middle", DataType = typeof(String), AllowDBNull = true, MaxLength = 1 });
		base.Columns.Add(new DataColumn() { ColumnName = "Name_Last", DataType = typeof(String), AllowDBNull = true, MaxLength = 20 });
		base.Columns.Add(new DataColumn() { ColumnName = "Name_Suffix", DataType = typeof(String), AllowDBNull = true, MaxLength = 10 });
		base.Columns.Add(new DataColumn() { ColumnName = "Business_Name", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Specialty", DataType = typeof(String), AllowDBNull = true, MaxLength = 30 });
		base.Columns.Add(new DataColumn() { ColumnName = "Greeting", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Address_1", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Address_2", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Address_3", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "City", DataType = typeof(String), AllowDBNull = true, MaxLength = 20 });
		base.Columns.Add(new DataColumn() { ColumnName = "State", DataType = typeof(String), AllowDBNull = true, MaxLength = 3 });
		base.Columns.Add(new DataColumn() { ColumnName = "Zip_Code", DataType = typeof(String), AllowDBNull = true, MaxLength = 9 });
		base.Columns.Add(new DataColumn() { ColumnName = "Country", DataType = typeof(String), AllowDBNull = true, MaxLength = 20 });
		base.Columns.Add(new DataColumn() { ColumnName = "Phone", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Fax", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Email", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Referral_User_ID", DataType = typeof(Int32), AllowDBNull = true, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Use_AutoFax", DataType = typeof(Boolean), AllowDBNull = true, MaxLength = 1 });
		base.Columns.Add(new DataColumn() { ColumnName = "Referral_Location_ID", DataType = typeof(Int32), AllowDBNull = true, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Export_Type", DataType = typeof(Int32), AllowDBNull = true, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Associate_Type_ID", DataType = typeof(Int16), AllowDBNull = true, MaxLength = 2 });
		base.Columns.Add(new DataColumn() { ColumnName = "Is_Primary", DataType = typeof(Boolean), AllowDBNull = true, MaxLength = 1 });
		base.Columns.Add(new DataColumn() { ColumnName = "Is_Informal", DataType = typeof(Boolean), AllowDBNull = true, MaxLength = 1 });
		base.Columns.Add(new DataColumn() { ColumnName = "IS_PCP", DataType = typeof(Boolean), AllowDBNull = true, MaxLength = 1 });
		base.Columns.Add(new DataColumn() { ColumnName = "AddToDB", DataType = typeof(Boolean), AllowDBNull = true, MaxLength = 1 });
		base.Columns.Add(new DataColumn() { ColumnName = "Associate_Company", DataType = typeof(String), AllowDBNull = true, MaxLength = 100 });
		foreach (var row in rows)
		{
			var clientID = row.ClientID;
			var associateID = row.AssociateID;
			var associateClientCode = String.IsNullOrEmpty(row.AssociateClientCode) || row.AssociateClientCode.Length <= 20 ? row.AssociateClientCode : row.AssociateClientCode.Remove(20);
			var namePrefix = String.IsNullOrEmpty(row.NamePrefix) || row.NamePrefix.Length <= 10 ? row.NamePrefix : row.NamePrefix.Remove(10);
			var nameFirst = String.IsNullOrEmpty(row.NameFirst) || row.NameFirst.Length <= 20 ? row.NameFirst : row.NameFirst.Remove(20);
			var nameMiddle = row.NameMiddle;
			var nameLast = String.IsNullOrEmpty(row.NameLast) || row.NameLast.Length <= 20 ? row.NameLast : row.NameLast.Remove(20);
			var nameSuffix = String.IsNullOrEmpty(row.NameSuffix) || row.NameSuffix.Length <= 10 ? row.NameSuffix : row.NameSuffix.Remove(10);
			var businessName = String.IsNullOrEmpty(row.BusinessName) || row.BusinessName.Length <= 50 ? row.BusinessName : row.BusinessName.Remove(50);
			var specialty = String.IsNullOrEmpty(row.Specialty) || row.Specialty.Length <= 30 ? row.Specialty : row.Specialty.Remove(30);
			var greeting = String.IsNullOrEmpty(row.Greeting) || row.Greeting.Length <= 50 ? row.Greeting : row.Greeting.Remove(50);
			var address1 = String.IsNullOrEmpty(row.Address1) || row.Address1.Length <= 50 ? row.Address1 : row.Address1.Remove(50);
			var address2 = String.IsNullOrEmpty(row.Address2) || row.Address2.Length <= 50 ? row.Address2 : row.Address2.Remove(50);
			var address3 = String.IsNullOrEmpty(row.Address3) || row.Address3.Length <= 50 ? row.Address3 : row.Address3.Remove(50);
			var city = String.IsNullOrEmpty(row.City) || row.City.Length <= 20 ? row.City : row.City.Remove(20);
			var state = String.IsNullOrEmpty(row.State) || row.State.Length <= 3 ? row.State : row.State.Remove(3);
			var zipCode = String.IsNullOrEmpty(row.ZipCode) || row.ZipCode.Length <= 9 ? row.ZipCode : row.ZipCode.Remove(9);
			var country = String.IsNullOrEmpty(row.Country) || row.Country.Length <= 20 ? row.Country : row.Country.Remove(20);
			var phone = String.IsNullOrEmpty(row.Phone) || row.Phone.Length <= 50 ? row.Phone : row.Phone.Remove(50);
			var fax = String.IsNullOrEmpty(row.Fax) || row.Fax.Length <= 50 ? row.Fax : row.Fax.Remove(50);
			var email = String.IsNullOrEmpty(row.Email) || row.Email.Length <= 50 ? row.Email : row.Email.Remove(50);
			var referralUserID = row.ReferralUserID;
			var useAutoFax = row.UseAutoFax;
			var referralLocationID = row.ReferralLocationID;
			var exportType = row.ExportType;
			var associateTypeID = row.AssociateTypeID;
			var isPrimary = row.IsPrimary;
			var isInformal = row.IsInformal;
			var iSPCP = row.ISPCP;
			var addToDB = row.AddToDB;
			var associateCompany = String.IsNullOrEmpty(row.AssociateCompany) || row.AssociateCompany.Length <= 100 ? row.AssociateCompany : row.AssociateCompany.Remove(100);
			base.Rows.Add(clientID, associateID, associateClientCode, namePrefix, nameFirst, nameMiddle, nameLast, nameSuffix, businessName, specialty, greeting, address1, address2, address3, city, state, zipCode, country, phone, fax, email, referralUserID, useAutoFax, referralLocationID, exportType, associateTypeID, isPrimary, isInformal, iSPCP, addToDB, associateCompany);
		}
	}
}
public sealed partial class IntTableTypeRowDataTable : DataTable
{
	public IntTableTypeRowDataTable() : this(new List<IntTableTypeRow>()) { }
	public IntTableTypeRowDataTable(List<IntTableTypeRow> rows) : base()
	{
		ArgumentNullException.ThrowIfNull(rows);

		base.Columns.Add(new DataColumn() { ColumnName = "ID", DataType = typeof(Int32), AllowDBNull = false, MaxLength = 4 });
		foreach (var row in rows)
		{
			var iD = row.ID;
			base.Rows.Add(iD);
		}
	}
}
public sealed partial class NameValuePairsTableRowDataTable : DataTable
{
	public NameValuePairsTableRowDataTable() : this(new List<NameValuePairsTableRow>()) { }
	public NameValuePairsTableRowDataTable(List<NameValuePairsTableRow> rows) : base()
	{
		ArgumentNullException.ThrowIfNull(rows);

		base.Columns.Add(new DataColumn() { ColumnName = "Name", DataType = typeof(String), AllowDBNull = false, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Value", DataType = typeof(String), AllowDBNull = true, MaxLength = 1000 });
		foreach (var row in rows)
		{
			var name = String.IsNullOrEmpty(row.Name) || row.Name.Length <= 50 ? row.Name : row.Name.Remove(50);
			var value = String.IsNullOrEmpty(row.Value) || row.Value.Length <= 1000 ? row.Value : row.Value.Remove(1000);
			base.Rows.Add(name, value);
		}
	}
}
public sealed partial class OrdersTableRowDataTable : DataTable
{
	public OrdersTableRowDataTable() : this(new List<OrdersTableRow>()) { }
	public OrdersTableRowDataTable(List<OrdersTableRow> rows) : base()
	{
		ArgumentNullException.ThrowIfNull(rows);

		base.Columns.Add(new DataColumn() { ColumnName = "Order_ID", DataType = typeof(Guid), AllowDBNull = true, MaxLength = 16 });
		base.Columns.Add(new DataColumn() { ColumnName = "Patient_ID", DataType = typeof(String), AllowDBNull = false, MaxLength = 20 });
		base.Columns.Add(new DataColumn() { ColumnName = "Appointment_ID", DataType = typeof(Guid), AllowDBNull = true, MaxLength = 16 });
		base.Columns.Add(new DataColumn() { ColumnName = "Account_Number", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Order_Number", DataType = typeof(String), AllowDBNull = false, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Accession_Number", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Order_Status_Code", DataType = typeof(String), AllowDBNull = true, MaxLength = 2 });
		base.Columns.Add(new DataColumn() { ColumnName = "Date_Observed", DataType = typeof(DateTime), AllowDBNull = true, MaxLength = 7 });
		base.Columns.Add(new DataColumn() { ColumnName = "Date_Requested", DataType = typeof(DateTime), AllowDBNull = true, MaxLength = 7 });
		base.Columns.Add(new DataColumn() { ColumnName = "Item_Code", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Description", DataType = typeof(String), AllowDBNull = true, MaxLength = 500 });
		base.Columns.Add(new DataColumn() { ColumnName = "Notes", DataType = typeof(String), AllowDBNull = true, MaxLength = 1000 });
		base.Columns.Add(new DataColumn() { ColumnName = "User_Field_1", DataType = typeof(String), AllowDBNull = true, MaxLength = 100 });
		base.Columns.Add(new DataColumn() { ColumnName = "User_Field_2", DataType = typeof(String), AllowDBNull = true, MaxLength = 100 });
		base.Columns.Add(new DataColumn() { ColumnName = "User_Field_3", DataType = typeof(String), AllowDBNull = true, MaxLength = 100 });
		base.Columns.Add(new DataColumn() { ColumnName = "User_Field_4", DataType = typeof(String), AllowDBNull = true, MaxLength = 100 });
		base.Columns.Add(new DataColumn() { ColumnName = "User_Field_5", DataType = typeof(String), AllowDBNull = true, MaxLength = 100 });
		foreach (var row in rows)
		{
			var orderID = row.OrderID;
			var patientID = String.IsNullOrEmpty(row.PatientID) || row.PatientID.Length <= 20 ? row.PatientID : row.PatientID.Remove(20);
			var appointmentID = row.AppointmentID;
			var accountNumber = String.IsNullOrEmpty(row.AccountNumber) || row.AccountNumber.Length <= 50 ? row.AccountNumber : row.AccountNumber.Remove(50);
			var orderNumber = String.IsNullOrEmpty(row.OrderNumber) || row.OrderNumber.Length <= 50 ? row.OrderNumber : row.OrderNumber.Remove(50);
			var accessionNumber = String.IsNullOrEmpty(row.AccessionNumber) || row.AccessionNumber.Length <= 50 ? row.AccessionNumber : row.AccessionNumber.Remove(50);
			var orderStatusCode = String.IsNullOrEmpty(row.OrderStatusCode) || row.OrderStatusCode.Length <= 2 ? row.OrderStatusCode : row.OrderStatusCode.Remove(2);
			var dateObserved = row.DateObserved;
			var dateRequested = row.DateRequested;
			var itemCode = String.IsNullOrEmpty(row.ItemCode) || row.ItemCode.Length <= 50 ? row.ItemCode : row.ItemCode.Remove(50);
			var description = String.IsNullOrEmpty(row.Description) || row.Description.Length <= 500 ? row.Description : row.Description.Remove(500);
			var notes = String.IsNullOrEmpty(row.Notes) || row.Notes.Length <= 1000 ? row.Notes : row.Notes.Remove(1000);
			var userField1 = String.IsNullOrEmpty(row.UserField1) || row.UserField1.Length <= 100 ? row.UserField1 : row.UserField1.Remove(100);
			var userField2 = String.IsNullOrEmpty(row.UserField2) || row.UserField2.Length <= 100 ? row.UserField2 : row.UserField2.Remove(100);
			var userField3 = String.IsNullOrEmpty(row.UserField3) || row.UserField3.Length <= 100 ? row.UserField3 : row.UserField3.Remove(100);
			var userField4 = String.IsNullOrEmpty(row.UserField4) || row.UserField4.Length <= 100 ? row.UserField4 : row.UserField4.Remove(100);
			var userField5 = String.IsNullOrEmpty(row.UserField5) || row.UserField5.Length <= 100 ? row.UserField5 : row.UserField5.Remove(100);
			base.Rows.Add(orderID, patientID, appointmentID, accountNumber, orderNumber, accessionNumber, orderStatusCode, dateObserved, dateRequested, itemCode, description, notes, userField1, userField2, userField3, userField4, userField5);
		}
	}
}
public sealed partial class QAFeedbackRatingsTableRowDataTable : DataTable
{
	public QAFeedbackRatingsTableRowDataTable() : this(new List<QAFeedbackRatingsTableRow>()) { }
	public QAFeedbackRatingsTableRowDataTable(List<QAFeedbackRatingsTableRow> rows) : base()
	{
		ArgumentNullException.ThrowIfNull(rows);

		base.Columns.Add(new DataColumn() { ColumnName = "QARating_ID", DataType = typeof(Int32), AllowDBNull = false, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Comment", DataType = typeof(String), AllowDBNull = true, MaxLength = 500 });
		base.Columns.Add(new DataColumn() { ColumnName = "Error_Marker", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Seconds", DataType = typeof(Int32), AllowDBNull = false, MaxLength = 4 });
		foreach (var row in rows)
		{
			var qARatingID = row.QARatingID;
			var comment = String.IsNullOrEmpty(row.Comment) || row.Comment.Length <= 500 ? row.Comment : row.Comment.Remove(500);
			var errorMarker = String.IsNullOrEmpty(row.ErrorMarker) || row.ErrorMarker.Length <= 50 ? row.ErrorMarker : row.ErrorMarker.Remove(50);
			var seconds = row.Seconds;
			base.Rows.Add(qARatingID, comment, errorMarker, seconds);
		}
	}
}
public sealed partial class SignaturesTableRowDataTable : DataTable
{
	public SignaturesTableRowDataTable() : this(new List<SignaturesTableRow>()) { }
	public SignaturesTableRowDataTable(List<SignaturesTableRow> rows) : base()
	{
		ArgumentNullException.ThrowIfNull(rows);

		base.Columns.Add(new DataColumn() { ColumnName = "Signature_User_ID", DataType = typeof(Int32), AllowDBNull = true, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Signature_User_FullName", DataType = typeof(String), AllowDBNull = true, MaxLength = 100 });
		base.Columns.Add(new DataColumn() { ColumnName = "Sign_Order", DataType = typeof(Int32), AllowDBNull = true, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Date_Signed", DataType = typeof(DateTime), AllowDBNull = true, MaxLength = 8 });
		base.Columns.Add(new DataColumn() { ColumnName = "Signed_By_User_ID", DataType = typeof(Int32), AllowDBNull = true, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Is_AutoCompleted", DataType = typeof(Boolean), AllowDBNull = true, MaxLength = 1 });
		foreach (var row in rows)
		{
			var signatureUserID = row.SignatureUserID;
			var signatureUserFullName = String.IsNullOrEmpty(row.SignatureUserFullName) || row.SignatureUserFullName.Length <= 100 ? row.SignatureUserFullName : row.SignatureUserFullName.Remove(100);
			var signOrder = row.SignOrder;
			var dateSigned = row.DateSigned;
			var signedByUserID = row.SignedByUserID;
			var isAutoCompleted = row.IsAutoCompleted;
			base.Rows.Add(signatureUserID, signatureUserFullName, signOrder, dateSigned, signedByUserID, isAutoCompleted);
		}
	}
}
public sealed partial class TagsTableRowDataTable : DataTable
{
	public TagsTableRowDataTable() : this(new List<TagsTableRow>()) { }
	public TagsTableRowDataTable(List<TagsTableRow> rows) : base()
	{
		ArgumentNullException.ThrowIfNull(rows);

		base.Columns.Add(new DataColumn() { ColumnName = "Tag_ID", DataType = typeof(Int32), AllowDBNull = false, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Modified_User", DataType = typeof(String), AllowDBNull = false, MaxLength = 26 });
		base.Columns.Add(new DataColumn() { ColumnName = "Modified_Date", DataType = typeof(DateTime), AllowDBNull = false, MaxLength = 8 });
		foreach (var row in rows)
		{
			var tagID = row.TagID;
			var modifiedUser = String.IsNullOrEmpty(row.ModifiedUser) || row.ModifiedUser.Length <= 26 ? row.ModifiedUser : row.ModifiedUser.Remove(26);
			var modifiedDate = row.ModifiedDate;
			base.Rows.Add(tagID, modifiedUser, modifiedDate);
		}
	}
}
public sealed partial class UniqueidentifierTableTypeRowDataTable : DataTable
{
	public UniqueidentifierTableTypeRowDataTable() : this(new List<UniqueidentifierTableTypeRow>()) { }
	public UniqueidentifierTableTypeRowDataTable(List<UniqueidentifierTableTypeRow> rows) : base()
	{
		ArgumentNullException.ThrowIfNull(rows);

		base.Columns.Add(new DataColumn() { ColumnName = "ID", DataType = typeof(Guid), AllowDBNull = false, MaxLength = 16 });
		foreach (var row in rows)
		{
			var iD = row.ID;
			base.Rows.Add(iD);
		}
	}
}
public sealed partial class AssociatesTable3RowDataTable : DataTable
{
	public AssociatesTable3RowDataTable() : this(new List<AssociatesTable3Row>()) { }
	public AssociatesTable3RowDataTable(List<AssociatesTable3Row> rows) : base()
	{
		ArgumentNullException.ThrowIfNull(rows);

		base.Columns.Add(new DataColumn() { ColumnName = "Client_ID", DataType = typeof(Int32), AllowDBNull = false, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Associate_ID", DataType = typeof(Int32), AllowDBNull = true, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Associate_Client_Code", DataType = typeof(String), AllowDBNull = true, MaxLength = 20 });
		base.Columns.Add(new DataColumn() { ColumnName = "Name_Prefix", DataType = typeof(String), AllowDBNull = true, MaxLength = 10 });
		base.Columns.Add(new DataColumn() { ColumnName = "Name_First", DataType = typeof(String), AllowDBNull = true, MaxLength = 20 });
		base.Columns.Add(new DataColumn() { ColumnName = "Name_Middle", DataType = typeof(String), AllowDBNull = true, MaxLength = 1 });
		base.Columns.Add(new DataColumn() { ColumnName = "Name_Last", DataType = typeof(String), AllowDBNull = true, MaxLength = 20 });
		base.Columns.Add(new DataColumn() { ColumnName = "Name_Suffix", DataType = typeof(String), AllowDBNull = true, MaxLength = 10 });
		base.Columns.Add(new DataColumn() { ColumnName = "Business_Name", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Specialty", DataType = typeof(String), AllowDBNull = true, MaxLength = 30 });
		base.Columns.Add(new DataColumn() { ColumnName = "Greeting", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Address_1", DataType = typeof(String), AllowDBNull = true, MaxLength = 300 });
		base.Columns.Add(new DataColumn() { ColumnName = "Address_2", DataType = typeof(String), AllowDBNull = true, MaxLength = 300 });
		base.Columns.Add(new DataColumn() { ColumnName = "Address_3", DataType = typeof(String), AllowDBNull = true, MaxLength = 300 });
		base.Columns.Add(new DataColumn() { ColumnName = "City", DataType = typeof(String), AllowDBNull = true, MaxLength = 300 });
		base.Columns.Add(new DataColumn() { ColumnName = "State", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Zip_Code", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Country", DataType = typeof(String), AllowDBNull = true, MaxLength = 20 });
		base.Columns.Add(new DataColumn() { ColumnName = "Phone", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Fax", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Email", DataType = typeof(String), AllowDBNull = true, MaxLength = 50 });
		base.Columns.Add(new DataColumn() { ColumnName = "Referral_User_ID", DataType = typeof(Int32), AllowDBNull = true, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Use_AutoFax", DataType = typeof(Boolean), AllowDBNull = true, MaxLength = 1 });
		base.Columns.Add(new DataColumn() { ColumnName = "Referral_Location_ID", DataType = typeof(Int32), AllowDBNull = true, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Export_Type", DataType = typeof(Int32), AllowDBNull = true, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Associate_Type_ID", DataType = typeof(Int16), AllowDBNull = true, MaxLength = 2 });
		base.Columns.Add(new DataColumn() { ColumnName = "Is_Primary", DataType = typeof(Boolean), AllowDBNull = true, MaxLength = 1 });
		base.Columns.Add(new DataColumn() { ColumnName = "Is_Informal", DataType = typeof(Boolean), AllowDBNull = true, MaxLength = 1 });
		base.Columns.Add(new DataColumn() { ColumnName = "IS_PCP", DataType = typeof(Boolean), AllowDBNull = true, MaxLength = 1 });
		base.Columns.Add(new DataColumn() { ColumnName = "AddToDB", DataType = typeof(Boolean), AllowDBNull = true, MaxLength = 1 });
		base.Columns.Add(new DataColumn() { ColumnName = "Associate_Company", DataType = typeof(String), AllowDBNull = true, MaxLength = 100 });
		foreach (var row in rows)
		{
			var clientID = row.ClientID;
			var associateID = row.AssociateID;
			var associateClientCode = String.IsNullOrEmpty(row.AssociateClientCode) || row.AssociateClientCode.Length <= 20 ? row.AssociateClientCode : row.AssociateClientCode.Remove(20);
			var namePrefix = String.IsNullOrEmpty(row.NamePrefix) || row.NamePrefix.Length <= 10 ? row.NamePrefix : row.NamePrefix.Remove(10);
			var nameFirst = String.IsNullOrEmpty(row.NameFirst) || row.NameFirst.Length <= 20 ? row.NameFirst : row.NameFirst.Remove(20);
			var nameMiddle = row.NameMiddle;
			var nameLast = String.IsNullOrEmpty(row.NameLast) || row.NameLast.Length <= 20 ? row.NameLast : row.NameLast.Remove(20);
			var nameSuffix = String.IsNullOrEmpty(row.NameSuffix) || row.NameSuffix.Length <= 10 ? row.NameSuffix : row.NameSuffix.Remove(10);
			var businessName = String.IsNullOrEmpty(row.BusinessName) || row.BusinessName.Length <= 50 ? row.BusinessName : row.BusinessName.Remove(50);
			var specialty = String.IsNullOrEmpty(row.Specialty) || row.Specialty.Length <= 30 ? row.Specialty : row.Specialty.Remove(30);
			var greeting = String.IsNullOrEmpty(row.Greeting) || row.Greeting.Length <= 50 ? row.Greeting : row.Greeting.Remove(50);
			var address1 = String.IsNullOrEmpty(row.Address1) || row.Address1.Length <= 300 ? row.Address1 : row.Address1.Remove(300);
			var address2 = String.IsNullOrEmpty(row.Address2) || row.Address2.Length <= 300 ? row.Address2 : row.Address2.Remove(300);
			var address3 = String.IsNullOrEmpty(row.Address3) || row.Address3.Length <= 300 ? row.Address3 : row.Address3.Remove(300);
			var city = String.IsNullOrEmpty(row.City) || row.City.Length <= 300 ? row.City : row.City.Remove(300);
			var state = String.IsNullOrEmpty(row.State) || row.State.Length <= 50 ? row.State : row.State.Remove(50);
			var zipCode = String.IsNullOrEmpty(row.ZipCode) || row.ZipCode.Length <= 50 ? row.ZipCode : row.ZipCode.Remove(50);
			var country = String.IsNullOrEmpty(row.Country) || row.Country.Length <= 20 ? row.Country : row.Country.Remove(20);
			var phone = String.IsNullOrEmpty(row.Phone) || row.Phone.Length <= 50 ? row.Phone : row.Phone.Remove(50);
			var fax = String.IsNullOrEmpty(row.Fax) || row.Fax.Length <= 50 ? row.Fax : row.Fax.Remove(50);
			var email = String.IsNullOrEmpty(row.Email) || row.Email.Length <= 50 ? row.Email : row.Email.Remove(50);
			var referralUserID = row.ReferralUserID;
			var useAutoFax = row.UseAutoFax;
			var referralLocationID = row.ReferralLocationID;
			var exportType = row.ExportType;
			var associateTypeID = row.AssociateTypeID;
			var isPrimary = row.IsPrimary;
			var isInformal = row.IsInformal;
			var iSPCP = row.ISPCP;
			var addToDB = row.AddToDB;
			var associateCompany = String.IsNullOrEmpty(row.AssociateCompany) || row.AssociateCompany.Length <= 100 ? row.AssociateCompany : row.AssociateCompany.Remove(100);
			base.Rows.Add(clientID, associateID, associateClientCode, namePrefix, nameFirst, nameMiddle, nameLast, nameSuffix, businessName, specialty, greeting, address1, address2, address3, city, state, zipCode, country, phone, fax, email, referralUserID, useAutoFax, referralLocationID, exportType, associateTypeID, isPrimary, isInformal, iSPCP, addToDB, associateCompany);
		}
	}
}
public sealed partial class SignaturesTable2RowDataTable : DataTable
{
	public SignaturesTable2RowDataTable() : this(new List<SignaturesTable2Row>()) { }
	public SignaturesTable2RowDataTable(List<SignaturesTable2Row> rows) : base()
	{
		ArgumentNullException.ThrowIfNull(rows);

		base.Columns.Add(new DataColumn() { ColumnName = "Signature_User_ID", DataType = typeof(Int32), AllowDBNull = true, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Signature_User_FullName", DataType = typeof(String), AllowDBNull = true, MaxLength = 350 });
		base.Columns.Add(new DataColumn() { ColumnName = "Sign_Order", DataType = typeof(Int32), AllowDBNull = true, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Date_Signed", DataType = typeof(DateTime), AllowDBNull = true, MaxLength = 8 });
		base.Columns.Add(new DataColumn() { ColumnName = "Signed_By_User_ID", DataType = typeof(Int32), AllowDBNull = true, MaxLength = 4 });
		base.Columns.Add(new DataColumn() { ColumnName = "Is_AutoCompleted", DataType = typeof(Boolean), AllowDBNull = true, MaxLength = 1 });
		foreach (var row in rows)
		{
			var signatureUserID = row.SignatureUserID;
			var signatureUserFullName = String.IsNullOrEmpty(row.SignatureUserFullName) || row.SignatureUserFullName.Length <= 350 ? row.SignatureUserFullName : row.SignatureUserFullName.Remove(350);
			var signOrder = row.SignOrder;
			var dateSigned = row.DateSigned;
			var signedByUserID = row.SignedByUserID;
			var isAutoCompleted = row.IsAutoCompleted;
			base.Rows.Add(signatureUserID, signatureUserFullName, signOrder, dateSigned, signedByUserID, isAutoCompleted);
		}
	}
}

public partial class ShadowSyncProxy : IShadowSyncProxy
{
	private readonly Func<Task<SqlConnection>> connectionFunc;

	public ShadowSyncProxy(Func<Task<SqlConnection>> connectionFunc)
	{
		this.connectionFunc = connectionFunc;
	}

	public async Task<List<AddCaseRow>> AddCaseAsync(String callerName, String clientName, String companyCode, String phone, String fax, String eMail, String description, Int32 transcriptionID, String subject, String application) => await AddCaseAsync(await connectionFunc(), callerName, clientName, companyCode, phone, fax, eMail, description, transcriptionID, subject, application);
	public async Task<List<AddCaseAttachmentRow>> AddCaseAttachmentAsync(Guid caseID, String fileName) => await AddCaseAttachmentAsync(await connectionFunc(), caseID, fileName);
	public async Task<Int32> AddClientPatientProblemListCategoryAsync(Int32 clientId, Guid patientGuid, Int32 categoryId, String modifiedUser) => await AddClientPatientProblemListCategoryAsync(await connectionFunc(), clientId, patientGuid, categoryId, modifiedUser);
	public async Task<List<AddClientUserAuthorGroupEnrollmentRow>> AddClientUserAuthorGroupEnrollmentAsync(Int32 clientID, Int32 userID, Int32 authorGroupID, String modifiedUser, DateTime modifiedDate) => await AddClientUserAuthorGroupEnrollmentAsync(await connectionFunc(), clientID, userID, authorGroupID, modifiedUser, modifiedDate);
	public async Task<List<AddClientUserEmailResetTokenRow>> AddClientUserEmailResetTokenAsync(Int32 clientID, Int32 userID) => await AddClientUserEmailResetTokenAsync(await connectionFunc(), clientID, userID);
	public async Task<List<AddClientUserEmailTokenRow>> AddClientUserEmailTokenAsync(Int32 clientID, Int32 userID, String email) => await AddClientUserEmailTokenAsync(await connectionFunc(), clientID, userID, email);
	public async Task<Int32> AddClientUserInpatientWorklistVisitAsync(Int32 clientID, Int32 userID, Guid visitID, Int32 associateTypeID, String modifiedUser, DateTime modifiedDate) => await AddClientUserInpatientWorklistVisitAsync(await connectionFunc(), clientID, userID, visitID, associateTypeID, modifiedUser, modifiedDate);
	public async Task<List<AddClientUserLinkedAccountRow>> AddClientUserLinkedAccountAsync(Int32 sourceClientID, Int32 sourceUserID, Int32 targetClientID, Int32 targetUserID, String modifiedUser, DateTime modifiedDate) => await AddClientUserLinkedAccountAsync(await connectionFunc(), sourceClientID, sourceUserID, targetClientID, targetUserID, modifiedUser, modifiedDate);
	public async Task<List<AddClientUserTranscriptionLogRow>> AddClientUserTranscriptionLogAsync(Int32 transcriptionID, Int32 clientID, Int32 userID, Int32 actionID) => await AddClientUserTranscriptionLogAsync(await connectionFunc(), transcriptionID, clientID, userID, actionID);
	public async Task<List<AddClientUserWorklistEncounterRow>> AddClientUserWorklistEncounterAsync(Int32 clientID, Int32 userID, Guid encounterID, Int32 associateTypeID, String modifiedUser, DateTime modifiedDate) => await AddClientUserWorklistEncounterAsync(await connectionFunc(), clientID, userID, encounterID, associateTypeID, modifiedUser, modifiedDate);
	public async Task<List<AddCompanyUserEmailTokenRow>> AddCompanyUserEmailTokenAsync(Int32 companyID, Int32 transcriptionistID, String email) => await AddCompanyUserEmailTokenAsync(await connectionFunc(), companyID, transcriptionistID, email);
	public async Task<List<AddCompanyUserTranscriptionLogRow>> AddCompanyUserTranscriptionLogAsync(Int32 transcriptionID, Int32 clientID, Int32 userID, Int32 actionID) => await AddCompanyUserTranscriptionLogAsync(await connectionFunc(), transcriptionID, clientID, userID, actionID);
	public async Task<List<AddDeviceRow>> AddDeviceAsync(Int32 deviceAPITypeID, String identifier, Boolean showDictationLog, Boolean printDictationLog, String modifiedUser, String extendedConfigurationInfo) => await AddDeviceAsync(await connectionFunc(), deviceAPITypeID, identifier, showDictationLog, printDictationLog, modifiedUser, extendedConfigurationInfo);
	public async Task<List<AddDeviceFolderRow>> AddDeviceFolderAsync(Int32 parentDeviceFolderID, Int32 deviceID, String folder, String modifiedUser, String displayName) => await AddDeviceFolderAsync(await connectionFunc(), parentDeviceFolderID, deviceID, folder, modifiedUser, displayName);
	public async Task<List<AddDeviceFolderOptionRow>> AddDeviceFolderOptionAsync(Int32 deviceID, Int32 deviceFolderID, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Boolean isStat, String modifiedUser) => await AddDeviceFolderOptionAsync(await connectionFunc(), deviceID, deviceFolderID, clientID, userID, documentID, locationID, isStat, modifiedUser);
	public async Task<List<AddDictationRow>> AddDictationAsync(Int32 dictationRouteID, Int32 dictationSourceID, String sourceMachineName, Boolean isStat, Int32 length, DateTimeOffset dateDictated, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Guid appointmentID, String patientID, DateTime appointmentDate, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String sourceFilePath, String inTouchFileRateID, String accountNumber, String comment, List<UniqueidentifierTableTypeRow> orders) => await AddDictationAsync(await connectionFunc(), dictationRouteID, dictationSourceID, sourceMachineName, isStat, length, dateDictated, clientID, userID, documentID, locationID, appointmentID, patientID, appointmentDate, orderNumber, userField1, userField2, userField3, userField4, userField5, sourceFilePath, inTouchFileRateID, accountNumber, comment, orders);
	public async Task<List<AddDictationFileRow>> AddDictationFileAsync(Int32 dictationID, Int32 dictationFileTypeID, String path, Int32 samplesPerSecond) => await AddDictationFileAsync(await connectionFunc(), dictationID, dictationFileTypeID, path, samplesPerSecond);
	public async Task<List<AddDocumentServiceJobRow>> AddDocumentServiceJobAsync(Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Guid appointmentID, String receiptCode, Boolean isMarkedForClientReview, String comment, List<TagsTableRow> tagsTable) => await AddDocumentServiceJobAsync(await connectionFunc(), clientID, userID, documentID, locationID, appointmentID, receiptCode, isMarkedForClientReview, comment, tagsTable);
	public async Task<List<AddDocumentServiceJobAssociateRow>> AddDocumentServiceJobAssociateAsync(Int32 clientID, Guid documentServiceJobID, String modifiedUser, DateTime modifiedDate, Int32 associateID, String associateClientCode, String associateSpecialty, String associateGreeting, String associateBusinessName, String associatePrefix, String associateNameFirst, String associateNameMiddle, String associateNameLast, String associateSuffix, String associateAddress1, String associateAddress2, String associateAddress3, String associateCity, String associateState, String associateZipCode, String associateCompany, String associatePhone, String associateFax, String associateEMail, Int32 referralLocationID, Int32 referralUserID) => await AddDocumentServiceJobAssociateAsync(await connectionFunc(), clientID, documentServiceJobID, modifiedUser, modifiedDate, associateID, associateClientCode, associateSpecialty, associateGreeting, associateBusinessName, associatePrefix, associateNameFirst, associateNameMiddle, associateNameLast, associateSuffix, associateAddress1, associateAddress2, associateAddress3, associateCity, associateState, associateZipCode, associateCompany, associatePhone, associateFax, associateEMail, referralLocationID, referralUserID);
	public async Task<List<AddDocumentServiceJobAssociate2_Row>> AddDocumentServiceJobAssociate2Async(Int32 clientID, Guid documentServiceJobID, String modifiedUser, DateTime modifiedDate, Int32 associateID, String associateClientCode, String associateSpecialty, String associateGreeting, String associateBusinessName, String associatePrefix, String associateNameFirst, String associateNameMiddle, String associateNameLast, String associateSuffix, String associateAddress1, String associateAddress2, String associateAddress3, String associateCity, String associateState, String associateZipCode, String associateCompany, String associatePhone, String associateFax, String associateEMail, Int32 referralLocationID, Int32 referralUserID) => await AddDocumentServiceJobAssociate2Async(await connectionFunc(), clientID, documentServiceJobID, modifiedUser, modifiedDate, associateID, associateClientCode, associateSpecialty, associateGreeting, associateBusinessName, associatePrefix, associateNameFirst, associateNameMiddle, associateNameLast, associateSuffix, associateAddress1, associateAddress2, associateAddress3, associateCity, associateState, associateZipCode, associateCompany, associatePhone, associateFax, associateEMail, referralLocationID, referralUserID);
	public async Task<List<AddGlobalUserRow>> AddGlobalUserAsync(String username) => await AddGlobalUserAsync(await connectionFunc(), username);
	public async Task<Int32> AddInterpreterSessionAsync(String externalSessionID, Int32 clientID, Int32 userID, Int32 languageID, Int32 sessionStatus, DateTime sessionStart, String patientID, String patientFullName) => await AddInterpreterSessionAsync(await connectionFunc(), externalSessionID, clientID, userID, languageID, sessionStatus, sessionStart, patientID, patientFullName);
	public async Task<Int32> AddNotificationAsync(Int32 transcriptionistID, Int32 userID, Int32 actionID, DateTime dateLogged, String comment, String workstation) => await AddNotificationAsync(await connectionFunc(), transcriptionistID, userID, actionID, dateLogged, comment, workstation);
	public async Task<List<AddTranscriptionRow>> AddTranscriptionAsync(Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Int32 dictationRouteID, String transcriptionDictationPath, Boolean isStat, Int32 dictationLengthInSeconds, DateTimeOffset dateDictated, DateTime dateDictationReceived, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, DateTime appointmentDate, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comment, String modifiedUser, Int32 dictationID, Int32 appendToTranscriptionID, Int32 prependToTranscriptionID, Guid appointmentID, String appointmentClientCode, String physician, String appointmentExtendedInfo) => await AddTranscriptionAsync(await connectionFunc(), clientID, userID, documentID, locationID, dictationRouteID, transcriptionDictationPath, isStat, dictationLengthInSeconds, dateDictated, dateDictationReceived, patientID, patientName, patientBirthdate, patientGender, patientAddress1, patientAddress2, patientCity, patientState, patientZipCode, patientHomePhone, patientWorkPhone, appointmentDate, orderNumber, userField1, userField2, userField3, userField4, userField5, comment, modifiedUser, dictationID, appendToTranscriptionID, prependToTranscriptionID, appointmentID, appointmentClientCode, physician, appointmentExtendedInfo);
	public async Task<Int32> AddTranscriptionDictationAsync(Int32 transcriptionID, Int32 dictationID) => await AddTranscriptionDictationAsync(await connectionFunc(), transcriptionID, dictationID);
	public async Task<Int32> AddTranscriptionLogAsync(Int32 transcriptionID, Int32 clientID, Int32 userID, Int32 actionID) => await AddTranscriptionLogAsync(await connectionFunc(), transcriptionID, clientID, userID, actionID);
	public async Task<Int32> AddTranscriptionLogForMTAsync(Int32 transcriptionID, Int32 clientID, Int32 transcriptionistID, Int32 actionID) => await AddTranscriptionLogForMTAsync(await connectionFunc(), transcriptionID, clientID, transcriptionistID, actionID);
	public async Task<List<AddTranscriptionPackageRow>> AddTranscriptionPackageAsync(Int32 clientID, Int32 transcriptionistID, String machineName, String inScribeVersion, Int32 dictatingUserID, Int32 documentID, Int32 locationID, DateTimeOffset dateDictated, DateTime appointmentDate, Int32 patientLetterId, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 qAProgramId, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, Boolean transcriptionModified, Int32 workflowOverride, Boolean isMarkedForClientReview, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean wasSplit, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, List<SignaturesTable2Row> signaturesTable, List<TagsTableRow> tagsTable, List<NameValuePairsTableRow> optionalVariablesTable, List<AssociatesTableRow> associatesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Byte[] transcriptionContent, Int32 transcriptionContentTypeID, Byte[] hTMLContent, Int32 transcriptionID, Int32 originalTranscriptionID, Guid appointmentID, List<OrdersTableRow> ordersTable, DateTime admitDate, DateTime dischargeDate, String accountNumber, String bed, String floor, Boolean audioPlayed, Boolean audioPlayedFully, String patientCompany, String patientAddress3, Int32 priority) => await AddTranscriptionPackageAsync(await connectionFunc(), clientID, transcriptionistID, machineName, inScribeVersion, dictatingUserID, documentID, locationID, dateDictated, appointmentDate, patientLetterId, patientID, patientName, patientBirthdate, patientGender, patientNameFirst, patientNameMiddle, patientNameLast, patientAddress1, patientAddress2, patientCity, patientState, patientZipCode, patientHomePhone, patientWorkPhone, patientOrderNumber, patientUserField1, patientUserField2, patientUserField3, patientUserField4, patientUserField5, patientAddToDB, orderNumber, userField1, userField2, userField3, userField4, userField5, comments, appendTranscriptionID, correctionTranscriptionID, qAProgramId, qARatingsAreFeedbackOnly, qARatingsWereApplied, transcriptionModified, workflowOverride, isMarkedForClientReview, isMarkedForQA, isQAOptional, qAPercent, wasSplit, totalIdleSeconds, totalJobSeconds, initialIdleSeconds, originalQTCharacters, originalNonVisibleQTCharacters, originalAutoTextCharacters, indexMarkSeconds, signaturesTable, tagsTable, optionalVariablesTable, associatesTable, qAFeedbackRatingsTable, transcriptionContent, transcriptionContentTypeID, hTMLContent, transcriptionID, originalTranscriptionID, appointmentID, ordersTable, admitDate, dischargeDate, accountNumber, bed, floor, audioPlayed, audioPlayedFully, patientCompany, patientAddress3, priority);
	public async Task<List<AddTranscriptionPackage2_Row>> AddTranscriptionPackage2Async(Int32 clientID, Int32 transcriptionistID, String machineName, String inScribeVersion, Int32 dictatingUserID, Int32 documentID, Int32 locationID, DateTimeOffset dateDictated, DateTime appointmentDate, Int32 patientLetterId, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 qAProgramId, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, Boolean transcriptionModified, Int32 workflowOverride, Boolean isMarkedForClientReview, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean wasSplit, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, List<SignaturesTableRow> signaturesTable, List<TagsTableRow> tagsTable, List<NameValuePairsTableRow> optionalVariablesTable, List<AssociatesTable2Row> associatesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Byte[] transcriptionContent, Int32 transcriptionContentTypeID, Byte[] hTMLContent, Int32 transcriptionID, Int32 originalTranscriptionID, Guid appointmentID, List<OrdersTableRow> ordersTable, DateTime admitDate, DateTime dischargeDate, String accountNumber, String bed, String floor, Boolean audioPlayed, Boolean audioPlayedFully, String patientCompany, String patientAddress3, Int32 priority) => await AddTranscriptionPackage2Async(await connectionFunc(), clientID, transcriptionistID, machineName, inScribeVersion, dictatingUserID, documentID, locationID, dateDictated, appointmentDate, patientLetterId, patientID, patientName, patientBirthdate, patientGender, patientNameFirst, patientNameMiddle, patientNameLast, patientAddress1, patientAddress2, patientCity, patientState, patientZipCode, patientHomePhone, patientWorkPhone, patientOrderNumber, patientUserField1, patientUserField2, patientUserField3, patientUserField4, patientUserField5, patientAddToDB, orderNumber, userField1, userField2, userField3, userField4, userField5, comments, appendTranscriptionID, correctionTranscriptionID, qAProgramId, qARatingsAreFeedbackOnly, qARatingsWereApplied, transcriptionModified, workflowOverride, isMarkedForClientReview, isMarkedForQA, isQAOptional, qAPercent, wasSplit, totalIdleSeconds, totalJobSeconds, initialIdleSeconds, originalQTCharacters, originalNonVisibleQTCharacters, originalAutoTextCharacters, indexMarkSeconds, signaturesTable, tagsTable, optionalVariablesTable, associatesTable, qAFeedbackRatingsTable, transcriptionContent, transcriptionContentTypeID, hTMLContent, transcriptionID, originalTranscriptionID, appointmentID, ordersTable, admitDate, dischargeDate, accountNumber, bed, floor, audioPlayed, audioPlayedFully, patientCompany, patientAddress3, priority);
	public async Task<List<AddTranscriptionPackage3_Row>> AddTranscriptionPackage3Async(Int32 clientID, Int32 transcriptionistID, String machineName, String inScribeVersion, Int32 dictatingUserID, Int32 documentID, Int32 locationID, DateTimeOffset dateDictated, DateTime appointmentDate, Int32 patientLetterId, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 qAProgramId, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, Boolean transcriptionModified, Int32 workflowOverride, Boolean isMarkedForClientReview, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean wasSplit, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, List<SignaturesTableRow> signaturesTable, List<TagsTableRow> tagsTable, List<NameValuePairsTableRow> optionalVariablesTable, List<AssociatesTable3Row> associatesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Byte[] transcriptionContent, Int32 transcriptionContentTypeID, Byte[] hTMLContent, Int32 transcriptionID, Int32 originalTranscriptionID, Guid appointmentID, List<OrdersTableRow> ordersTable, DateTime admitDate, DateTime dischargeDate, String accountNumber, String bed, String floor, Boolean audioPlayed, Boolean audioPlayedFully, String patientCompany, String patientAddress3, Int32 priority) => await AddTranscriptionPackage3Async(await connectionFunc(), clientID, transcriptionistID, machineName, inScribeVersion, dictatingUserID, documentID, locationID, dateDictated, appointmentDate, patientLetterId, patientID, patientName, patientBirthdate, patientGender, patientNameFirst, patientNameMiddle, patientNameLast, patientAddress1, patientAddress2, patientCity, patientState, patientZipCode, patientHomePhone, patientWorkPhone, patientOrderNumber, patientUserField1, patientUserField2, patientUserField3, patientUserField4, patientUserField5, patientAddToDB, orderNumber, userField1, userField2, userField3, userField4, userField5, comments, appendTranscriptionID, correctionTranscriptionID, qAProgramId, qARatingsAreFeedbackOnly, qARatingsWereApplied, transcriptionModified, workflowOverride, isMarkedForClientReview, isMarkedForQA, isQAOptional, qAPercent, wasSplit, totalIdleSeconds, totalJobSeconds, initialIdleSeconds, originalQTCharacters, originalNonVisibleQTCharacters, originalAutoTextCharacters, indexMarkSeconds, signaturesTable, tagsTable, optionalVariablesTable, associatesTable, qAFeedbackRatingsTable, transcriptionContent, transcriptionContentTypeID, hTMLContent, transcriptionID, originalTranscriptionID, appointmentID, ordersTable, admitDate, dischargeDate, accountNumber, bed, floor, audioPlayed, audioPlayedFully, patientCompany, patientAddress3, priority);
	public async Task<List<AddTranscriptionPreviewRow>> AddTranscriptionPreviewAsync(Int32 transcriptionistID, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, String transcriptionID, DateTime appointmentDate, DateTime dateTranscribed, DateTime dateDictated, Boolean incomingStat, Int32 incomingPriority, String patientID, String patientName, String patientGender, DateTime patientBirthdate, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, Int32 originalTID, String patientCompany, String patientAddress3) => await AddTranscriptionPreviewAsync(await connectionFunc(), transcriptionistID, clientID, userID, documentID, locationID, transcriptionID, appointmentDate, dateTranscribed, dateDictated, incomingStat, incomingPriority, patientID, patientName, patientGender, patientBirthdate, patientAddress1, patientAddress2, patientCity, patientState, patientZipCode, patientHomePhone, patientWorkPhone, orderNumber, userField1, userField2, userField3, userField4, userField5, originalTID, patientCompany, patientAddress3);
	public async Task<List<AddTranscriptionPreview2_Row>> AddTranscriptionPreview2Async(Int32 transcriptionistID, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, String transcriptionID, DateTime appointmentDate, DateTime dateTranscribed, DateTime dateDictated, Boolean incomingStat, Int32 incomingPriority, String patientID, String patientName, String patientGender, DateTime patientBirthdate, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, Int32 originalTID, String patientCompany, String patientAddress3) => await AddTranscriptionPreview2Async(await connectionFunc(), transcriptionistID, clientID, userID, documentID, locationID, transcriptionID, appointmentDate, dateTranscribed, dateDictated, incomingStat, incomingPriority, patientID, patientName, patientGender, patientBirthdate, patientAddress1, patientAddress2, patientCity, patientState, patientZipCode, patientHomePhone, patientWorkPhone, orderNumber, userField1, userField2, userField3, userField4, userField5, originalTID, patientCompany, patientAddress3);
	public async Task<List<AddTranscriptionPreviewAppointmentRow>> AddTranscriptionPreviewAppointmentAsync(Int32 previewID, Int32 clientID, Guid appointmentID, String appointmentClientCode, String physician, Int32 patientsAppointmentsTypeID, DateTime admitDate, DateTime dischargeDate, String accountNumber, String location, String room, String bed, String floor, String facility, String patientsAppointmentsStatusID, String patientClass, String patientType, Int32 transcriptionistID) => await AddTranscriptionPreviewAppointmentAsync(await connectionFunc(), previewID, clientID, appointmentID, appointmentClientCode, physician, patientsAppointmentsTypeID, admitDate, dischargeDate, accountNumber, location, room, bed, floor, facility, patientsAppointmentsStatusID, patientClass, patientType, transcriptionistID);
	public async Task<Int32> AddTranscriptionPreviewAppointmentProviderAsync(Int32 transcriptionPreviewAppointmentID, Int32 clientID, Int32 previewID, Guid patientsAppointmentsProviderID, Guid appointmentID, String providerClientCode, Int32 providerRoleID, String namePrefix, String nameFirst, String nameMiddle, String nameLast, String nameSuffix, Int32 transcriptionistID) => await AddTranscriptionPreviewAppointmentProviderAsync(await connectionFunc(), transcriptionPreviewAppointmentID, clientID, previewID, patientsAppointmentsProviderID, appointmentID, providerClientCode, providerRoleID, namePrefix, nameFirst, nameMiddle, nameLast, nameSuffix, transcriptionistID);
	public async Task<Int32> AddTranscriptionPreviewAssociateAsync(Int32 transcriptionID, Int32 clientID, Int32 associateID, String associateClientCode, String associatePrefix, String associateNameFirst, String associateNameMiddle, String associateNameLast, String associateSuffix, String associateBusinessName, String associateSpecialty, String associateGreeting, String associateAddress1, String associateAddress2, String associateAddress3, String associateCity, String associateState, String associateZipCode, String associateCountry, String associatePhone, String associateFax, String associateEMail, Int32 referralUserID, Boolean primaryAssociate, Boolean informalAssociate, Int32 referralLocationID, Int16 associateTypeID, Boolean addToDB, Boolean autoFax, String associateCompany) => await AddTranscriptionPreviewAssociateAsync(await connectionFunc(), transcriptionID, clientID, associateID, associateClientCode, associatePrefix, associateNameFirst, associateNameMiddle, associateNameLast, associateSuffix, associateBusinessName, associateSpecialty, associateGreeting, associateAddress1, associateAddress2, associateAddress3, associateCity, associateState, associateZipCode, associateCountry, associatePhone, associateFax, associateEMail, referralUserID, primaryAssociate, informalAssociate, referralLocationID, associateTypeID, addToDB, autoFax, associateCompany);
	public async Task<Int32> AddTranscriptionPreviewAssociate2Async(Int32 transcriptionID, Int32 clientID, Int32 associateID, String associateClientCode, String associatePrefix, String associateNameFirst, String associateNameMiddle, String associateNameLast, String associateSuffix, String associateBusinessName, String associateSpecialty, String associateGreeting, String associateAddress1, String associateAddress2, String associateAddress3, String associateCity, String associateState, String associateZipCode, String associatePhone, String associateFax, String associateEMail, Int32 referralUserID, Boolean primaryAssociate, Boolean informalAssociate, Int32 referralLocationID, Int16 associateTypeID, Boolean addToDB, Boolean autoFax, String associateCompany) => await AddTranscriptionPreviewAssociate2Async(await connectionFunc(), transcriptionID, clientID, associateID, associateClientCode, associatePrefix, associateNameFirst, associateNameMiddle, associateNameLast, associateSuffix, associateBusinessName, associateSpecialty, associateGreeting, associateAddress1, associateAddress2, associateAddress3, associateCity, associateState, associateZipCode, associatePhone, associateFax, associateEMail, referralUserID, primaryAssociate, informalAssociate, referralLocationID, associateTypeID, addToDB, autoFax, associateCompany);
	public async Task<Int32> AddTranscriptionPreviewAssociate3Async(Int32 transcriptionID, Int32 clientID, Int32 associateID, String associateClientCode, String associatePrefix, String associateNameFirst, String associateNameMiddle, String associateNameLast, String associateSuffix, String associateBusinessName, String associateSpecialty, String associateGreeting, String associateAddress1, String associateAddress2, String associateAddress3, String associateCity, String associateState, String associateZipCode, String associatePhone, String associateFax, String associateEMail, Int32 referralUserID, Boolean primaryAssociate, Boolean informalAssociate, Int32 referralLocationID, Int16 associateTypeID, Boolean addToDB, Boolean autoFax, String associateCompany) => await AddTranscriptionPreviewAssociate3Async(await connectionFunc(), transcriptionID, clientID, associateID, associateClientCode, associatePrefix, associateNameFirst, associateNameMiddle, associateNameLast, associateSuffix, associateBusinessName, associateSpecialty, associateGreeting, associateAddress1, associateAddress2, associateAddress3, associateCity, associateState, associateZipCode, associatePhone, associateFax, associateEMail, referralUserID, primaryAssociate, informalAssociate, referralLocationID, associateTypeID, addToDB, autoFax, associateCompany);
	public async Task<List<AddTranscriptionPreviewOrderRow>> AddTranscriptionPreviewOrderAsync(Int32 previewID, Int32 clientID, Guid orderID, String patientID, Guid appointmentID, String accountNumber, String orderNumber, String accessionNumber, String orderStatusCode, DateTime dateObserved, DateTime dateRequested, String itemCode, String description, String notes, String userField1, String userField2, String userField3, String userField4, String userField5, Int32 transcriptionistID) => await AddTranscriptionPreviewOrderAsync(await connectionFunc(), previewID, clientID, orderID, patientID, appointmentID, accountNumber, orderNumber, accessionNumber, orderStatusCode, dateObserved, dateRequested, itemCode, description, notes, userField1, userField2, userField3, userField4, userField5, transcriptionistID);
	public async Task<Int32> AddTranscriptionPreviewOrderProviderAsync(Int32 transcriptionPreviewOrderID, Int32 clientID, Int32 previewID, Guid ordersProviderID, Guid orderID, String providerClientCode, Int32 providerRoleID, String namePrefix, String nameFirst, String nameMiddle, String nameLast, String nameSuffix, Int32 transcriptionistID) => await AddTranscriptionPreviewOrderProviderAsync(await connectionFunc(), transcriptionPreviewOrderID, clientID, previewID, ordersProviderID, orderID, providerClientCode, providerRoleID, namePrefix, nameFirst, nameMiddle, nameLast, nameSuffix, transcriptionistID);
	public async Task<Int32> AddTranscriptionPreviewOrderProvider2Async(Int32 transcriptionPreviewOrderID, Int32 clientID, Int32 previewID, Guid ordersProviderID, Guid orderID, String providerClientCode, Int32 providerRoleID, String namePrefix, String nameFirst, String nameMiddle, String nameLast, String nameSuffix, Int32 transcriptionistID) => await AddTranscriptionPreviewOrderProvider2Async(await connectionFunc(), transcriptionPreviewOrderID, clientID, previewID, ordersProviderID, orderID, providerClientCode, providerRoleID, namePrefix, nameFirst, nameMiddle, nameLast, nameSuffix, transcriptionistID);
	public async Task<Int32> AddTranscriptionPreviewQAAsync(Int32 previewID, Int32 transcriptionistID, Int32 transcriptionID) => await AddTranscriptionPreviewQAAsync(await connectionFunc(), previewID, transcriptionistID, transcriptionID);
	public async Task<Int32> AddTranscriptionPreviewSignatureAsync(Int32 transcriptionID, Int32 clientId, Int32 userID, Int32 lastOrder) => await AddTranscriptionPreviewSignatureAsync(await connectionFunc(), transcriptionID, clientId, userID, lastOrder);
	public async Task<List<AddTranscriptionVersionRow>> AddTranscriptionVersionAsync(Int32 clientID, Int32 transcriptionID, Guid transcriptionContentVersionID, Int64 logID, DateTime modifiedDate, String modifiedUser) => await AddTranscriptionVersionAsync(await connectionFunc(), clientID, transcriptionID, transcriptionContentVersionID, logID, modifiedDate, modifiedUser);
	public async Task<List<AddWorkItemRow>> AddWorkItemAsync(Int32 transcriptionistID, Int32 clientID, String machineName, Int32 transcriptionID, Int32 originalTranscriptionID) => await AddWorkItemAsync(await connectionFunc(), transcriptionistID, clientID, machineName, transcriptionID, originalTranscriptionID);
	public async Task<List<ASRGetTranscriptionPreviewCDASortStyleSheetRow>> ASRGetTranscriptionPreviewCDASortStyleSheetAsync(Int32 previewID) => await ASRGetTranscriptionPreviewCDASortStyleSheetAsync(await connectionFunc(), previewID);
	public async Task<List<ASRGetTranscriptionPreviewCDAStylesheetRow>> ASRGetTranscriptionPreviewCDAStylesheetAsync(Int32 previewID) => await ASRGetTranscriptionPreviewCDAStylesheetAsync(await connectionFunc(), previewID);
	public async Task<List<ASRGetWorkItemCDASortStyleSheetRow>> ASRGetWorkItemCDASortStyleSheetAsync(Guid workItemID) => await ASRGetWorkItemCDASortStyleSheetAsync(await connectionFunc(), workItemID);
	public async Task<List<ASRGetWorkItemCDAStylesheetRow>> ASRGetWorkItemCDAStylesheetAsync(Guid workItemID) => await ASRGetWorkItemCDAStylesheetAsync(await connectionFunc(), workItemID);
	public async Task<List<AuthenticateAndroidUserRow>> AuthenticateAndroidUserAsync(String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion) => await AuthenticateAndroidUserAsync(await connectionFunc(), clientName, userName, userPass, iPAddress, workstation, programVersion);
	public async Task<List<AuthenticateAndroidUserWithHashRow>> AuthenticateAndroidUserWithHashAsync(String clientName, String userName, Byte[] passwordHash, String iPAddress, String workstation, String programVersion) => await AuthenticateAndroidUserWithHashAsync(await connectionFunc(), clientName, userName, passwordHash, iPAddress, workstation, programVersion);
	public async Task<List<AuthenticateAndroidUserWithLinkedAccountRow>> AuthenticateAndroidUserWithLinkedAccountAsync(Int32 clientID, Int32 userID, String userPass, String iPAddress, String workstation, String programVersion, Guid masterSessionKey) => await AuthenticateAndroidUserWithLinkedAccountAsync(await connectionFunc(), clientID, userID, userPass, iPAddress, workstation, programVersion, masterSessionKey);
	public async Task<List<AuthenticateAndroidUserWithLinkedAccountWithHashRow>> AuthenticateAndroidUserWithLinkedAccountWithHashAsync(Int32 clientID, Int32 userID, Byte[] passwordHash, String iPAddress, String workstation, String programVersion, Guid masterSessionKey) => await AuthenticateAndroidUserWithLinkedAccountWithHashAsync(await connectionFunc(), clientID, userID, passwordHash, iPAddress, workstation, programVersion, masterSessionKey);
	public async Task<List<AuthenticateAndroidUserWithLockRow>> AuthenticateAndroidUserWithLockAsync(String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion) => await AuthenticateAndroidUserWithLockAsync(await connectionFunc(), clientName, userName, userPass, iPAddress, workstation, programVersion);
	public async Task<List<AuthenticateInScribeUserForPasswordResetRow>> AuthenticateInScribeUserForPasswordResetAsync(String companyCode, String userName, String iPAddress, String workstation, String programVersion) => await AuthenticateInScribeUserForPasswordResetAsync(await connectionFunc(), companyCode, userName, iPAddress, workstation, programVersion);
	public async Task<List<AuthenticateInScribeUserWithHashRow>> AuthenticateInScribeUserWithHashAsync(String companyCode, String userName, Byte[] passwordHash, String iPAddress, String workstation, String programVersion) => await AuthenticateInScribeUserWithHashAsync(await connectionFunc(), companyCode, userName, passwordHash, iPAddress, workstation, programVersion);
	public async Task<List<AuthenticateInScribeUserWithLockRow>> AuthenticateInScribeUserWithLockAsync(String companyCode, String userName, String userPass, String iPAddress, String workstation, String programVersion) => await AuthenticateInScribeUserWithLockAsync(await connectionFunc(), companyCode, userName, userPass, iPAddress, workstation, programVersion);
	public async Task<List<AuthenticateInScribeUserWithLock2Row>> AuthenticateInScribeUserWithLock2Async(String companyCode, String userName, String userPass, String iPAddress, String workstation, String programVersion) => await AuthenticateInScribeUserWithLock2Async(await connectionFunc(), companyCode, userName, userPass, iPAddress, workstation, programVersion);
	public async Task<List<AuthenticateInSyncUserRow>> AuthenticateInSyncUserAsync(String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion) => await AuthenticateInSyncUserAsync(await connectionFunc(), clientName, userName, userPass, iPAddress, workstation, programVersion);
	public async Task<List<AuthenticateInSyncUserWithHashRow>> AuthenticateInSyncUserWithHashAsync(String clientName, String userName, Byte[] passwordHash, String iPAddress, String workstation, String programVersion) => await AuthenticateInSyncUserWithHashAsync(await connectionFunc(), clientName, userName, passwordHash, iPAddress, workstation, programVersion);
	public async Task<List<AuthenticateInSyncUserWithLockRow>> AuthenticateInSyncUserWithLockAsync(String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion) => await AuthenticateInSyncUserWithLockAsync(await connectionFunc(), clientName, userName, userPass, iPAddress, workstation, programVersion);
	public async Task<List<AuthenticateInTouchServerRow>> AuthenticateInTouchServerAsync(String companyCode, String machineCode, String iPAddress, String password) => await AuthenticateInTouchServerAsync(await connectionFunc(), companyCode, machineCode, iPAddress, password);
	public async Task<List<AuthenticateInTouchUserRow>> AuthenticateInTouchUserAsync(String clientName, String userName, Int32 userPin, String iPAddress, String workstation, String programVersion) => await AuthenticateInTouchUserAsync(await connectionFunc(), clientName, userName, userPin, iPAddress, workstation, programVersion);
	public async Task<List<AuthenticateInTouchAccountRow>> AuthenticateInTouchAccountAsync(String companyCode, String machineCode, String iPAddress) => await AuthenticateInTouchAccountAsync(await connectionFunc(), companyCode, machineCode, iPAddress);
	public async Task<List<AuthenticateIPhoneUserRow>> AuthenticateIPhoneUserAsync(String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion) => await AuthenticateIPhoneUserAsync(await connectionFunc(), clientName, userName, userPass, iPAddress, workstation, programVersion);
	public async Task<List<AuthenticateIPhoneUserWithHashRow>> AuthenticateIPhoneUserWithHashAsync(String clientName, String userName, Byte[] passwordHash, String iPAddress, String workstation, String programVersion) => await AuthenticateIPhoneUserWithHashAsync(await connectionFunc(), clientName, userName, passwordHash, iPAddress, workstation, programVersion);
	public async Task<List<AuthenticateIPhoneUserWithLinkedAccountRow>> AuthenticateIPhoneUserWithLinkedAccountAsync(Int32 clientID, Int32 userID, String userPass, String iPAddress, String workstation, String programVersion, Guid masterSessionKey) => await AuthenticateIPhoneUserWithLinkedAccountAsync(await connectionFunc(), clientID, userID, userPass, iPAddress, workstation, programVersion, masterSessionKey);
	public async Task<List<AuthenticateIPhoneUserWithLinkedAccountWithHashRow>> AuthenticateIPhoneUserWithLinkedAccountWithHashAsync(Int32 clientID, Int32 userID, Byte[] passwordHash, String iPAddress, String workstation, String programVersion, Guid masterSessionKey) => await AuthenticateIPhoneUserWithLinkedAccountWithHashAsync(await connectionFunc(), clientID, userID, passwordHash, iPAddress, workstation, programVersion, masterSessionKey);
	public async Task<List<AuthenticateIPhoneUserWithLockRow>> AuthenticateIPhoneUserWithLockAsync(String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion) => await AuthenticateIPhoneUserWithLockAsync(await connectionFunc(), clientName, userName, userPass, iPAddress, workstation, programVersion);
	public async Task<List<AuthenticateIPhoneUserWithLock2Row>> AuthenticateIPhoneUserWithLock2Async(String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion) => await AuthenticateIPhoneUserWithLock2Async(await connectionFunc(), clientName, userName, userPass, iPAddress, workstation, programVersion);
	public async Task<List<AuthenticateNMSConnectorUserRow>> AuthenticateNMSConnectorUserAsync(String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion) => await AuthenticateNMSConnectorUserAsync(await connectionFunc(), clientName, userName, userPass, iPAddress, workstation, programVersion);
	public async Task<List<AuthenticateNMSConnectorUserWithHashRow>> AuthenticateNMSConnectorUserWithHashAsync(String clientName, String userName, Byte[] passwordHash, String iPAddress, String workstation, String programVersion) => await AuthenticateNMSConnectorUserWithHashAsync(await connectionFunc(), clientName, userName, passwordHash, iPAddress, workstation, programVersion);
	public async Task<List<AuthenticateServiceAccountRow>> AuthenticateServiceAccountAsync(String clientName, String loginCode, String password, String localIPAddress) => await AuthenticateServiceAccountAsync(await connectionFunc(), clientName, loginCode, password, localIPAddress);
	public async Task<List<AuthenticateShadowLinkServiceAccountRow>> AuthenticateShadowLinkServiceAccountAsync(String clientName, String loginCode, String password, String localIPAddress) => await AuthenticateShadowLinkServiceAccountAsync(await connectionFunc(), clientName, loginCode, password, localIPAddress);
	public async Task<List<AuthorizeRegionByClientRow>> AuthorizeRegionByClientAsync(Int32 authenticatedClientID, Int32 associateClientID) => await AuthorizeRegionByClientAsync(await connectionFunc(), authenticatedClientID, associateClientID);
	public async Task<Int32> CheckInWorkItemAsync(Int32 transcriptionID, Int32 clientID, Int32 transcriptionistID) => await CheckInWorkItemAsync(await connectionFunc(), transcriptionID, clientID, transcriptionistID);
	public async Task<List<CommitDocumentServiceJobRow>> CommitDocumentServiceJobAsync(Int32 clientID, Guid documentServiceJobID) => await CommitDocumentServiceJobAsync(await connectionFunc(), clientID, documentServiceJobID);
	public async Task<Int32> CorrectTranscriptionAsync(Int32 transcriptionID, Int32 clientID, Int32 transcriptionistID, Int32 correctionTID) => await CorrectTranscriptionAsync(await connectionFunc(), transcriptionID, clientID, transcriptionistID, correctionTID);
	public async Task<List<DeleteClientUserAuthorGroupEnrollmentRow>> DeleteClientUserAuthorGroupEnrollmentAsync(Int32 clientID, Int32 userID, Int32 authorGroupID, String modifiedUser, DateTime modifiedDate) => await DeleteClientUserAuthorGroupEnrollmentAsync(await connectionFunc(), clientID, userID, authorGroupID, modifiedUser, modifiedDate);
	public async Task<Int32> DeleteClientUserInpatientWorklistVisitAsync(Int32 clientID, Int32 userID, Guid visitID, Int32 associateTypeID, String modifiedUser, DateTime modifiedDate) => await DeleteClientUserInpatientWorklistVisitAsync(await connectionFunc(), clientID, userID, visitID, associateTypeID, modifiedUser, modifiedDate);
	public async Task<Int32> DeleteClientUserLinkedAccountAsync(Int32 sourceClientID, Int32 sourceUserID, Int32 targetClientID, Int32 targetUserID) => await DeleteClientUserLinkedAccountAsync(await connectionFunc(), sourceClientID, sourceUserID, targetClientID, targetUserID);
	public async Task<Int32> DeleteClientUserWorklistEncounterAsync(Int32 clientID, Int32 userID, Guid encounterID, Int32 associateTypeID, String modifiedUser, DateTime modifiedDate) => await DeleteClientUserWorklistEncounterAsync(await connectionFunc(), clientID, userID, encounterID, associateTypeID, modifiedUser, modifiedDate);
	public async Task<Int32> DeleteCompanyInTouchServerResetUserAsync(Int32 companyID, Int32 serverID, Int32 userID) => await DeleteCompanyInTouchServerResetUserAsync(await connectionFunc(), companyID, serverID, userID);
	public async Task<Int32> DeleteDeviceFoldersAsync(Int32 deviceID) => await DeleteDeviceFoldersAsync(await connectionFunc(), deviceID);
	public async Task<Int32> DeleteDocumentServiceJobAssociatesAsync(Int32 clientID, Guid documentServiceJobID) => await DeleteDocumentServiceJobAssociatesAsync(await connectionFunc(), clientID, documentServiceJobID);
	public async Task<Int32> DeleteTranscriptionPreviewAsync(Int32 clientID, Int32 previewID) => await DeleteTranscriptionPreviewAsync(await connectionFunc(), clientID, previewID);
	public async Task<List<EditCaseAttachmentFileRow>> EditCaseAttachmentFileAsync(Guid caseID, Int32 caseAttachmentID, Byte[] data) => await EditCaseAttachmentFileAsync(await connectionFunc(), caseID, caseAttachmentID, data);
	public async Task<List<EditClientUserContactInfoRow>> EditClientUserContactInfoAsync(Int32 clientID, Int32 userID, String modifiedUser, DateTime modifiedDate, String userEmail) => await EditClientUserContactInfoAsync(await connectionFunc(), clientID, userID, modifiedUser, modifiedDate, userEmail);
	public async Task<List<EditClientUserPasswordRow>> EditClientUserPasswordAsync(Int32 userID, Int32 clientID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID) => await EditClientUserPasswordAsync(await connectionFunc(), userID, clientID, passwordSalt, passwordHash, passwordHashAlgorithmID);
	public async Task<List<EditCompanyUserContactInfoRow>> EditCompanyUserContactInfoAsync(Int32 companyID, Int32 transcriptionistID, String transcriptionistEMail, String transcriptionistPhone1, String transcriptionistPhone2, String modifiedUser, DateTime modifiedDate) => await EditCompanyUserContactInfoAsync(await connectionFunc(), companyID, transcriptionistID, transcriptionistEMail, transcriptionistPhone1, transcriptionistPhone2, modifiedUser, modifiedDate);
	public async Task<List<EditCompanyUserInfoRow>> EditCompanyUserInfoAsync(Int32 companyID, Int32 transcriptionistID, String transcriptionistNameFirst, String transcriptionistNameMiddle, String transcriptionistNameLast, String transcriptionistEMail, String transcriptionistPhone1, String transcriptionistPhone2, String modifiedUser, DateTime modifiedDate) => await EditCompanyUserInfoAsync(await connectionFunc(), companyID, transcriptionistID, transcriptionistNameFirst, transcriptionistNameMiddle, transcriptionistNameLast, transcriptionistEMail, transcriptionistPhone1, transcriptionistPhone2, modifiedUser, modifiedDate);
	public async Task<List<EditCompanyUserPasswordRow>> EditCompanyUserPasswordAsync(Int32 userID, Int32 companyID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID) => await EditCompanyUserPasswordAsync(await connectionFunc(), userID, companyID, passwordSalt, passwordHash, passwordHashAlgorithmID);
	public async Task<Int32> EditDeviceAsync(Int32 deviceID, Int32 deviceAPITypeID, String identifier, Boolean showDictationLog, Boolean printDictationLog, String modifiedUser, String extendedConfigurationInfo) => await EditDeviceAsync(await connectionFunc(), deviceID, deviceAPITypeID, identifier, showDictationLog, printDictationLog, modifiedUser, extendedConfigurationInfo);
	public async Task<List<EditDictationRow>> EditDictationAsync(Int32 dictationID, Int32 dictationStatusID, DateTime dateConverted, DateTime dateReceived, String errorDescription, Int32 lengthInSeconds, Int32 dictationRouteID) => await EditDictationAsync(await connectionFunc(), dictationID, dictationStatusID, dateConverted, dateReceived, errorDescription, lengthInSeconds, dictationRouteID);
	public async Task<List<EditDictationAppendRow>> EditDictationAppendAsync(Int32 clientID, Int32 dictationID, Int32 masterTranscriptionID) => await EditDictationAppendAsync(await connectionFunc(), clientID, dictationID, masterTranscriptionID);
	public async Task<Int32> EditDictationChunkUploadDateAsync(Int32 clientID, Int32 dictationID) => await EditDictationChunkUploadDateAsync(await connectionFunc(), clientID, dictationID);
	public async Task<List<EditDictationPrependRow>> EditDictationPrependAsync(Int32 clientID, Int32 dictationID, Int32 masterTranscriptionID) => await EditDictationPrependAsync(await connectionFunc(), clientID, dictationID, masterTranscriptionID);
	public async Task<List<EditDictationStatusRow>> EditDictationStatusAsync(Int32 clientID, Int32 dictationID, Int32 dictationStatusID) => await EditDictationStatusAsync(await connectionFunc(), clientID, dictationID, dictationStatusID);
	public async Task<List<EditDocumentServiceJobContentRow>> EditDocumentServiceJobContentAsync(Int32 clientID, Guid documentServiceJobID, Int32 contentTypeID, Byte[] content) => await EditDocumentServiceJobContentAsync(await connectionFunc(), clientID, documentServiceJobID, contentTypeID, content);
	public async Task<List<EditDocumentServiceJobRelatedTranscriptionRow>> EditDocumentServiceJobRelatedTranscriptionAsync(Int32 clientID, Guid documentServiceJobID, Int32 precedingTranscriptionID, Int32 followingTranscriptionID) => await EditDocumentServiceJobRelatedTranscriptionAsync(await connectionFunc(), clientID, documentServiceJobID, precedingTranscriptionID, followingTranscriptionID);
	public async Task<Int32> EditInterpreterSessionEndAsync(String externalSessionID, Int32 sessionStatusID, Int32 sessionDuration, Int32 interpreterSessionsHangupCauseID, DateTime sessionEnd, String hangupCause) => await EditInterpreterSessionEndAsync(await connectionFunc(), externalSessionID, sessionStatusID, sessionDuration, interpreterSessionsHangupCauseID, sessionEnd, hangupCause);
	public async Task<Int32> EditInterpreterSessionRecordingAsync(String externalSessionID, String recordingURL) => await EditInterpreterSessionRecordingAsync(await connectionFunc(), externalSessionID, recordingURL);
	public async Task<Int32> EditInterpreterSessionStatusAsync(String externalSessionID, Int32 sessionStatusID, Int32 interpreterID) => await EditInterpreterSessionStatusAsync(await connectionFunc(), externalSessionID, sessionStatusID, interpreterID);
	public async Task<Int32> EditProgramVersionAsync(Int32 programID, Int32 versionID, String versionNumber, Boolean upgradeRequired, Boolean upgradeAvailable, String upgradeMessage, String upgradeURL, String modifiedUser, DateTime modifiedDate, Boolean isPrivate) => await EditProgramVersionAsync(await connectionFunc(), programID, versionID, versionNumber, upgradeRequired, upgradeAvailable, upgradeMessage, upgradeURL, modifiedUser, modifiedDate, isPrivate);
	public async Task<Int32> EditTranscriptionCompleteFinalAsync(Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID) => await EditTranscriptionCompleteFinalAsync(await connectionFunc(), clientID, userID, transcriptionID, forClientID, forUserID);
	public async Task<Int32> EditTranscriptionCompleteFinal2Async(Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID) => await EditTranscriptionCompleteFinal2Async(await connectionFunc(), clientID, userID, transcriptionID, forClientID, forUserID);
	public async Task<Int32> EditTranscriptionCompletePreliminaryAsync(Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID) => await EditTranscriptionCompletePreliminaryAsync(await connectionFunc(), clientID, userID, transcriptionID, forClientID, forUserID);
	public async Task<List<EditTranscriptionCompletePreliminaryWithAppendRow>> EditTranscriptionCompletePreliminaryWithAppendAsync(Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID, String tranText) => await EditTranscriptionCompletePreliminaryWithAppendAsync(await connectionFunc(), clientID, userID, transcriptionID, forClientID, forUserID, tranText);
	public async Task<Int32> EditTranscriptionCompleteReferralAsync(Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID) => await EditTranscriptionCompleteReferralAsync(await connectionFunc(), clientID, userID, transcriptionID, forClientID, forUserID);
	public async Task<Int32> EditTranscriptionCompleteReviewAsync(Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID) => await EditTranscriptionCompleteReviewAsync(await connectionFunc(), clientID, userID, transcriptionID, forClientID, forUserID);
	public async Task<Int32> EditTranscriptionCompleteReview2Async(Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID) => await EditTranscriptionCompleteReview2Async(await connectionFunc(), clientID, userID, transcriptionID, forClientID, forUserID);
	public async Task<Int32> EditTranscriptionHeaderAsync(Int32 clientID, Int32 userID, Int32 transcriptionID, String modifiedUser, Int32 authorID, Int32 documentID, Int32 locationID, DateTime dictationDate, String patientID, String patientName, String patientGender, DateTime patientBirthdate, DateTime appointmentDate, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5) => await EditTranscriptionHeaderAsync(await connectionFunc(), clientID, userID, transcriptionID, modifiedUser, authorID, documentID, locationID, dictationDate, patientID, patientName, patientGender, patientBirthdate, appointmentDate, orderNumber, userField1, userField2, userField3, userField4, userField5);
	public async Task<Int32> EditTranscriptionHeaderV2Async(Int32 clientID, Int32 userID, Int32 transcriptionID, String modifiedUser, Int32 authorID, Int32 documentID, Int32 locationID, DateTime dateDictated, DateTime dateDictatedCST, String patientID, String patientName, String patientGender, DateTime patientBirthdate, DateTime appointmentDate, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5) => await EditTranscriptionHeaderV2Async(await connectionFunc(), clientID, userID, transcriptionID, modifiedUser, authorID, documentID, locationID, dateDictated, dateDictatedCST, patientID, patientName, patientGender, patientBirthdate, appointmentDate, orderNumber, userField1, userField2, userField3, userField4, userField5);
	public async Task<Int32> EditWorkItemAsync(Guid workItemID, Int32 transcriptionID, Int32 originalTranscriptionID, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 clientID, Int32 transcriptionistID, Int32 dictatingUserID, Int32 documentID, Int32 locationID, Byte[] transcriptionContent, DateTimeOffset dateDictated, DateTime appointmentDate, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 workflowOverride, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean isMarkedForClientReview, Int32 qAProgramId, Boolean transcriptionModified, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, String transcriptionDictationPath, Int32 patientLetterId, Boolean wasSplit, List<TagsTableRow> tagsTable, List<SignaturesTable2Row> signaturesTable, List<AssociatesTableRow> associatesTable, List<NameValuePairsTableRow> optionalVariablesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Int32 contentTypeID, Byte[] hTMLContent, String inScribeVersion, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, Boolean audioPlayed, Boolean audioPlayedFully) => await EditWorkItemAsync(await connectionFunc(), workItemID, transcriptionID, originalTranscriptionID, appendTranscriptionID, correctionTranscriptionID, clientID, transcriptionistID, dictatingUserID, documentID, locationID, transcriptionContent, dateDictated, appointmentDate, patientID, patientName, patientBirthdate, patientGender, patientNameFirst, patientNameMiddle, patientNameLast, patientAddress1, patientAddress2, patientCity, patientState, patientZipCode, patientHomePhone, patientWorkPhone, patientOrderNumber, patientUserField1, patientUserField2, patientUserField3, patientUserField4, patientUserField5, patientAddToDB, orderNumber, userField1, userField2, userField3, userField4, userField5, comments, workflowOverride, isMarkedForQA, isQAOptional, qAPercent, isMarkedForClientReview, qAProgramId, transcriptionModified, qARatingsAreFeedbackOnly, qARatingsWereApplied, transcriptionDictationPath, patientLetterId, wasSplit, tagsTable, signaturesTable, associatesTable, optionalVariablesTable, qAFeedbackRatingsTable, contentTypeID, hTMLContent, inScribeVersion, totalIdleSeconds, totalJobSeconds, initialIdleSeconds, originalQTCharacters, originalNonVisibleQTCharacters, originalAutoTextCharacters, indexMarkSeconds, audioPlayed, audioPlayedFully);
	public async Task<Int32> EditWorkItem2Async(Guid workItemID, Int32 transcriptionID, Int32 originalTranscriptionID, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 clientID, Int32 transcriptionistID, Int32 dictatingUserID, Int32 documentID, Int32 locationID, Byte[] transcriptionContent, DateTimeOffset dateDictated, DateTime appointmentDate, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 workflowOverride, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean isMarkedForClientReview, Int32 qAProgramId, Boolean transcriptionModified, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, String transcriptionDictationPath, Int32 patientLetterId, Boolean wasSplit, List<TagsTableRow> tagsTable, List<SignaturesTableRow> signaturesTable, List<AssociatesTable2Row> associatesTable, List<NameValuePairsTableRow> optionalVariablesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Int32 contentTypeID, Byte[] hTMLContent, String inScribeVersion, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, Boolean audioPlayed, Boolean audioPlayedFully) => await EditWorkItem2Async(await connectionFunc(), workItemID, transcriptionID, originalTranscriptionID, appendTranscriptionID, correctionTranscriptionID, clientID, transcriptionistID, dictatingUserID, documentID, locationID, transcriptionContent, dateDictated, appointmentDate, patientID, patientName, patientBirthdate, patientGender, patientNameFirst, patientNameMiddle, patientNameLast, patientAddress1, patientAddress2, patientCity, patientState, patientZipCode, patientHomePhone, patientWorkPhone, patientOrderNumber, patientUserField1, patientUserField2, patientUserField3, patientUserField4, patientUserField5, patientAddToDB, orderNumber, userField1, userField2, userField3, userField4, userField5, comments, workflowOverride, isMarkedForQA, isQAOptional, qAPercent, isMarkedForClientReview, qAProgramId, transcriptionModified, qARatingsAreFeedbackOnly, qARatingsWereApplied, transcriptionDictationPath, patientLetterId, wasSplit, tagsTable, signaturesTable, associatesTable, optionalVariablesTable, qAFeedbackRatingsTable, contentTypeID, hTMLContent, inScribeVersion, totalIdleSeconds, totalJobSeconds, initialIdleSeconds, originalQTCharacters, originalNonVisibleQTCharacters, originalAutoTextCharacters, indexMarkSeconds, audioPlayed, audioPlayedFully);
	public async Task<Int32> EditWorkItem3Async(Guid workItemID, Int32 transcriptionID, Int32 originalTranscriptionID, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 clientID, Int32 transcriptionistID, Int32 dictatingUserID, Int32 documentID, Int32 locationID, Byte[] transcriptionContent, DateTimeOffset dateDictated, DateTime appointmentDate, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 workflowOverride, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean isMarkedForClientReview, Int32 qAProgramId, Boolean transcriptionModified, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, String transcriptionDictationPath, Int32 patientLetterId, Boolean wasSplit, List<TagsTableRow> tagsTable, List<SignaturesTableRow> signaturesTable, List<AssociatesTable3Row> associatesTable, List<NameValuePairsTableRow> optionalVariablesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Int32 contentTypeID, Byte[] hTMLContent, String inScribeVersion, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, Boolean audioPlayed, Boolean audioPlayedFully) => await EditWorkItem3Async(await connectionFunc(), workItemID, transcriptionID, originalTranscriptionID, appendTranscriptionID, correctionTranscriptionID, clientID, transcriptionistID, dictatingUserID, documentID, locationID, transcriptionContent, dateDictated, appointmentDate, patientID, patientName, patientBirthdate, patientGender, patientNameFirst, patientNameMiddle, patientNameLast, patientAddress1, patientAddress2, patientCity, patientState, patientZipCode, patientHomePhone, patientWorkPhone, patientOrderNumber, patientUserField1, patientUserField2, patientUserField3, patientUserField4, patientUserField5, patientAddToDB, orderNumber, userField1, userField2, userField3, userField4, userField5, comments, workflowOverride, isMarkedForQA, isQAOptional, qAPercent, isMarkedForClientReview, qAProgramId, transcriptionModified, qARatingsAreFeedbackOnly, qARatingsWereApplied, transcriptionDictationPath, patientLetterId, wasSplit, tagsTable, signaturesTable, associatesTable, optionalVariablesTable, qAFeedbackRatingsTable, contentTypeID, hTMLContent, inScribeVersion, totalIdleSeconds, totalJobSeconds, initialIdleSeconds, originalQTCharacters, originalNonVisibleQTCharacters, originalAutoTextCharacters, indexMarkSeconds, audioPlayed, audioPlayedFully);
	public async Task<List<EditWorkItemStatusRow>> EditWorkItemStatusAsync(Guid workItemID, DateTime dateProcessed, Int32 statusID) => await EditWorkItemStatusAsync(await connectionFunc(), workItemID, dateProcessed, statusID);
	public async Task<Int32> EditWorkItemTranscriptionAsync(Guid workItemID, Byte[] transcriptionContent, Byte[] hTMLContent, Int32 contentTypeID) => await EditWorkItemTranscriptionAsync(await connectionFunc(), workItemID, transcriptionContent, hTMLContent, contentTypeID);
	public async Task<List<EmergencyGetCompanyUserClientPoolTranscriptionJobRow>> EmergencyGetCompanyUserClientPoolTranscriptionJobAsync(Int32 companyID, Int32 companyUserID, Int32 transcriptionID, Boolean enableAvailablePoolJobs) => await EmergencyGetCompanyUserClientPoolTranscriptionJobAsync(await connectionFunc(), companyID, companyUserID, transcriptionID, enableAvailablePoolJobs);
	public async Task<List<GetASRXSLStylesheetPathRow>> GetASRXSLStylesheetPathAsync(Int32 clientID, Int32 documentID, Int32 userID, Int32 locationID) => await GetASRXSLStylesheetPathAsync(await connectionFunc(), clientID, documentID, userID, locationID);
	public async Task<List<GetAttestationTemplateRow>> GetAttestationTemplateAsync(Int32 clientID, Int32 userID, Int32 templateID) => await GetAttestationTemplateAsync(await connectionFunc(), clientID, userID, templateID);
	public async Task<List<GetCaseAttachmentsRow>> GetCaseAttachmentsAsync(Guid caseID) => await GetCaseAttachmentsAsync(await connectionFunc(), caseID);
	public async Task<List<GetClientRow>> GetClientAsync(Int32 id) => await GetClientAsync(await connectionFunc(), id);
	public async Task<List<GetClientAddressConfigurationRow>> GetClientAddressConfigurationAsync(Int32 clientID) => await GetClientAddressConfigurationAsync(await connectionFunc(), clientID);
	public async Task<List<GetClientAppointmentDictationsRow>> GetClientAppointmentDictationsAsync(Int32 clientID, Guid appointmentID) => await GetClientAppointmentDictationsAsync(await connectionFunc(), clientID, appointmentID);
	public async Task<List<GetClientArtifactSearchPatientOrdersRow>> GetClientArtifactSearchPatientOrdersAsync(Int32 clientID, String nameLast, String nameFirst, DateTime birthdate, Int32 age, String gender, String patientID, String accountNumber, String orderNumber, DateTime appointmentDate, DateTime admissionDate, String nameFull, Int32 schedulingResourceUserID, DateTime patientAppointmentDate, DateTime appointmentAdmissionDate, String appointmentOrderNumber, String orderOrderNumber, String orderAccessionNumber, DateTime orderDateObserved, Int32 filterLocationID, Guid patientGUID, Guid patientVisitID, Guid orderID, Int32 patientsAppointmentsTypeID, DateTimeOffset appointmentAppointmentDateStart, DateTimeOffset appointmentAppointmentDateEnd) => await GetClientArtifactSearchPatientOrdersAsync(await connectionFunc(), clientID, nameLast, nameFirst, birthdate, age, gender, patientID, accountNumber, orderNumber, appointmentDate, admissionDate, nameFull, schedulingResourceUserID, patientAppointmentDate, appointmentAdmissionDate, appointmentOrderNumber, orderOrderNumber, orderAccessionNumber, orderDateObserved, filterLocationID, patientGUID, patientVisitID, orderID, patientsAppointmentsTypeID, appointmentAppointmentDateStart, appointmentAppointmentDateEnd);
	public async Task<List<GetClientArtifactSearchPatientsRow>> GetClientArtifactSearchPatientsAsync(Int32 clientID, String nameLast, String nameFirst, DateTime birthdate, Int32 age, String gender, String patientID, String accountNumber, String orderNumber, DateTime appointmentDate, DateTime admissionDate, String nameFull, DateTime appointmentAdmissionDate, DateTime appointmentAppointmentDate, String appointmentOrderNumber, String orderOrderNumber, String orderAccessionNumber, DateTime orderDateObserved, Int32 filterLocationID, Guid patientGUID, Guid patientVisitID, Guid orderID, Int32 patientsAppointmentsTypeID, DateTimeOffset appointmentAppointmentDateStart, DateTimeOffset appointmentAppointmentDateEnd) => await GetClientArtifactSearchPatientsAsync(await connectionFunc(), clientID, nameLast, nameFirst, birthdate, age, gender, patientID, accountNumber, orderNumber, appointmentDate, admissionDate, nameFull, appointmentAdmissionDate, appointmentAppointmentDate, appointmentOrderNumber, orderOrderNumber, orderAccessionNumber, orderDateObserved, filterLocationID, patientGUID, patientVisitID, orderID, patientsAppointmentsTypeID, appointmentAppointmentDateStart, appointmentAppointmentDateEnd);
	public async Task<List<GetClientArtifactSearchPatientVisitsRow>> GetClientArtifactSearchPatientVisitsAsync(Int32 clientID, String nameLast, String nameFirst, DateTime birthdate, Int32 age, String gender, String patientID, String accountNumber, String orderNumber, DateTime appointmentDate, DateTime admissionDate, String nameFull, Int32 schedulingResourceUserID, DateTime patientAppointmentDate, DateTime appointmentAdmissionDate, String appointmentOrderNumber, String orderOrderNumber, String orderAccessionNumber, DateTime orderDateObserved, Int32 filterLocationID, Guid patientGUID, Guid patientVisitID, Guid orderID, Int32 patientsAppointmentsTypeID, DateTimeOffset appointmentAppointmentDateStart, DateTimeOffset appointmentAppointmentDateEnd) => await GetClientArtifactSearchPatientVisitsAsync(await connectionFunc(), clientID, nameLast, nameFirst, birthdate, age, gender, patientID, accountNumber, orderNumber, appointmentDate, admissionDate, nameFull, schedulingResourceUserID, patientAppointmentDate, appointmentAdmissionDate, appointmentOrderNumber, orderOrderNumber, orderAccessionNumber, orderDateObserved, filterLocationID, patientGUID, patientVisitID, orderID, patientsAppointmentsTypeID, appointmentAppointmentDateStart, appointmentAppointmentDateEnd);
	public async Task<List<GetClientAssociateTypesRow>> GetClientAssociateTypesAsync(Int32 clientID) => await GetClientAssociateTypesAsync(await connectionFunc(), clientID);
	public async Task<List<GetClientAuthorGroupRow>> GetClientAuthorGroupAsync(Int32 clientID, Int32 authorGroupID) => await GetClientAuthorGroupAsync(await connectionFunc(), clientID, authorGroupID);
	public async Task<List<GetClientAuthorGroupEncountersRow>> GetClientAuthorGroupEncountersAsync(Int32 clientID, Int32 authorGroupID) => await GetClientAuthorGroupEncountersAsync(await connectionFunc(), clientID, authorGroupID);
	public async Task<List<GetClientAuthorGroupInpatientVisitsRow>> GetClientAuthorGroupInpatientVisitsAsync(Int32 clientID, Int32 authorGroupID) => await GetClientAuthorGroupInpatientVisitsAsync(await connectionFunc(), clientID, authorGroupID);
	public async Task<List<GetClientAuthorGroupUsersRow>> GetClientAuthorGroupUsersAsync(Int32 clientID, Int32 authorGroupID) => await GetClientAuthorGroupUsersAsync(await connectionFunc(), clientID, authorGroupID);
	public async Task<List<GetClientAuthorGroupsRow>> GetClientAuthorGroupsAsync(Int32 clientID) => await GetClientAuthorGroupsAsync(await connectionFunc(), clientID);
	public async Task<List<GetClientAuthorizationByCompanyInTouchServerIDRow>> GetClientAuthorizationByCompanyInTouchServerIDAsync(Int32 companyID, Int32 serverID, Int32 clientID) => await GetClientAuthorizationByCompanyInTouchServerIDAsync(await connectionFunc(), companyID, serverID, clientID);
	public async Task<List<GetClientAuthorizationByCompanyUserIDRow>> GetClientAuthorizationByCompanyUserIDAsync(Int32 companyID, Int32 userID, String machineCode, Int32 clientID) => await GetClientAuthorizationByCompanyUserIDAsync(await connectionFunc(), companyID, userID, machineCode, clientID);
	public async Task<List<GetClientDefaultPasswordHashAlgorithmRow>> GetClientDefaultPasswordHashAlgorithmAsync(Int32 clientID) => await GetClientDefaultPasswordHashAlgorithmAsync(await connectionFunc(), clientID);
	public async Task<List<GetClientDictationFilePathRow>> GetClientDictationFilePathAsync(Int32 clientID, Int32 dictationID, Int32 userId, String userType) => await GetClientDictationFilePathAsync(await connectionFunc(), clientID, dictationID, userId, userType);
	public async Task<List<GetClientDictationPathsRow>> GetClientDictationPathsAsync(Int32 clientID, Int32 dictationID) => await GetClientDictationPathsAsync(await connectionFunc(), clientID, dictationID);
	public async Task<List<GetClientDictationRecordsRow>> GetClientDictationRecordsAsync(Int32 clientID, Int32 dictationID) => await GetClientDictationRecordsAsync(await connectionFunc(), clientID, dictationID);
	public async Task<List<GetClientDictationTemplateRow>> GetClientDictationTemplateAsync(Int32 clientID, Int32 templateID, Boolean includeStructuredBody) => await GetClientDictationTemplateAsync(await connectionFunc(), clientID, templateID, includeStructuredBody);
	public async Task<List<GetClientDictationTemplateContentRow>> GetClientDictationTemplateContentAsync(Int32 clientID, Int32 templateID) => await GetClientDictationTemplateContentAsync(await connectionFunc(), clientID, templateID);
	public async Task<List<GetClientDictationTemplateInfoRow>> GetClientDictationTemplateInfoAsync(Int32 clientID, Int32 templateId) => await GetClientDictationTemplateInfoAsync(await connectionFunc(), clientID, templateId);
	public async Task<List<GetClientDocumentTemplateRow>> GetClientDocumentTemplateAsync(Int32 clientID, Int32 documentTemplateID, Boolean includeStructuredBody) => await GetClientDocumentTemplateAsync(await connectionFunc(), clientID, documentTemplateID, includeStructuredBody);
	public async Task<List<GetClientDocumentTemplateContentRow>> GetClientDocumentTemplateContentAsync(Int32 clientID, Int32 documentTemplateID) => await GetClientDocumentTemplateContentAsync(await connectionFunc(), clientID, documentTemplateID);
	public async Task<List<GetClientDocumentTypeRow>> GetClientDocumentTypeAsync(Int32 clientID, Int32 documentTypeID) => await GetClientDocumentTypeAsync(await connectionFunc(), clientID, documentTypeID);
	public async Task<List<GetClientDocumentTemplateASRStylesheetRow>> GetClientDocumentTemplateASRStylesheetAsync(Int32 clientID, Int32 documentTemplateID) => await GetClientDocumentTemplateASRStylesheetAsync(await connectionFunc(), clientID, documentTemplateID);
	public async Task<List<GetClientDocumentTemplateCDAOptionsRow>> GetClientDocumentTemplateCDAOptionsAsync(Int32 clientID, Int32 documentTemplateID) => await GetClientDocumentTemplateCDAOptionsAsync(await connectionFunc(), clientID, documentTemplateID);
	public async Task<List<GetClientDocumentTemplateCDASectionsRow>> GetClientDocumentTemplateCDASectionsAsync(Int32 clientID, Int32 documentTemplateID) => await GetClientDocumentTemplateCDASectionsAsync(await connectionFunc(), clientID, documentTemplateID);
	public async Task<List<GetClientDocumentTemplateInfoRow>> GetClientDocumentTemplateInfoAsync(Int32 clientID, Int32 templateId) => await GetClientDocumentTemplateInfoAsync(await connectionFunc(), clientID, templateId);
	public async Task<List<GetClientDocumentTypeLocationRow>> GetClientDocumentTypeLocationAsync(Int32 clientID, Int32 documentId) => await GetClientDocumentTypeLocationAsync(await connectionFunc(), clientID, documentId);
	public async Task<List<GetClientDocumentTypeLocationsRow>> GetClientDocumentTypeLocationsAsync(Int32 clientID) => await GetClientDocumentTypeLocationsAsync(await connectionFunc(), clientID);
	public async Task<List<GetClientDocumentTypeSettingsRow>> GetClientDocumentTypeSettingsAsync(Int32 clientID, Int32 documentTypeID) => await GetClientDocumentTypeSettingsAsync(await connectionFunc(), clientID, documentTypeID);
	public async Task<List<GetClientDocumentTypeGroupsRow>> GetClientDocumentTypeGroupsAsync(Int32 clientID) => await GetClientDocumentTypeGroupsAsync(await connectionFunc(), clientID);
	public async Task<List<GetClientDocumentTypesRow>> GetClientDocumentTypesAsync(Int32 clientID, Boolean includeInactive) => await GetClientDocumentTypesAsync(await connectionFunc(), clientID, includeInactive);
	public async Task<List<GetClientDocumentTypesPatientLettersRow>> GetClientDocumentTypesPatientLettersAsync(Int32 clientID) => await GetClientDocumentTypesPatientLettersAsync(await connectionFunc(), clientID);
	public async Task<List<GetClientFoldersRow>> GetClientFoldersAsync(Int32 clientID) => await GetClientFoldersAsync(await connectionFunc(), clientID);
	public async Task<List<GetClientHeaderConfigurationRow>> GetClientHeaderConfigurationAsync(Int32 clientID, Int32 headerConfigurationID) => await GetClientHeaderConfigurationAsync(await connectionFunc(), clientID, headerConfigurationID);
	public async Task<List<GetClientHeaderConfigurationByDocumentIDRow>> GetClientHeaderConfigurationByDocumentIDAsync(Int32 clientID, Int32 documentID) => await GetClientHeaderConfigurationByDocumentIDAsync(await connectionFunc(), clientID, documentID);
	public async Task<List<GetClientHeaderConfigurationsRow>> GetClientHeaderConfigurationsAsync(Int32 clientID) => await GetClientHeaderConfigurationsAsync(await connectionFunc(), clientID);
	public async Task<List<GetClientLocationRow>> GetClientLocationAsync(Int32 clientID, Int32 locationID) => await GetClientLocationAsync(await connectionFunc(), clientID, locationID);
	public async Task<List<GetClientLocationByClientCodeRow>> GetClientLocationByClientCodeAsync(Int32 clientID, String clientLocationID) => await GetClientLocationByClientCodeAsync(await connectionFunc(), clientID, clientLocationID);
	public async Task<List<GetClientLocationResourceRow>> GetClientLocationResourceAsync(Int32 clientID, Int32 locationResourceID) => await GetClientLocationResourceAsync(await connectionFunc(), clientID, locationResourceID);
	public async Task<List<GetClientLocationResourceEncountersRow>> GetClientLocationResourceEncountersAsync(Int32 clientID, Int32 locationResourceID) => await GetClientLocationResourceEncountersAsync(await connectionFunc(), clientID, locationResourceID);
	public async Task<List<GetClientLocationResourceInpatientVisitsRow>> GetClientLocationResourceInpatientVisitsAsync(Int32 clientID, Int32 locationResourceID) => await GetClientLocationResourceInpatientVisitsAsync(await connectionFunc(), clientID, locationResourceID);
	public async Task<List<GetClientLocationsRow>> GetClientLocationsAsync(Int32 clientID, Boolean includeInactive) => await GetClientLocationsAsync(await connectionFunc(), clientID, includeInactive);
	public async Task<List<GetClientPasswordComplexitySettingsRow>> GetClientPasswordComplexitySettingsAsync(Int32 clientID) => await GetClientPasswordComplexitySettingsAsync(await connectionFunc(), clientID);
	public async Task<List<GetClientPatientDictationsRow>> GetClientPatientDictationsAsync(Int32 clientId, Guid patientGuid) => await GetClientPatientDictationsAsync(await connectionFunc(), clientId, patientGuid);
	public async Task<List<GetClientPatientProblemListCategoriesRow>> GetClientPatientProblemListCategoriesAsync(Int32 clientId, Guid patientGuid) => await GetClientPatientProblemListCategoriesAsync(await connectionFunc(), clientId, patientGuid);
	public async Task<List<GetClientPatientProblemListCategoryRow>> GetClientPatientProblemListCategoryAsync(Int32 clientId, Guid patientGuid, Int32 categoryId) => await GetClientPatientProblemListCategoryAsync(await connectionFunc(), clientId, patientGuid, categoryId);
	public async Task<List<GetClientPatientProblemListCategoryContentRow>> GetClientPatientProblemListCategoryContentAsync(Int32 clientId, Guid patientGuid, Int32 categoryId) => await GetClientPatientProblemListCategoryContentAsync(await connectionFunc(), clientId, patientGuid, categoryId);
	public async Task<List<GetClientPatientTranscriptionDictationsRow>> GetClientPatientTranscriptionDictationsAsync(Int32 clientId, Guid patientGuid) => await GetClientPatientTranscriptionDictationsAsync(await connectionFunc(), clientId, patientGuid);
	public async Task<List<GetClientPatientLetterRow>> GetClientPatientLetterAsync(Int32 clientID, Int32 patientLetterID) => await GetClientPatientLetterAsync(await connectionFunc(), clientID, patientLetterID);
	public async Task<List<GetClientPatientLettersRow>> GetClientPatientLettersAsync(Int32 clientID) => await GetClientPatientLettersAsync(await connectionFunc(), clientID);
	public async Task<List<GetClientPatientVisitRow>> GetClientPatientVisitAsync(Int32 clientID, Guid appointmentID) => await GetClientPatientVisitAsync(await connectionFunc(), clientID, appointmentID);
	public async Task<List<GetClientPatientVisitDictationsRow>> GetClientPatientVisitDictationsAsync(Int32 clientID, Guid appointmentID) => await GetClientPatientVisitDictationsAsync(await connectionFunc(), clientID, appointmentID);
	public async Task<List<GetClientPatientVisitTranscriptionsRow>> GetClientPatientVisitTranscriptionsAsync(Int32 clientID, Guid appointmentID) => await GetClientPatientVisitTranscriptionsAsync(await connectionFunc(), clientID, appointmentID);
	public async Task<List<GetClientProblemListCategoriesRow>> GetClientProblemListCategoriesAsync(Int32 clientId) => await GetClientProblemListCategoriesAsync(await connectionFunc(), clientId);
	public async Task<List<GetClientProblemListCategoryRow>> GetClientProblemListCategoryAsync(Int32 clientId, Int32 categoryId) => await GetClientProblemListCategoryAsync(await connectionFunc(), clientId, categoryId);
	public async Task<List<GetClientReferralsRow>> GetClientReferralsAsync(Int32 clientID, Boolean includeMasterClient) => await GetClientReferralsAsync(await connectionFunc(), clientID, includeMasterClient);
	public async Task<List<GetClientServiceAccountRow>> GetClientServiceAccountAsync(Int32 clientID, Int32 serviceAccountID) => await GetClientServiceAccountAsync(await connectionFunc(), clientID, serviceAccountID);
	public async Task<List<GetClientSettingsRow>> GetClientSettingsAsync(Int32 clientID) => await GetClientSettingsAsync(await connectionFunc(), clientID);
	public async Task<List<GetClientSupportInformationRow>> GetClientSupportInformationAsync(Int32 clientID) => await GetClientSupportInformationAsync(await connectionFunc(), clientID);
	public async Task<List<GetClientTagsRow>> GetClientTagsAsync(Int32 clientID) => await GetClientTagsAsync(await connectionFunc(), clientID);
	public async Task<List<GetClientTimeZoneIdentifierRow>> GetClientTimeZoneIdentifierAsync(Int32 clientID) => await GetClientTimeZoneIdentifierAsync(await connectionFunc(), clientID);
	public async Task<List<GetClientTranscriptionASRStylesheetRow>> GetClientTranscriptionASRStylesheetAsync(Int32 clientID, Int32 transcriptionID) => await GetClientTranscriptionASRStylesheetAsync(await connectionFunc(), clientID, transcriptionID);
	public async Task<List<GetClientTranscriptionDictationFilePathByTIDRow>> GetClientTranscriptionDictationFilePathByTIDAsync(Int32 clientID, Int32 transcriptionID, Int32 userId, String userType) => await GetClientTranscriptionDictationFilePathByTIDAsync(await connectionFunc(), clientID, transcriptionID, userId, userType);
	public async Task<List<GetClientTranscriptionDictationFiles2Row>> GetClientTranscriptionDictationFiles2Async(Int32 clientID, Int32 transcriptionID) => await GetClientTranscriptionDictationFiles2Async(await connectionFunc(), clientID, transcriptionID);
	public async Task<List<GetClientTranscriptionDictationPathsRow>> GetClientTranscriptionDictationPathsAsync(Int32 clientID, Int32 transcriptionID) => await GetClientTranscriptionDictationPathsAsync(await connectionFunc(), clientID, transcriptionID);
	public async Task<List<GetClientTranscriptionDictationPaths2Row>> GetClientTranscriptionDictationPaths2Async(Int32 clientID, Int32 transcriptionID) => await GetClientTranscriptionDictationPaths2Async(await connectionFunc(), clientID, transcriptionID);
	public async Task<List<GetClientTranscriptionDictationRecordsRow>> GetClientTranscriptionDictationRecordsAsync(Int32 clientID, Int32 transcriptionID) => await GetClientTranscriptionDictationRecordsAsync(await connectionFunc(), clientID, transcriptionID);
	public async Task<List<GetClientTranscriptionDictationFilePathRow>> GetClientTranscriptionDictationFilePathAsync(Int32 clientID, Int32 transcriptionID) => await GetClientTranscriptionDictationFilePathAsync(await connectionFunc(), clientID, transcriptionID);
	public async Task<List<GetClientTranscriptionDictationsByPatientIDRow>> GetClientTranscriptionDictationsByPatientIDAsync(Int32 clientId, String patientID) => await GetClientTranscriptionDictationsByPatientIDAsync(await connectionFunc(), clientId, patientID);
	public async Task<List<GetClientTranscriptionOptionalVariablesRow>> GetClientTranscriptionOptionalVariablesAsync(Int32 clientID, Int32 transcriptionID) => await GetClientTranscriptionOptionalVariablesAsync(await connectionFunc(), clientID, transcriptionID);
	public async Task<List<GetClientTranscriptionPatientOrdersRow>> GetClientTranscriptionPatientOrdersAsync(Int32 clientID, Int32 transcriptionID) => await GetClientTranscriptionPatientOrdersAsync(await connectionFunc(), clientID, transcriptionID);
	public async Task<List<GetClientTranscriptionTagsRow>> GetClientTranscriptionTagsAsync(Int32 clientID, Int32 transcriptionID) => await GetClientTranscriptionTagsAsync(await connectionFunc(), clientID, transcriptionID);
	public async Task<List<GetClientUserRow>> GetClientUserAsync(Int32 clientID, Int32 userID) => await GetClientUserAsync(await connectionFunc(), clientID, userID);
	public async Task<List<GetClientUserAppointmentRow>> GetClientUserAppointmentAsync(Int32 clientID, Int32 userID, Guid appointmentID) => await GetClientUserAppointmentAsync(await connectionFunc(), clientID, userID, appointmentID);
	public async Task<List<GetClientUserAppointmentsRow>> GetClientUserAppointmentsAsync(Int32 clientID, Int32 userID, DateTime startDate, DateTime endDate, DateTime prevApptDate, DateTime nextApptDate) => await GetClientUserAppointmentsAsync(await connectionFunc(), clientID, userID, startDate, endDate, prevApptDate, nextApptDate);
	public async Task<List<GetClientUserAttestationTemplatesRow>> GetClientUserAttestationTemplatesAsync(Int32 clientID, Int32 userID) => await GetClientUserAttestationTemplatesAsync(await connectionFunc(), clientID, userID);
	public async Task<List<GetClientUserAuthenticatorsRow>> GetClientUserAuthenticatorsAsync(Int32 clientID, Int32 userID) => await GetClientUserAuthenticatorsAsync(await connectionFunc(), clientID, userID);
	public async Task<List<GetClientUserAuthorGroupsRow>> GetClientUserAuthorGroupsAsync(Int32 clientID, Int32 userID) => await GetClientUserAuthorGroupsAsync(await connectionFunc(), clientID, userID);
	public async Task<List<GetClientUserAuthorGroupsEnrolledRow>> GetClientUserAuthorGroupsEnrolledAsync(Int32 clientID, Int32 userID) => await GetClientUserAuthorGroupsEnrolledAsync(await connectionFunc(), clientID, userID);
	public async Task<List<GetClientUserByUsernameAndCodeRow>> GetClientUserByUsernameAndCodeAsync(String clientCode, String username) => await GetClientUserByUsernameAndCodeAsync(await connectionFunc(), clientCode, username);
	public async Task<List<GetClientUserContactInfoRow>> GetClientUserContactInfoAsync(Int32 clientID, Int32 userID) => await GetClientUserContactInfoAsync(await connectionFunc(), clientID, userID);
	public async Task<List<GetClientUserDictationTemplatesRow>> GetClientUserDictationTemplatesAsync(Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Boolean isShadowScribe) => await GetClientUserDictationTemplatesAsync(await connectionFunc(), clientID, userID, documentID, locationID, isShadowScribe);
	public async Task<List<GetClientUserDocumentTemplatesRow>> GetClientUserDocumentTemplatesAsync(Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Boolean isVR) => await GetClientUserDocumentTemplatesAsync(await connectionFunc(), clientID, userID, documentID, locationID, isVR);
	public async Task<List<GetClientUserDocumentTypesRow>> GetClientUserDocumentTypesAsync(Int32 clientID, Int32 userID, Boolean includeInactive) => await GetClientUserDocumentTypesAsync(await connectionFunc(), clientID, userID, includeInactive);
	public async Task<List<GetClientUserEmailVerificationStatusRow>> GetClientUserEmailVerificationStatusAsync(Int32 clientID, Int32 userID) => await GetClientUserEmailVerificationStatusAsync(await connectionFunc(), clientID, userID);
	public async Task<List<GetClientUserEncountersSearchRow>> GetClientUserEncountersSearchAsync(Int32 clientID, Int32 userID, Int32 patientsAppointmentsTypeID, String patientID, String patientName, String orderNumber) => await GetClientUserEncountersSearchAsync(await connectionFunc(), clientID, userID, patientsAppointmentsTypeID, patientID, patientName, orderNumber);
	public async Task<List<GetClientUserFeatureFlagRow>> GetClientUserFeatureFlagAsync(String featureFlagName, Int32 clientID, Int32 userID) => await GetClientUserFeatureFlagAsync(await connectionFunc(), featureFlagName, clientID, userID);
	public async Task<List<GetClientUserFeatureFlag2_Row>> GetClientUserFeatureFlag2Async(String featureFlagName, Int32 clientID, Int32 userID) => await GetClientUserFeatureFlag2Async(await connectionFunc(), featureFlagName, clientID, userID);
	public async Task<List<GetClientUserFoldersRow>> GetClientUserFoldersAsync(Int32 clientID, Int32 userID) => await GetClientUserFoldersAsync(await connectionFunc(), clientID, userID);
	public async Task<List<GetClientUserForPasswordResetRow>> GetClientUserForPasswordResetAsync(String clientName, String userName, String iPAddress, String workstation, String programVersion) => await GetClientUserForPasswordResetAsync(await connectionFunc(), clientName, userName, iPAddress, workstation, programVersion);
	public async Task<List<GetClientUserInpatientWorklistRow>> GetClientUserInpatientWorklistAsync(Int32 clientID, Int32 userID) => await GetClientUserInpatientWorklistAsync(await connectionFunc(), clientID, userID);
	public async Task<List<GetClientUserLinkedAccountsRow>> GetClientUserLinkedAccountsAsync(Int32 sourceClientID, Int32 sourceUserID) => await GetClientUserLinkedAccountsAsync(await connectionFunc(), sourceClientID, sourceUserID);
	public async Task<List<GetClientUserLocationResourcesRow>> GetClientUserLocationResourcesAsync(Int32 clientID, Int32 userID) => await GetClientUserLocationResourcesAsync(await connectionFunc(), clientID, userID);
	public async Task<List<GetClientUserLocationsRow>> GetClientUserLocationsAsync(Int32 clientID, Int32 userID, Boolean includeInactive) => await GetClientUserLocationsAsync(await connectionFunc(), clientID, userID, includeInactive);
	public async Task<List<GetClientUserPasswordHistoryRow>> GetClientUserPasswordHistoryAsync(Int32 clientID, Int32 userID) => await GetClientUserPasswordHistoryAsync(await connectionFunc(), clientID, userID);
	public async Task<List<GetClientUserPasswordLockRow>> GetClientUserPasswordLockAsync(String clientName, String userName) => await GetClientUserPasswordLockAsync(await connectionFunc(), clientName, userName);
	public async Task<List<GetClientUserPreferredDocumentTemplatesRow>> GetClientUserPreferredDocumentTemplatesAsync(Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID) => await GetClientUserPreferredDocumentTemplatesAsync(await connectionFunc(), clientID, userID, documentID, locationID);
	public async Task<List<GetClientUserProxyUsersRow>> GetClientUserProxyUsersAsync(Int32 clientID, Int32 userID) => await GetClientUserProxyUsersAsync(await connectionFunc(), clientID, userID);
	public async Task<List<GetClientUserScheduleResourcesRow>> GetClientUserScheduleResourcesAsync(Int32 clientID, Int32 userID) => await GetClientUserScheduleResourcesAsync(await connectionFunc(), clientID, userID);
	public async Task<List<GetClientUserSettingsRow>> GetClientUserSettingsAsync(Int32 clientID, Int32 userID) => await GetClientUserSettingsAsync(await connectionFunc(), clientID, userID);
	public async Task<List<GetClientUserTimeZoneIdentifierRow>> GetClientUserTimeZoneIdentifierAsync(Int32 clientID, Int32 userID) => await GetClientUserTimeZoneIdentifierAsync(await connectionFunc(), clientID, userID);
	public async Task<List<GetClientUserTranscriptionCommentRow>> GetClientUserTranscriptionCommentAsync(Int32 transcriptionID) => await GetClientUserTranscriptionCommentAsync(await connectionFunc(), transcriptionID);
	public async Task<List<GetClientUserTranscriptionTagsRow>> GetClientUserTranscriptionTagsAsync(Int32 transcriptionID, Boolean active) => await GetClientUserTranscriptionTagsAsync(await connectionFunc(), transcriptionID, active);
	public async Task<List<GetClientUserTranscriptionsByPatientIDRow>> GetClientUserTranscriptionsByPatientIDAsync(Int32 clientID, Int32 userID, String patientID) => await GetClientUserTranscriptionsByPatientIDAsync(await connectionFunc(), clientID, userID, patientID);
	public async Task<List<GetClientUserTranscriptionsFinalRow>> GetClientUserTranscriptionsFinalAsync(Int32 clientID, Int32 userID, Int32 transcriptionID) => await GetClientUserTranscriptionsFinalAsync(await connectionFunc(), clientID, userID, transcriptionID);
	public async Task<List<GetClientUserTranscriptionsFinalLocationBasedRow>> GetClientUserTranscriptionsFinalLocationBasedAsync(Int32 clientID, Int32 userID, Int32 transcriptionID) => await GetClientUserTranscriptionsFinalLocationBasedAsync(await connectionFunc(), clientID, userID, transcriptionID);
	public async Task<List<GetClientUserTranscriptionsFinal2Row>> GetClientUserTranscriptionsFinal2Async(Int32 clientID, Int32 userID, Int32 transcriptionID) => await GetClientUserTranscriptionsFinal2Async(await connectionFunc(), clientID, userID, transcriptionID);
	public async Task<List<GetClientUserTranscriptionsFinal2LocationBasedRow>> GetClientUserTranscriptionsFinal2LocationBasedAsync(Int32 clientID, Int32 userID, Int32 transcriptionID) => await GetClientUserTranscriptionsFinal2LocationBasedAsync(await connectionFunc(), clientID, userID, transcriptionID);
	public async Task<List<GetClientUserTranscriptionsPreliminaryRow>> GetClientUserTranscriptionsPreliminaryAsync(Int32 clientID, Int32 userID, Int32 transcriptionID) => await GetClientUserTranscriptionsPreliminaryAsync(await connectionFunc(), clientID, userID, transcriptionID);
	public async Task<List<GetClientUserTranscriptionsReferralRow>> GetClientUserTranscriptionsReferralAsync(Int32 clientID, Int32 userID, Int32 transcriptionID) => await GetClientUserTranscriptionsReferralAsync(await connectionFunc(), clientID, userID, transcriptionID);
	public async Task<List<GetClientUserTranscriptionsReviewRow>> GetClientUserTranscriptionsReviewAsync(Int32 clientID, Int32 userID, Int32 transcriptionID) => await GetClientUserTranscriptionsReviewAsync(await connectionFunc(), clientID, userID, transcriptionID);
	public async Task<List<GetClientUserTranscriptionsReviewLocationBasedRow>> GetClientUserTranscriptionsReviewLocationBasedAsync(Int32 clientID, Int32 userID, Int32 transcriptionID) => await GetClientUserTranscriptionsReviewLocationBasedAsync(await connectionFunc(), clientID, userID, transcriptionID);
	public async Task<List<GetClientUserTranscriptionsReview2Row>> GetClientUserTranscriptionsReview2Async(Int32 clientID, Int32 userID, Int32 transcriptionID) => await GetClientUserTranscriptionsReview2Async(await connectionFunc(), clientID, userID, transcriptionID);
	public async Task<List<GetClientUserTranscriptionsReview2LocationBasedRow>> GetClientUserTranscriptionsReview2LocationBasedAsync(Int32 clientID, Int32 userID, Int32 transcriptionID) => await GetClientUserTranscriptionsReview2LocationBasedAsync(await connectionFunc(), clientID, userID, transcriptionID);
	public async Task<List<GetClientUserTranscriptionsSearchAllRow>> GetClientUserTranscriptionsSearchAllAsync(Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 clinicianID, Int32 locationID, Int32 documentID, String patientID, String patientName, String receiptCode, String orderNumber, Int32 additionalAuthenticatorID, DateTimeOffset dateDictatedStart, DateTimeOffset dateDictatedEnd, DateTimeOffset appointmentDateStart, DateTimeOffset appointmentDateEnd, Boolean includeLinkedUsers) => await GetClientUserTranscriptionsSearchAllAsync(await connectionFunc(), clientID, userID, transcriptionID, clinicianID, locationID, documentID, patientID, patientName, receiptCode, orderNumber, additionalAuthenticatorID, dateDictatedStart, dateDictatedEnd, appointmentDateStart, appointmentDateEnd, includeLinkedUsers);
	public async Task<List<GetClientUserTranscriptionsSearchAllV2Row>> GetClientUserTranscriptionsSearchAllV2Async(Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 clinicianID, Int32 locationID, Int32 documentID, String patientID, String patientName, String receiptCode, String orderNumber, Int32 additionalAuthenticatorID, DateTimeOffset dateDictatedStart, DateTimeOffset dateDictatedEnd, DateTimeOffset appointmentDateStart, DateTimeOffset appointmentDateEnd, Boolean includeLinkedUsers) => await GetClientUserTranscriptionsSearchAllV2Async(await connectionFunc(), clientID, userID, transcriptionID, clinicianID, locationID, documentID, patientID, patientName, receiptCode, orderNumber, additionalAuthenticatorID, dateDictatedStart, dateDictatedEnd, appointmentDateStart, appointmentDateEnd, includeLinkedUsers);
	public async Task<List<GetClientUserTranscriptionsUndeliveredRow>> GetClientUserTranscriptionsUndeliveredAsync(Int32 clientID, Int32 userID, Int32 transcriptionID) => await GetClientUserTranscriptionsUndeliveredAsync(await connectionFunc(), clientID, userID, transcriptionID);
	public async Task<List<GetClientUserWorklistEncountersRow>> GetClientUserWorklistEncountersAsync(Int32 clientID, Int32 userID) => await GetClientUserWorklistEncountersAsync(await connectionFunc(), clientID, userID);
	public async Task<List<GetClientUsersRow>> GetClientUsersAsync(Int32 clientID) => await GetClientUsersAsync(await connectionFunc(), clientID);
	public async Task<List<GetClientUsersDefaultsRow>> GetClientUsersDefaultsAsync(Int32 clientID) => await GetClientUsersDefaultsAsync(await connectionFunc(), clientID);
	public async Task<List<GetCloudAppRegistrationRow>> GetCloudAppRegistrationAsync(String emdatApplicationCode, Int32 cloudDirectoryID) => await GetCloudAppRegistrationAsync(await connectionFunc(), emdatApplicationCode, cloudDirectoryID);
	public async Task<List<GetCompanyRow>> GetCompanyAsync(Int32 companyID) => await GetCompanyAsync(await connectionFunc(), companyID);
	public async Task<List<GetCompanyClientDocumentTypesProgramsRow>> GetCompanyClientDocumentTypesProgramsAsync(Int32 companyId, Int32 clientID) => await GetCompanyClientDocumentTypesProgramsAsync(await connectionFunc(), companyId, clientID);
	public async Task<List<GetCompanyClientRelationshipRow>> GetCompanyClientRelationshipAsync(Int32 companyID, Int32 clientID) => await GetCompanyClientRelationshipAsync(await connectionFunc(), companyID, clientID);
	public async Task<List<GetCompanyClientsRow>> GetCompanyClientsAsync(Int32 companyID) => await GetCompanyClientsAsync(await connectionFunc(), companyID);
	public async Task<List<GetCompanyDefaultPasswordHashAlgorithmRow>> GetCompanyDefaultPasswordHashAlgorithmAsync(Int32 companyID) => await GetCompanyDefaultPasswordHashAlgorithmAsync(await connectionFunc(), companyID);
	public async Task<List<GetCompanyEmailSettingsRow>> GetCompanyEmailSettingsAsync(Int32 companyID) => await GetCompanyEmailSettingsAsync(await connectionFunc(), companyID);
	public async Task<List<GetCompanyInTouchServerRow>> GetCompanyInTouchServerAsync(Int32 companyID, Int32 serverID) => await GetCompanyInTouchServerAsync(await connectionFunc(), companyID, serverID);
	public async Task<List<GetCompanyInTouchServerClientUsersRow>> GetCompanyInTouchServerClientUsersAsync(Int32 companyID, Int32 serverID, Int32 clientID) => await GetCompanyInTouchServerClientUsersAsync(await connectionFunc(), companyID, serverID, clientID);
	public async Task<List<GetCompanyInTouchServerClientsRow>> GetCompanyInTouchServerClientsAsync(Int32 companyID, Int32 serverID, DateTime lastModifiedDate) => await GetCompanyInTouchServerClientsAsync(await connectionFunc(), companyID, serverID, lastModifiedDate);
	public async Task<List<GetCompanyInTouchServerResetUsersRow>> GetCompanyInTouchServerResetUsersAsync(Int32 companyID, Int32 serverID) => await GetCompanyInTouchServerResetUsersAsync(await connectionFunc(), companyID, serverID);
	public async Task<List<GetCompanyInTouchAccountRow>> GetCompanyInTouchAccountAsync(Int32 companyID, Int32 inTouchAccountID) => await GetCompanyInTouchAccountAsync(await connectionFunc(), companyID, inTouchAccountID);
	public async Task<List<GetCompanyPasswordComplexitySettingsRow>> GetCompanyPasswordComplexitySettingsAsync(Int32 companyID) => await GetCompanyPasswordComplexitySettingsAsync(await connectionFunc(), companyID);
	public async Task<List<GetCompanyQARatingAuthorizationRow>> GetCompanyQARatingAuthorizationAsync(Int32 companyID, Int32 qARatingCompanyID) => await GetCompanyQARatingAuthorizationAsync(await connectionFunc(), companyID, qARatingCompanyID);
	public async Task<List<GetCompanyQARatingCategoriesRow>> GetCompanyQARatingCategoriesAsync(Int32 companyId) => await GetCompanyQARatingCategoriesAsync(await connectionFunc(), companyId);
	public async Task<List<GetCompanyQARatingCategoryRow>> GetCompanyQARatingCategoryAsync(Int32 companyId, Int32 categoryId) => await GetCompanyQARatingCategoryAsync(await connectionFunc(), companyId, categoryId);
	public async Task<List<GetCompanyQARatingProgramRow>> GetCompanyQARatingProgramAsync(Int32 companyId, Int32 programId) => await GetCompanyQARatingProgramAsync(await connectionFunc(), companyId, programId);
	public async Task<List<GetCompanyQARatingProgramRatingRow>> GetCompanyQARatingProgramRatingAsync(Int32 companyId, Int32 programId, Int32 ratingId) => await GetCompanyQARatingProgramRatingAsync(await connectionFunc(), companyId, programId, ratingId);
	public async Task<List<GetCompanyQARatingProgramRatingsRow>> GetCompanyQARatingProgramRatingsAsync(Int32 companyId, Int32 programId) => await GetCompanyQARatingProgramRatingsAsync(await connectionFunc(), companyId, programId);
	public async Task<List<GetCompanyQARatingProgramsRow>> GetCompanyQARatingProgramsAsync(Int32 companyId) => await GetCompanyQARatingProgramsAsync(await connectionFunc(), companyId);
	public async Task<List<GetCompanySupportInformationRow>> GetCompanySupportInformationAsync(Int32 companyID) => await GetCompanySupportInformationAsync(await connectionFunc(), companyID);
	public async Task<List<GetCompanySupportInformationInScribeSupportNotesRow>> GetCompanySupportInformationInScribeSupportNotesAsync(Int32 companyID) => await GetCompanySupportInformationInScribeSupportNotesAsync(await connectionFunc(), companyID);
	public async Task<List<GetCompanyUserRow>> GetCompanyUserAsync(Int32 companyID, Int32 userID) => await GetCompanyUserAsync(await connectionFunc(), companyID, userID);
	public async Task<List<GetCompanyUserByUsernameAndCodeRow>> GetCompanyUserByUsernameAndCodeAsync(String companyCode, String username) => await GetCompanyUserByUsernameAndCodeAsync(await connectionFunc(), companyCode, username);
	public async Task<List<GetCompanyUserClientPoolTranscriptionJobRow>> GetCompanyUserClientPoolTranscriptionJobAsync(Int32 companyID, Int32 companyUserID, Int32 transcriptionID, Boolean enableAvailablePoolJobs) => await GetCompanyUserClientPoolTranscriptionJobAsync(await connectionFunc(), companyID, companyUserID, transcriptionID, enableAvailablePoolJobs);
	public async Task<List<GetCompanyUserClientPoolTranscriptionJobAssociatesRow>> GetCompanyUserClientPoolTranscriptionJobAssociatesAsync(Int32 companyID, Int32 companyUserID, Int32 transcriptionID) => await GetCompanyUserClientPoolTranscriptionJobAssociatesAsync(await connectionFunc(), companyID, companyUserID, transcriptionID);
	public async Task<List<GetCompanyUserClientPoolTranscriptionJobLogEntriesRow>> GetCompanyUserClientPoolTranscriptionJobLogEntriesAsync(Int32 companyID, Int32 companyUserID, Int32 transcriptionID) => await GetCompanyUserClientPoolTranscriptionJobLogEntriesAsync(await connectionFunc(), companyID, companyUserID, transcriptionID);
	public async Task<List<GetCompanyUserClientPoolTranscriptionJobOptionalVariablesRow>> GetCompanyUserClientPoolTranscriptionJobOptionalVariablesAsync(Int32 companyID, Int32 companyUserID, Int32 transcriptionID) => await GetCompanyUserClientPoolTranscriptionJobOptionalVariablesAsync(await connectionFunc(), companyID, companyUserID, transcriptionID);
	public async Task<List<GetCompanyUserClientPoolTranscriptionJobSignaturesRow>> GetCompanyUserClientPoolTranscriptionJobSignaturesAsync(Int32 companyID, Int32 companyUserID, Int32 transcriptionID) => await GetCompanyUserClientPoolTranscriptionJobSignaturesAsync(await connectionFunc(), companyID, companyUserID, transcriptionID);
	public async Task<List<GetCompanyUserClientPoolTranscriptionJobTagsRow>> GetCompanyUserClientPoolTranscriptionJobTagsAsync(Int32 companyID, Int32 companyUserID, Int32 transcriptionID, Boolean active) => await GetCompanyUserClientPoolTranscriptionJobTagsAsync(await connectionFunc(), companyID, companyUserID, transcriptionID, active);
	public async Task<List<GetCompanyUserContactInfoRow>> GetCompanyUserContactInfoAsync(Int32 companyID, Int32 userID) => await GetCompanyUserContactInfoAsync(await connectionFunc(), companyID, userID);
	public async Task<List<GetCompanyUserEmailVerificationStatusRow>> GetCompanyUserEmailVerificationStatusAsync(Int32 companyID, Int32 userID) => await GetCompanyUserEmailVerificationStatusAsync(await connectionFunc(), companyID, userID);
	public async Task<List<GetCompanyUserFeatureFlagRow>> GetCompanyUserFeatureFlagAsync(String featureFlagName, Int32 userID) => await GetCompanyUserFeatureFlagAsync(await connectionFunc(), featureFlagName, userID);
	public async Task<List<GetCompanyUserFeatureFlag2Row>> GetCompanyUserFeatureFlag2Async(String featureFlagName, Int32 companyID, Int32 userID) => await GetCompanyUserFeatureFlag2Async(await connectionFunc(), featureFlagName, companyID, userID);
	public async Task<List<GetCompanyUserMachineClientPoolTranscriptionJobsRow>> GetCompanyUserMachineClientPoolTranscriptionJobsAsync(Int32 companyID, Int32 companyUserID, String machineCode) => await GetCompanyUserMachineClientPoolTranscriptionJobsAsync(await connectionFunc(), companyID, companyUserID, machineCode);
	public async Task<List<GetCompanyUserMachineClientPoolTranscriptionJobsV2Row>> GetCompanyUserMachineClientPoolTranscriptionJobsV2Async(Int32 companyID, Int32 companyUserID, String machineCode) => await GetCompanyUserMachineClientPoolTranscriptionJobsV2Async(await connectionFunc(), companyID, companyUserID, machineCode);
	public async Task<List<GetCompanyUserPasswordHistoryRow>> GetCompanyUserPasswordHistoryAsync(Int32 companyID, Int32 transcriptionistID) => await GetCompanyUserPasswordHistoryAsync(await connectionFunc(), companyID, transcriptionistID);
	public async Task<List<GetCompanyUserPasswordLockRow>> GetCompanyUserPasswordLockAsync(String companyName, String userName) => await GetCompanyUserPasswordLockAsync(await connectionFunc(), companyName, userName);
	public async Task<List<GetCompanyUserQAFeedbackCountsRow>> GetCompanyUserQAFeedbackCountsAsync(Int32 companyID, Int32 userID, DateTime lastDate) => await GetCompanyUserQAFeedbackCountsAsync(await connectionFunc(), companyID, userID, lastDate);
	public async Task<List<GetCompanyUserSettingsRow>> GetCompanyUserSettingsAsync(Int32 companyID, Int32 companyUserID) => await GetCompanyUserSettingsAsync(await connectionFunc(), companyID, companyUserID);
	public async Task<List<GetCompanyUserTranscriptionRow>> GetCompanyUserTranscriptionAsync(Int32 companyID, Int32 companyUserID, Int32 transcriptionID) => await GetCompanyUserTranscriptionAsync(await connectionFunc(), companyID, companyUserID, transcriptionID);
	public async Task<List<GetCompanyUserTranscriptionLogByDateDeliveredRow>> GetCompanyUserTranscriptionLogByDateDeliveredAsync(Int32 companyID, Int32 companyUserID, Int32 clientID, DateTime startDate, DateTime endDate) => await GetCompanyUserTranscriptionLogByDateDeliveredAsync(await connectionFunc(), companyID, companyUserID, clientID, startDate, endDate);
	public async Task<List<GetCompanyUserTranscriptionLogByDateDelivered2Row>> GetCompanyUserTranscriptionLogByDateDelivered2Async(Int32 companyID, Int32 companyUserID, String clientName, DateTime startDate, DateTime endDate) => await GetCompanyUserTranscriptionLogByDateDelivered2Async(await connectionFunc(), companyID, companyUserID, clientName, startDate, endDate);
	public async Task<List<GetCompanyUserTranscriptionLogByDateTranscribedRow>> GetCompanyUserTranscriptionLogByDateTranscribedAsync(Int32 companyID, Int32 companyUserID, Int32 clientID, DateTime startDate, DateTime endDate) => await GetCompanyUserTranscriptionLogByDateTranscribedAsync(await connectionFunc(), companyID, companyUserID, clientID, startDate, endDate);
	public async Task<List<GetCompanyUserTranscriptionLogByDateTranscribed2Row>> GetCompanyUserTranscriptionLogByDateTranscribed2Async(Int32 companyID, Int32 companyUserID, String clientName, DateTime startDate, DateTime endDate) => await GetCompanyUserTranscriptionLogByDateTranscribed2Async(await connectionFunc(), companyID, companyUserID, clientName, startDate, endDate);
	public async Task<List<GetCompanyUserTranscriptionPreviewRow>> GetCompanyUserTranscriptionPreviewAsync(Int32 companyID, Int32 userID, Int32 previewID) => await GetCompanyUserTranscriptionPreviewAsync(await connectionFunc(), companyID, userID, previewID);
	public async Task<List<GetCompanyUserTranscriptionPreviewAssociatesRow>> GetCompanyUserTranscriptionPreviewAssociatesAsync(Int32 companyID, Int32 userID, Int32 previewID) => await GetCompanyUserTranscriptionPreviewAssociatesAsync(await connectionFunc(), companyID, userID, previewID);
	public async Task<List<GetCompanyUserTranscriptionPreviewCountsRow>> GetCompanyUserTranscriptionPreviewCountsAsync(Int32 companyID, Int32 userID, Int32 clientID, String transcriptionText, String demographicsText) => await GetCompanyUserTranscriptionPreviewCountsAsync(await connectionFunc(), companyID, userID, clientID, transcriptionText, demographicsText);
	public async Task<List<GetCompanyUserTranscriptionsPoolRow>> GetCompanyUserTranscriptionsPoolAsync(Int32 transcriptionCompanyId, Int32 transcriptionistID, String machineCode, Boolean includeVR) => await GetCompanyUserTranscriptionsPoolAsync(await connectionFunc(), transcriptionCompanyId, transcriptionistID, machineCode, includeVR);
	public async Task<List<GetCompanyUserTranscriptionsPoolCountRow>> GetCompanyUserTranscriptionsPoolCountAsync(Int32 transcriptionCompanyId, Int32 transcriptionistID, String machineCode) => await GetCompanyUserTranscriptionsPoolCountAsync(await connectionFunc(), transcriptionCompanyId, transcriptionistID, machineCode);
	public async Task<List<GetDefaultHeaderConfigurationRow>> GetDefaultHeaderConfigurationAsync() => await GetDefaultHeaderConfigurationAsync(await connectionFunc());
	public async Task<List<GetDeviceByIdRow>> GetDeviceByIdAsync(Int32 deviceID) => await GetDeviceByIdAsync(await connectionFunc(), deviceID);
	public async Task<List<GetDeviceByIdentifierRow>> GetDeviceByIdentifierAsync(String identifier) => await GetDeviceByIdentifierAsync(await connectionFunc(), identifier);
	public async Task<List<GetDeviceFoldersRow>> GetDeviceFoldersAsync(Int32 deviceID) => await GetDeviceFoldersAsync(await connectionFunc(), deviceID);
	public async Task<List<GetDictationRow>> GetDictationAsync(Int32 clientID, Int32 dictationID) => await GetDictationAsync(await connectionFunc(), clientID, dictationID);
	public async Task<List<GetDictationASRDraftRow>> GetDictationASRDraftAsync(Int32 clientID, Int32 dictationID) => await GetDictationASRDraftAsync(await connectionFunc(), clientID, dictationID);
	public async Task<List<GetDictationFilesRow>> GetDictationFilesAsync(Int32 dictationID) => await GetDictationFilesAsync(await connectionFunc(), dictationID);
	public async Task<List<GetDictationRouteRow>> GetDictationRouteAsync(Int32 dictationRouteID) => await GetDictationRouteAsync(await connectionFunc(), dictationRouteID);
	public async Task<List<GetDictationRouteByDocumentRow>> GetDictationRouteByDocumentAsync(Int32 clientID, Int32 dictatingUserID, Int32 documentTypeID, Int32 dictationFileTypeID) => await GetDictationRouteByDocumentAsync(await connectionFunc(), clientID, dictatingUserID, documentTypeID, dictationFileTypeID);
	public async Task<List<GetDictationRouteFileTypesRow>> GetDictationRouteFileTypesAsync(Int32 dictationRouteID) => await GetDictationRouteFileTypesAsync(await connectionFunc(), dictationRouteID);
	public async Task<List<GetDocumentServiceJobRow>> GetDocumentServiceJobAsync(Int32 clientID, Guid documentServiceJobID) => await GetDocumentServiceJobAsync(await connectionFunc(), clientID, documentServiceJobID);
	public async Task<List<GetDocumentServiceJobAssociatesRow>> GetDocumentServiceJobAssociatesAsync(Int32 clientID, Guid documentServiceJobID) => await GetDocumentServiceJobAssociatesAsync(await connectionFunc(), clientID, documentServiceJobID);
	public async Task<List<GetDocumentServiceJobTagsRow>> GetDocumentServiceJobTagsAsync(Guid documentServiceJobID) => await GetDocumentServiceJobTagsAsync(await connectionFunc(), documentServiceJobID);
	public async Task<List<GetFeatureFlagRow>> GetFeatureFlagAsync(String featureFlagName) => await GetFeatureFlagAsync(await connectionFunc(), featureFlagName);
	public async Task<List<GetFormatTypeRow>> GetFormatTypeAsync(String name) => await GetFormatTypeAsync(await connectionFunc(), name);
	public async Task<List<GetInScribeLoginIPAddressesRow>> GetInScribeLoginIPAddressesAsync(Int64 defaultBatchSize) => await GetInScribeLoginIPAddressesAsync(await connectionFunc(), defaultBatchSize);
	public async Task<List<GetInterpreterByPhoneNumberRow>> GetInterpreterByPhoneNumberAsync(String phoneNumber, Int32 languageID, Int32 clientID) => await GetInterpreterByPhoneNumberAsync(await connectionFunc(), phoneNumber, languageID, clientID);
	public async Task<List<GetInterpreterLanguagesByClientRow>> GetInterpreterLanguagesByClientAsync(Int32 clientID) => await GetInterpreterLanguagesByClientAsync(await connectionFunc(), clientID);
	public async Task<List<GetInterpretersByLanguageRow>> GetInterpretersByLanguageAsync(Int32 languageID, Int32 clientID) => await GetInterpretersByLanguageAsync(await connectionFunc(), languageID, clientID);
	public async Task<List<GetInTouchEmulationRow>> GetInTouchEmulationAsync(Int32 emulationID) => await GetInTouchEmulationAsync(await connectionFunc(), emulationID);
	public async Task<List<GetInTouchEmulationListenPromptsRow>> GetInTouchEmulationListenPromptsAsync(Int32 emulationID) => await GetInTouchEmulationListenPromptsAsync(await connectionFunc(), emulationID);
	public async Task<List<GetInTouchEmulationPromptsRow>> GetInTouchEmulationPromptsAsync(Int32 emulationID) => await GetInTouchEmulationPromptsAsync(await connectionFunc(), emulationID);
	public async Task<List<GetInTouchEmulationsRow>> GetInTouchEmulationsAsync() => await GetInTouchEmulationsAsync(await connectionFunc());
	public async Task<List<GetLinkedTranscriptionsRow>> GetLinkedTranscriptionsAsync(Int32 clientID, Int32 transcriptionID) => await GetLinkedTranscriptionsAsync(await connectionFunc(), clientID, transcriptionID);
	public async Task<List<GetMasterTIDRow>> GetMasterTIDAsync(Int32 clientID, Int32 transcriptionID) => await GetMasterTIDAsync(await connectionFunc(), clientID, transcriptionID);
	public async Task<List<GetPasswordHashAlgorithmRow>> GetPasswordHashAlgorithmAsync(Int32 algorithmID) => await GetPasswordHashAlgorithmAsync(await connectionFunc(), algorithmID);
	public async Task<List<GetPatientRow>> GetPatientAsync(Int32 clientID, String patientID, Boolean useFieldMask) => await GetPatientAsync(await connectionFunc(), clientID, patientID, useFieldMask);
	public async Task<List<GetPatientAppointmentRow>> GetPatientAppointmentAsync(Int32 clientID, Guid appointmentID) => await GetPatientAppointmentAsync(await connectionFunc(), clientID, appointmentID);
	public async Task<List<GetProgramRow>> GetProgramAsync(Int32 programID) => await GetProgramAsync(await connectionFunc(), programID);
	public async Task<List<GetProgramVersionRow>> GetProgramVersionAsync(Int32 programID, Int32 versionID) => await GetProgramVersionAsync(await connectionFunc(), programID, versionID);
	public async Task<List<GetProgramVersionByNumberRow>> GetProgramVersionByNumberAsync(Int32 programID, String versionNumber) => await GetProgramVersionByNumberAsync(await connectionFunc(), programID, versionNumber);
	public async Task<List<GetProgramVersionsRow>> GetProgramVersionsAsync(Int32 programID) => await GetProgramVersionsAsync(await connectionFunc(), programID);
	public async Task<List<GetProgramsRow>> GetProgramsAsync() => await GetProgramsAsync(await connectionFunc());
	public async Task<List<GetReferralTranscriptionAuthorizationByUserIDRow>> GetReferralTranscriptionAuthorizationByUserIDAsync(Int32 clientID, Int32 userID, Int32 transcriptionClientID, Int32 transcriptionID) => await GetReferralTranscriptionAuthorizationByUserIDAsync(await connectionFunc(), clientID, userID, transcriptionClientID, transcriptionID);
	public async Task<List<GetServerTimeZoneIdentifierRow>> GetServerTimeZoneIdentifierAsync() => await GetServerTimeZoneIdentifierAsync(await connectionFunc());
	public async Task<List<GetServerVariableRow>> GetServerVariableAsync(String serverVariable) => await GetServerVariableAsync(await connectionFunc(), serverVariable);
	public async Task<List<GetTranscriptionRow>> GetTranscriptionAsync(Int32 clientID, Int32 transcriptionID) => await GetTranscriptionAsync(await connectionFunc(), clientID, transcriptionID);
	public async Task<List<GetTranscriptionAssociatesRow>> GetTranscriptionAssociatesAsync(Int32 clientID, Int32 transcriptionID) => await GetTranscriptionAssociatesAsync(await connectionFunc(), clientID, transcriptionID);
	public async Task<List<GetTranscriptionAuthorizationByCompanyUserIDRow>> GetTranscriptionAuthorizationByCompanyUserIDAsync(Int32 companyID, Int32 userID, Int32 transcriptionClientID, Int32 transcriptionID) => await GetTranscriptionAuthorizationByCompanyUserIDAsync(await connectionFunc(), companyID, userID, transcriptionClientID, transcriptionID);
	public async Task<List<GetTranscriptionAuthorizationByUserIDRow>> GetTranscriptionAuthorizationByUserIDAsync(Int32 clientID, Int32 userID, Int32 transcriptionClientID, Int32 transcriptionID) => await GetTranscriptionAuthorizationByUserIDAsync(await connectionFunc(), clientID, userID, transcriptionClientID, transcriptionID);
	public async Task<List<GetTranscriptionCommentAuthorizationByUserIDRow>> GetTranscriptionCommentAuthorizationByUserIDAsync(Int32 userID) => await GetTranscriptionCommentAuthorizationByUserIDAsync(await connectionFunc(), userID);
	public async Task<List<GetTranscriptionDictationRow>> GetTranscriptionDictationAsync(Int32 clientID, Int32 transcriptionID) => await GetTranscriptionDictationAsync(await connectionFunc(), clientID, transcriptionID);
	public async Task<List<GetTranscriptionSignaturesRow>> GetTranscriptionSignaturesAsync(Int32 clientID, Int32 transcriptionID) => await GetTranscriptionSignaturesAsync(await connectionFunc(), clientID, transcriptionID);
	public async Task<List<GetTranscriptionValidationRuleDataRow>> GetTranscriptionValidationRuleDataAsync(Int32 clientID, List<IntTableTypeRow> transcriptionIDs) => await GetTranscriptionValidationRuleDataAsync(await connectionFunc(), clientID, transcriptionIDs);
	public async Task<List<GetTranscriptionWorkflowFoldersRow>> GetTranscriptionWorkflowFoldersAsync(Int32 clientID, Int32 transcriptionID) => await GetTranscriptionWorkflowFoldersAsync(await connectionFunc(), clientID, transcriptionID);
	public async Task<List<GetTranscriptionIDByDictationIDRow>> GetTranscriptionIDByDictationIDAsync(Int32 clientID, Int32 dictationID) => await GetTranscriptionIDByDictationIDAsync(await connectionFunc(), clientID, dictationID);
	public async Task<List<GetTranscriptionistClientPoolDefaultsRow>> GetTranscriptionistClientPoolDefaultsAsync(Int32 transcriptionCompanyID, Int32 transcriptionistID, Int32 clientID) => await GetTranscriptionistClientPoolDefaultsAsync(await connectionFunc(), transcriptionCompanyID, transcriptionistID, clientID);
	public async Task<List<GetTranscriptionistClientsRow>> GetTranscriptionistClientsAsync(Int32 companyID, Int32 transcriptionistID) => await GetTranscriptionistClientsAsync(await connectionFunc(), companyID, transcriptionistID);
	public async Task<Int32> GetTranscriptionistWorkstationPoliciesAsync(Int32 companyId, Int32 transcriptionistId) => await GetTranscriptionistWorkstationPoliciesAsync(await connectionFunc(), companyId, transcriptionistId);
	public async Task<List<GetTranscriptionistWorkstationPolicyRow>> GetTranscriptionistWorkstationPolicyAsync(Int32 companyId, Int32 transcriptionistId) => await GetTranscriptionistWorkstationPolicyAsync(await connectionFunc(), companyId, transcriptionistId);
	public async Task<List<GetUserVRStatusByDocumentIDRow>> GetUserVRStatusByDocumentIDAsync(Int32 clientID, Int32 userID, Int32 documentID, Int32 dictationFileTypeID) => await GetUserVRStatusByDocumentIDAsync(await connectionFunc(), clientID, userID, documentID, dictationFileTypeID);
	public async Task<List<GetValidationRuleSnippetsByClientIdRow>> GetValidationRuleSnippetsByClientIdAsync(Int32 clientID) => await GetValidationRuleSnippetsByClientIdAsync(await connectionFunc(), clientID);
	public async Task<List<GetValidationRulesRow>> GetValidationRulesAsync(Int32 clientID) => await GetValidationRulesAsync(await connectionFunc(), clientID);
	public async Task<List<GetVRStatusByDictationIDRow>> GetVRStatusByDictationIDAsync(String clientName, String userDictationID, String audioFileExtension, String documentTypeDictationID) => await GetVRStatusByDictationIDAsync(await connectionFunc(), clientName, userDictationID, audioFileExtension, documentTypeDictationID);
	public async Task<List<GetWorkItemTranscriptionRow>> GetWorkItemTranscriptionAsync(Guid workItemID) => await GetWorkItemTranscriptionAsync(await connectionFunc(), workItemID);
	public async Task<List<GetWorkItemDictationFileNameRow>> GetWorkItemDictationFileNameAsync(Guid workItemID) => await GetWorkItemDictationFileNameAsync(await connectionFunc(), workItemID);
	public async Task<List<GetWorkItemIDByTIDRow>> GetWorkItemIDByTIDAsync(Int32 transcriptionistID, String machineName, Int32 transcriptionID) => await GetWorkItemIDByTIDAsync(await connectionFunc(), transcriptionistID, machineName, transcriptionID);
	public async Task<Int32> InvalidateWorkItemAsync(Int32 transcriptionID, Int32 clientID, Int32 transcriptionistID, String comment) => await InvalidateWorkItemAsync(await connectionFunc(), transcriptionID, clientID, transcriptionistID, comment);
	public async Task<Int32> LogClientUserPasswordResetAttemptAsync(String clientName, String userName, String iPAddress, String workstation, String programVersion, String actionResult) => await LogClientUserPasswordResetAttemptAsync(await connectionFunc(), clientName, userName, iPAddress, workstation, programVersion, actionResult);
	public async Task<Int32> LogDictationPlayedAsync(Int32 clientID, Int32 userID, Int32 dictationID, String userType) => await LogDictationPlayedAsync(await connectionFunc(), clientID, userID, dictationID, userType);
	public async Task<Int32> LogFailedLoginAttemptAsync(String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion, Int32 logEventID) => await LogFailedLoginAttemptAsync(await connectionFunc(), clientName, userName, userPass, iPAddress, workstation, programVersion, logEventID);
	public async Task<Int32> LogFailedTranscriptionistLoginAttemptAsync(String companyCode, String userName, String userPass, String iPAddress, String workstation, String programVersion, Int32 logEventID, String mACAddress) => await LogFailedTranscriptionistLoginAttemptAsync(await connectionFunc(), companyCode, userName, userPass, iPAddress, workstation, programVersion, logEventID, mACAddress);
	public async Task<Int32> LogSuccessfulLoginAttemptAsync(String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion, Int32 logEventID) => await LogSuccessfulLoginAttemptAsync(await connectionFunc(), clientName, userName, userPass, iPAddress, workstation, programVersion, logEventID);
	public async Task<Int32> LogSuccessfulTranscriptionistLoginAttemptAsync(String companyCode, String userName, String userPass, String iPAddress, String workstation, String programVersion, Int32 logEventID, String mACAddress) => await LogSuccessfulTranscriptionistLoginAttemptAsync(await connectionFunc(), companyCode, userName, userPass, iPAddress, workstation, programVersion, logEventID, mACAddress);
	public async Task<List<MapToDocumentTypeIDRow>> MapToDocumentTypeIDAsync(Int32 clientID, String documentType, String dictationID, String clientCode) => await MapToDocumentTypeIDAsync(await connectionFunc(), clientID, documentType, dictationID, clientCode);
	public async Task<List<MapToLocationIDRow>> MapToLocationIDAsync(Int32 clientID, String medicalRecordsLocationName, String dictationID, String clientCode) => await MapToLocationIDAsync(await connectionFunc(), clientID, medicalRecordsLocationName, dictationID, clientCode);
	public async Task<List<MapToUserIDRow>> MapToUserIDAsync(Int32 clientID, String username, String dictationID, String clientCode) => await MapToUserIDAsync(await connectionFunc(), clientID, username, dictationID, clientCode);
	public async Task<Int32> RepoolWorkItemAsync(Int32 transcriptionID, Int32 clientID, Int32 authorID, Int32 documentID, Int32 locationID, Int32 userID) => await RepoolWorkItemAsync(await connectionFunc(), transcriptionID, clientID, authorID, documentID, locationID, userID);
	public async Task<Int32> ResetInScribeUserPasswordAsync(Int32 userID, String newPassword, Int32 companyID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID) => await ResetInScribeUserPasswordAsync(await connectionFunc(), userID, newPassword, companyID, passwordSalt, passwordHash, passwordHashAlgorithmID);
	public async Task<Int32> ResetInScribeUserPassword2Async(Int32 userID, Int32 companyID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID) => await ResetInScribeUserPassword2Async(await connectionFunc(), userID, companyID, passwordSalt, passwordHash, passwordHashAlgorithmID);
	public async Task<List<SearchClientTranscriptionDictationsRow>> SearchClientTranscriptionDictationsAsync(Int32 clientId, String patientID, String accountNumber, String orderNumber, String receiptCode, Int32 documentID, Int32 locationID) => await SearchClientTranscriptionDictationsAsync(await connectionFunc(), clientId, patientID, accountNumber, orderNumber, receiptCode, documentID, locationID);
	public async Task<Int32> SearchCompanyUserTranscriptionsAsync(Int32 companyID, Int32 companyUserID, Int32 clientID, Int32 userID, Int32 documentID, String patientID, String patientName, Int32 transcriptionID) => await SearchCompanyUserTranscriptionsAsync(await connectionFunc(), companyID, companyUserID, clientID, userID, documentID, patientID, patientName, transcriptionID);
	public async Task<Int32> SendClientUserEmailAsync(Int32 clientID, Int32 userID, String subject, String body, Byte format) => await SendClientUserEmailAsync(await connectionFunc(), clientID, userID, subject, body, format);
	public async Task<Int32> SendCompanyUserEmailAsync(Int32 companyID, Int32 userID, String subject, String body, Byte format) => await SendCompanyUserEmailAsync(await connectionFunc(), companyID, userID, subject, body, format);
	public async Task<Int32> SendInScribeUserPasswordEmailAsync(Int32 userID, Int32 companyID, String resetCode) => await SendInScribeUserPasswordEmailAsync(await connectionFunc(), userID, companyID, resetCode);
	public async Task<Int32> UpdateClientPatientProblemListCategoryContentAsync(Int32 clientId, Guid patientGuid, Int32 categoryId, String content) => await UpdateClientPatientProblemListCategoryContentAsync(await connectionFunc(), clientId, patientGuid, categoryId, content);
	public async Task<List<UpdateClientUserPasswordRow>> UpdateClientUserPasswordAsync(Int32 userID, String newPassword, Int32 clientID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID) => await UpdateClientUserPasswordAsync(await connectionFunc(), userID, newPassword, clientID, passwordSalt, passwordHash, passwordHashAlgorithmID);
	public async Task<List<UpdateClientUserPassword2_Row>> UpdateClientUserPassword2Async(Int32 userID, String newPassword, Int32 clientID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID) => await UpdateClientUserPassword2Async(await connectionFunc(), userID, newPassword, clientID, passwordSalt, passwordHash, passwordHashAlgorithmID);
	public async Task<List<UpdateCompanyUserPasswordRow>> UpdateCompanyUserPasswordAsync(Int32 userID, String newPassword, Int32 companyID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID) => await UpdateCompanyUserPasswordAsync(await connectionFunc(), userID, newPassword, companyID, passwordSalt, passwordHash, passwordHashAlgorithmID);
	public async Task<List<UpdateCompanyUserPassword2_Row>> UpdateCompanyUserPassword2Async(Int32 userID, String newPassword, Int32 companyID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID) => await UpdateCompanyUserPassword2Async(await connectionFunc(), userID, newPassword, companyID, passwordSalt, passwordHash, passwordHashAlgorithmID);
	public async Task<Int32> UpdateGeoLocationAsync(Int32 logEventsSecurityID, String geoLocation) => await UpdateGeoLocationAsync(await connectionFunc(), logEventsSecurityID, geoLocation);
	public async Task<Int32> UpdatePasswordLockAsync(String userName, String clientName) => await UpdatePasswordLockAsync(await connectionFunc(), userName, clientName);
	public async Task<Int32> UpdatePasswordLock2Async(String userName, String clientName) => await UpdatePasswordLock2Async(await connectionFunc(), userName, clientName);
	public async Task<Int32> UpdateTranscriptionistPasswordLockAsync(String userName, String companyCode) => await UpdateTranscriptionistPasswordLockAsync(await connectionFunc(), userName, companyCode);

    private static SqlParameter CreateParameter(String parameterName, Object? value, SqlDbType sqlDbType, Int32 size = -1, ParameterDirection direction = ParameterDirection.Input) => new()
    {
        Size = size,
        Direction = direction,
        SqlDbType = sqlDbType,
        ParameterName = parameterName,
        Value = value ?? DBNull.Value,
    };

    private static SqlParameter CreateParameter(String parameterName, Object? value, SqlDbType sqlDbType, String typeName, Int32 size = -1, ParameterDirection direction = ParameterDirection.Input) => new()
    {
        Size = size,
        Direction = direction,
        TypeName = typeName,
        SqlDbType = sqlDbType,
        ParameterName = parameterName,
        Value = value ?? DBNull.Value,
    };

    private static T? GetField<T>(SqlDataReader reader, int ordinal) where T : class => reader.IsDBNull(ordinal) ? null : reader.GetFieldValue<T>(ordinal);
    private static T? GetFieldValue<T>(SqlDataReader reader, int ordinal) where T : struct => reader.IsDBNull(ordinal) ? null : reader.GetFieldValue<T>(ordinal);
    private static T GetNonNullField<T>(SqlDataReader reader, int ordinal) where T : class => reader.IsDBNull(ordinal) ? throw new NullReferenceException() : reader.GetFieldValue<T>(ordinal);
    private static T GetNonNullFieldValue<T>(SqlDataReader reader, int ordinal) where T : struct => reader.IsDBNull(ordinal) ? throw new NullReferenceException() : reader.GetFieldValue<T>(ordinal);

    private static SqlCommand CreateStatement(SqlConnection connection, String text) => new() { Connection = connection, CommandType = CommandType.Text, CommandText = text, };
    private static SqlCommand CreateStoredProcedure(SqlConnection connection, String text) => new() { Connection = connection, CommandType = CommandType.StoredProcedure, CommandText = text, };

	public static Task<List<AddCaseRow>> AddCaseAsync(SqlConnection connection, String callerName, String clientName, String companyCode, String phone, String fax, String eMail, String description, Int32 transcriptionID, String subject, String application) => AddCaseAsync(connection, callerName, clientName, companyCode, phone, fax, eMail, description, transcriptionID, subject, application, CancellationToken.None);
	public static async Task<List<AddCaseRow>> AddCaseAsync(SqlConnection connection, String callerName, String clientName, String companyCode, String phone, String fax, String eMail, String description, Int32 transcriptionID, String subject, String application, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Case");

		cmd.Parameters.Add(CreateParameter("@Caller_Name", callerName, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Company_Code", companyCode, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@Phone", phone, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Fax", fax, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@EMail", eMail, SqlDbType.VarChar, 200));
		cmd.Parameters.Add(CreateParameter("@Description", description, SqlDbType.VarChar, 8000));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Subject", subject, SqlDbType.VarChar, 255));
		cmd.Parameters.Add(CreateParameter("@Application", application, SqlDbType.VarChar, 16));

		var result = new List<AddCaseRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCaseID = reader.GetOrdinal("Case_ID");

			do
			{
				result.Add(new AddCaseRow
				{
					CaseID = GetFieldValue<Guid>(reader, ordCaseID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddCaseAttachmentRow>> AddCaseAttachmentAsync(SqlConnection connection, Guid caseID, String fileName) => AddCaseAttachmentAsync(connection, caseID, fileName, CancellationToken.None);
	public static async Task<List<AddCaseAttachmentRow>> AddCaseAttachmentAsync(SqlConnection connection, Guid caseID, String fileName, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Case_Attachment");

		cmd.Parameters.Add(CreateParameter("@Case_ID", caseID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@File_Name", fileName, SqlDbType.VarChar, 200));

		var result = new List<AddCaseAttachmentRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCaseAttachmentID = reader.GetOrdinal("Case_Attachment_ID");

			do
			{
				result.Add(new AddCaseAttachmentRow
				{
					CaseAttachmentID = GetFieldValue<Int32>(reader, ordCaseAttachmentID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<Int32> AddClientPatientProblemListCategoryAsync(SqlConnection connection, Int32 clientId, Guid patientGuid, Int32 categoryId, String modifiedUser) => AddClientPatientProblemListCategoryAsync(connection, clientId, patientGuid, categoryId, modifiedUser, CancellationToken.None);
	public static async Task<Int32> AddClientPatientProblemListCategoryAsync(SqlConnection connection, Int32 clientId, Guid patientGuid, Int32 categoryId, String modifiedUser, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Client_Patient_ProblemList_Category");

		cmd.Parameters.Add(CreateParameter("@Client_Id", clientId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@patient_Guid", patientGuid, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Category_Id", categoryId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<List<AddClientUserAuthorGroupEnrollmentRow>> AddClientUserAuthorGroupEnrollmentAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 authorGroupID, String modifiedUser, DateTime modifiedDate) => AddClientUserAuthorGroupEnrollmentAsync(connection, clientID, userID, authorGroupID, modifiedUser, modifiedDate, CancellationToken.None);
	public static async Task<List<AddClientUserAuthorGroupEnrollmentRow>> AddClientUserAuthorGroupEnrollmentAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 authorGroupID, String modifiedUser, DateTime modifiedDate, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Client_User_AuthorGroup_Enrollment");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Author_Group_ID", authorGroupID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Modified_Date", modifiedDate, SqlDbType.DateTime, 8));

		var result = new List<AddClientUserAuthorGroupEnrollmentRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordAuthorGroupID = reader.GetOrdinal("Author_Group_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordDescription = reader.GetOrdinal("Description");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordEnrollmentModifiedUser = reader.GetOrdinal("Enrollment_Modified_User");
			int ordEnrollmentModifiedDate = reader.GetOrdinal("Enrollment_Modified_Date");

			do
			{
				result.Add(new AddClientUserAuthorGroupEnrollmentRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					AuthorGroupID = GetNonNullFieldValue<Int32>(reader, ordAuthorGroupID),
					Name = GetNonNullField<String>(reader, ordName),
					Description = GetField<String>(reader, ordDescription),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
					EnrollmentModifiedUser = GetField<String>(reader, ordEnrollmentModifiedUser),
					EnrollmentModifiedDate = GetFieldValue<DateTime>(reader, ordEnrollmentModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddClientUserEmailResetTokenRow>> AddClientUserEmailResetTokenAsync(SqlConnection connection, Int32 clientID, Int32 userID) => AddClientUserEmailResetTokenAsync(connection, clientID, userID, CancellationToken.None);
	public static async Task<List<AddClientUserEmailResetTokenRow>> AddClientUserEmailResetTokenAsync(SqlConnection connection, Int32 clientID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Client_User_Email_Reset_Token");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<AddClientUserEmailResetTokenRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordToken = reader.GetOrdinal("Token");

			do
			{
				result.Add(new AddClientUserEmailResetTokenRow
				{
					Token = GetField<String>(reader, ordToken),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddClientUserEmailTokenRow>> AddClientUserEmailTokenAsync(SqlConnection connection, Int32 clientID, Int32 userID, String email) => AddClientUserEmailTokenAsync(connection, clientID, userID, email, CancellationToken.None);
	public static async Task<List<AddClientUserEmailTokenRow>> AddClientUserEmailTokenAsync(SqlConnection connection, Int32 clientID, Int32 userID, String email, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Client_User_Email_Token");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Email", email, SqlDbType.VarChar, 100));

		var result = new List<AddClientUserEmailTokenRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordInstance = reader.GetOrdinal("Instance");
			int ordToken = reader.GetOrdinal("Token");

			do
			{
				result.Add(new AddClientUserEmailTokenRow
				{
					Instance = GetFieldValue<Guid>(reader, ordInstance),
					Token = GetField<String>(reader, ordToken),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<Int32> AddClientUserInpatientWorklistVisitAsync(SqlConnection connection, Int32 clientID, Int32 userID, Guid visitID, Int32 associateTypeID, String modifiedUser, DateTime modifiedDate) => AddClientUserInpatientWorklistVisitAsync(connection, clientID, userID, visitID, associateTypeID, modifiedUser, modifiedDate, CancellationToken.None);
	public static async Task<Int32> AddClientUserInpatientWorklistVisitAsync(SqlConnection connection, Int32 clientID, Int32 userID, Guid visitID, Int32 associateTypeID, String modifiedUser, DateTime modifiedDate, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Client_User_InpatientWorklist_Visit");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Visit_ID", visitID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Associate_Type_ID", associateTypeID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Modified_Date", modifiedDate, SqlDbType.DateTime, 8));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<List<AddClientUserLinkedAccountRow>> AddClientUserLinkedAccountAsync(SqlConnection connection, Int32 sourceClientID, Int32 sourceUserID, Int32 targetClientID, Int32 targetUserID, String modifiedUser, DateTime modifiedDate) => AddClientUserLinkedAccountAsync(connection, sourceClientID, sourceUserID, targetClientID, targetUserID, modifiedUser, modifiedDate, CancellationToken.None);
	public static async Task<List<AddClientUserLinkedAccountRow>> AddClientUserLinkedAccountAsync(SqlConnection connection, Int32 sourceClientID, Int32 sourceUserID, Int32 targetClientID, Int32 targetUserID, String modifiedUser, DateTime modifiedDate, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Client_User_LinkedAccount");

		cmd.Parameters.Add(CreateParameter("@Source_Client_ID", sourceClientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Source_User_ID", sourceUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Target_Client_ID", targetClientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Target_User_ID", targetUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Modified_Date", modifiedDate, SqlDbType.DateTime, 8));

		var result = new List<AddClientUserLinkedAccountRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordSourceClientID = reader.GetOrdinal("Source_Client_ID");
			int ordSourceUserID = reader.GetOrdinal("Source_User_ID");
			int ordTargetClientID = reader.GetOrdinal("Target_Client_ID");
			int ordTargetUserID = reader.GetOrdinal("Target_User_ID");
			int ordTargetClientName = reader.GetOrdinal("Target_Client_Name");
			int ordTargetUserName = reader.GetOrdinal("Target_User_Name");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");

			do
			{
				result.Add(new AddClientUserLinkedAccountRow
				{
					SourceClientID = GetNonNullFieldValue<Int32>(reader, ordSourceClientID),
					SourceUserID = GetNonNullFieldValue<Int32>(reader, ordSourceUserID),
					TargetClientID = GetNonNullFieldValue<Int32>(reader, ordTargetClientID),
					TargetUserID = GetNonNullFieldValue<Int32>(reader, ordTargetUserID),
					TargetClientName = GetField<String>(reader, ordTargetClientName),
					TargetUserName = GetField<String>(reader, ordTargetUserName),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddClientUserTranscriptionLogRow>> AddClientUserTranscriptionLogAsync(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 userID, Int32 actionID) => AddClientUserTranscriptionLogAsync(connection, transcriptionID, clientID, userID, actionID, CancellationToken.None);
	public static async Task<List<AddClientUserTranscriptionLogRow>> AddClientUserTranscriptionLogAsync(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 userID, Int32 actionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Client_User_Transcription_Log");

		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Action_ID", actionID, SqlDbType.Int, 4));

		var result = new List<AddClientUserTranscriptionLogRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordLogID = reader.GetOrdinal("Log_ID");

			do
			{
				result.Add(new AddClientUserTranscriptionLogRow
				{
					LogID = GetFieldValue<Int64>(reader, ordLogID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddClientUserWorklistEncounterRow>> AddClientUserWorklistEncounterAsync(SqlConnection connection, Int32 clientID, Int32 userID, Guid encounterID, Int32 associateTypeID, String modifiedUser, DateTime modifiedDate) => AddClientUserWorklistEncounterAsync(connection, clientID, userID, encounterID, associateTypeID, modifiedUser, modifiedDate, CancellationToken.None);
	public static async Task<List<AddClientUserWorklistEncounterRow>> AddClientUserWorklistEncounterAsync(SqlConnection connection, Int32 clientID, Int32 userID, Guid encounterID, Int32 associateTypeID, String modifiedUser, DateTime modifiedDate, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Client_User_Worklist_Encounter");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Encounter_ID", encounterID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Associate_Type_ID", associateTypeID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Modified_Date", modifiedDate, SqlDbType.DateTime, 8));

		var result = new List<AddClientUserWorklistEncounterRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordPhysician = reader.GetOrdinal("Physician");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordApptUserField1 = reader.GetOrdinal("Appt_User_Field_1");
			int ordApptUserField2 = reader.GetOrdinal("Appt_User_Field_2");
			int ordApptUserField3 = reader.GetOrdinal("Appt_User_Field_3");
			int ordApptUserField4 = reader.GetOrdinal("Appt_User_Field_4");
			int ordApptUserField5 = reader.GetOrdinal("Appt_User_Field_5");
			int ordAppointmentClientCode = reader.GetOrdinal("Appointment_Client_Code");
			int ordPatientsAppointmentsTypeID = reader.GetOrdinal("Patients_Appointments_Type_ID");
			int ordAdmitDate = reader.GetOrdinal("Admit_Date");
			int ordDischargeDate = reader.GetOrdinal("Discharge_Date");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordAppointmentID = reader.GetOrdinal("Appointment_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordPatientFullName = reader.GetOrdinal("Patient_Full_Name");
			int ordPatientNameFirst = reader.GetOrdinal("Patient_Name_First");
			int ordPatientNameLast = reader.GetOrdinal("Patient_Name_Last");
			int ordPatientNameMiddle = reader.GetOrdinal("Patient_Name_Middle");
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");

			do
			{
				result.Add(new AddClientUserWorklistEncounterRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					PatientID = GetNonNullField<String>(reader, ordPatientID),
					LocationID = GetNonNullFieldValue<Int32>(reader, ordLocationID),
					Physician = GetNonNullField<String>(reader, ordPhysician),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					DictationID = GetField<String>(reader, ordDictationID),
					ApptUserField1 = GetField<String>(reader, ordApptUserField1),
					ApptUserField2 = GetField<String>(reader, ordApptUserField2),
					ApptUserField3 = GetField<String>(reader, ordApptUserField3),
					ApptUserField4 = GetField<String>(reader, ordApptUserField4),
					ApptUserField5 = GetField<String>(reader, ordApptUserField5),
					AppointmentClientCode = GetField<String>(reader, ordAppointmentClientCode),
					PatientsAppointmentsTypeID = GetFieldValue<Int32>(reader, ordPatientsAppointmentsTypeID),
					AdmitDate = GetFieldValue<DateTime>(reader, ordAdmitDate),
					DischargeDate = GetFieldValue<DateTime>(reader, ordDischargeDate),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					AppointmentID = GetNonNullFieldValue<Guid>(reader, ordAppointmentID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					PatientFullName = GetField<String>(reader, ordPatientFullName),
					PatientNameFirst = GetField<String>(reader, ordPatientNameFirst),
					PatientNameLast = GetField<String>(reader, ordPatientNameLast),
					PatientNameMiddle = GetField<String>(reader, ordPatientNameMiddle),
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddCompanyUserEmailTokenRow>> AddCompanyUserEmailTokenAsync(SqlConnection connection, Int32 companyID, Int32 transcriptionistID, String email) => AddCompanyUserEmailTokenAsync(connection, companyID, transcriptionistID, email, CancellationToken.None);
	public static async Task<List<AddCompanyUserEmailTokenRow>> AddCompanyUserEmailTokenAsync(SqlConnection connection, Int32 companyID, Int32 transcriptionistID, String email, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Company_User_Email_Token");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Email", email, SqlDbType.VarChar, 100));

		var result = new List<AddCompanyUserEmailTokenRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordInstance = reader.GetOrdinal("Instance");
			int ordToken = reader.GetOrdinal("Token");

			do
			{
				result.Add(new AddCompanyUserEmailTokenRow
				{
					Instance = GetFieldValue<Guid>(reader, ordInstance),
					Token = GetField<String>(reader, ordToken),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddCompanyUserTranscriptionLogRow>> AddCompanyUserTranscriptionLogAsync(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 userID, Int32 actionID) => AddCompanyUserTranscriptionLogAsync(connection, transcriptionID, clientID, userID, actionID, CancellationToken.None);
	public static async Task<List<AddCompanyUserTranscriptionLogRow>> AddCompanyUserTranscriptionLogAsync(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 userID, Int32 actionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Company_User_Transcription_Log");

		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Action_ID", actionID, SqlDbType.Int, 4));

		var result = new List<AddCompanyUserTranscriptionLogRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordLogID = reader.GetOrdinal("Log_ID");

			do
			{
				result.Add(new AddCompanyUserTranscriptionLogRow
				{
					LogID = GetFieldValue<Int64>(reader, ordLogID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddDeviceRow>> AddDeviceAsync(SqlConnection connection, Int32 deviceAPITypeID, String identifier, Boolean showDictationLog, Boolean printDictationLog, String modifiedUser, String extendedConfigurationInfo) => AddDeviceAsync(connection, deviceAPITypeID, identifier, showDictationLog, printDictationLog, modifiedUser, extendedConfigurationInfo, CancellationToken.None);
	public static async Task<List<AddDeviceRow>> AddDeviceAsync(SqlConnection connection, Int32 deviceAPITypeID, String identifier, Boolean showDictationLog, Boolean printDictationLog, String modifiedUser, String extendedConfigurationInfo, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Device");

		cmd.Parameters.Add(CreateParameter("@Device_API_Type_ID", deviceAPITypeID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Identifier", identifier, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Show_Dictation_Log", showDictationLog, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Print_Dictation_Log", printDictationLog, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Extended_Configuration_Info", extendedConfigurationInfo, SqlDbType.Xml));

		var result = new List<AddDeviceRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDeviceID = reader.GetOrdinal("Device_ID");

			do
			{
				result.Add(new AddDeviceRow
				{
					DeviceID = GetNonNullFieldValue<Int32>(reader, ordDeviceID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddDeviceFolderRow>> AddDeviceFolderAsync(SqlConnection connection, Int32 parentDeviceFolderID, Int32 deviceID, String folder, String modifiedUser, String displayName) => AddDeviceFolderAsync(connection, parentDeviceFolderID, deviceID, folder, modifiedUser, displayName, CancellationToken.None);
	public static async Task<List<AddDeviceFolderRow>> AddDeviceFolderAsync(SqlConnection connection, Int32 parentDeviceFolderID, Int32 deviceID, String folder, String modifiedUser, String displayName, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Device_Folder");

		cmd.Parameters.Add(CreateParameter("@Parent_Device_Folder_ID", parentDeviceFolderID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Device_ID", deviceID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Folder", folder, SqlDbType.VarChar, 500));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Display_Name", displayName, SqlDbType.VarChar, 50));

		var result = new List<AddDeviceFolderRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDeviceFolderID = reader.GetOrdinal("Device_Folder_ID");

			do
			{
				result.Add(new AddDeviceFolderRow
				{
					DeviceFolderID = GetNonNullFieldValue<Int32>(reader, ordDeviceFolderID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddDeviceFolderOptionRow>> AddDeviceFolderOptionAsync(SqlConnection connection, Int32 deviceID, Int32 deviceFolderID, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Boolean isStat, String modifiedUser) => AddDeviceFolderOptionAsync(connection, deviceID, deviceFolderID, clientID, userID, documentID, locationID, isStat, modifiedUser, CancellationToken.None);
	public static async Task<List<AddDeviceFolderOptionRow>> AddDeviceFolderOptionAsync(SqlConnection connection, Int32 deviceID, Int32 deviceFolderID, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Boolean isStat, String modifiedUser, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Device_Folder_Option");

		cmd.Parameters.Add(CreateParameter("@Device_ID", deviceID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Device_Folder_ID", deviceFolderID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Is_Stat", isStat, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));

		var result = new List<AddDeviceFolderOptionRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDeviceFolderOptionID = reader.GetOrdinal("Device_Folder_Option_ID");

			do
			{
				result.Add(new AddDeviceFolderOptionRow
				{
					DeviceFolderOptionID = GetNonNullFieldValue<Int32>(reader, ordDeviceFolderOptionID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddDictationRow>> AddDictationAsync(SqlConnection connection, Int32 dictationRouteID, Int32 dictationSourceID, String sourceMachineName, Boolean isStat, Int32 length, DateTimeOffset dateDictated, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Guid appointmentID, String patientID, DateTime appointmentDate, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String sourceFilePath, String inTouchFileRateID, String accountNumber, String comment, List<UniqueidentifierTableTypeRow> orders) => AddDictationAsync(connection, dictationRouteID, dictationSourceID, sourceMachineName, isStat, length, dateDictated, clientID, userID, documentID, locationID, appointmentID, patientID, appointmentDate, orderNumber, userField1, userField2, userField3, userField4, userField5, sourceFilePath, inTouchFileRateID, accountNumber, comment, orders, CancellationToken.None);
	public static async Task<List<AddDictationRow>> AddDictationAsync(SqlConnection connection, Int32 dictationRouteID, Int32 dictationSourceID, String sourceMachineName, Boolean isStat, Int32 length, DateTimeOffset dateDictated, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Guid appointmentID, String patientID, DateTime appointmentDate, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String sourceFilePath, String inTouchFileRateID, String accountNumber, String comment, List<UniqueidentifierTableTypeRow> orders, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Dictation");

		cmd.Parameters.Add(CreateParameter("@Dictation_Route_ID", dictationRouteID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictation_Source_ID", dictationSourceID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Source_Machine_Name", sourceMachineName, SqlDbType.VarChar, 256));
		cmd.Parameters.Add(CreateParameter("@Is_Stat", isStat, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Length", length, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Date_Dictated", dateDictated, SqlDbType.DateTimeOffset, 10));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Appointment_ID", appointmentID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Appointment_Date", appointmentDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Order_Number", orderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@User_Field_1", userField1, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_2", userField2, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_3", userField3, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_4", userField4, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_5", userField5, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Source_File_Path", sourceFilePath, SqlDbType.VarChar, 1000));
		cmd.Parameters.Add(CreateParameter("@InTouch_FileRate_ID", inTouchFileRateID, SqlDbType.VarChar, 1));
		cmd.Parameters.Add(CreateParameter("@Account_Number", accountNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Comment", comment, SqlDbType.VarChar, 1000));
		cmd.Parameters.Add(CreateParameter("@Orders", new UniqueidentifierTableTypeRowDataTable(orders), SqlDbType.Structured, "dbo.uniqueidentifier_TableType"));

		var result = new List<AddDictationRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDictationID = reader.GetOrdinal("Dictation_ID");

			do
			{
				result.Add(new AddDictationRow
				{
					DictationID = GetFieldValue<Int32>(reader, ordDictationID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddDictationFileRow>> AddDictationFileAsync(SqlConnection connection, Int32 dictationID, Int32 dictationFileTypeID, String path, Int32 samplesPerSecond) => AddDictationFileAsync(connection, dictationID, dictationFileTypeID, path, samplesPerSecond, CancellationToken.None);
	public static async Task<List<AddDictationFileRow>> AddDictationFileAsync(SqlConnection connection, Int32 dictationID, Int32 dictationFileTypeID, String path, Int32 samplesPerSecond, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Dictation_File");

		cmd.Parameters.Add(CreateParameter("@Dictation_ID", dictationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictation_File_Type_ID", dictationFileTypeID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Path", path, SqlDbType.VarChar, 1000));
		cmd.Parameters.Add(CreateParameter("@Samples_Per_Second", samplesPerSecond, SqlDbType.Int, 4));

		var result = new List<AddDictationFileRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordDictationFileTypeID = reader.GetOrdinal("Dictation_File_Type_ID");
			int ordPath = reader.GetOrdinal("Path");
			int ordAction = reader.GetOrdinal("Action");

			do
			{
				result.Add(new AddDictationFileRow
				{
					DictationID = GetNonNullFieldValue<Int32>(reader, ordDictationID),
					DictationFileTypeID = GetNonNullFieldValue<Int32>(reader, ordDictationFileTypeID),
					Path = GetNonNullField<String>(reader, ordPath),
					Action = GetNonNullField<String>(reader, ordAction),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddDocumentServiceJobRow>> AddDocumentServiceJobAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Guid appointmentID, String receiptCode, Boolean isMarkedForClientReview, String comment, List<TagsTableRow> tagsTable) => AddDocumentServiceJobAsync(connection, clientID, userID, documentID, locationID, appointmentID, receiptCode, isMarkedForClientReview, comment, tagsTable, CancellationToken.None);
	public static async Task<List<AddDocumentServiceJobRow>> AddDocumentServiceJobAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Guid appointmentID, String receiptCode, Boolean isMarkedForClientReview, String comment, List<TagsTableRow> tagsTable, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Document_Service_Job");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Appointment_ID", appointmentID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Receipt_Code", receiptCode, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@Is_Marked_For_Client_Review", isMarkedForClientReview, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Comment", comment, SqlDbType.VarChar, 1000));
		cmd.Parameters.Add(CreateParameter("@Tags_Table", new TagsTableRowDataTable(tagsTable), SqlDbType.Structured, "dbo.TagsTable"));

		var result = new List<AddDocumentServiceJobRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordNewDocumentServiceJobID = reader.GetOrdinal("New_Document_Service_Job_ID");

			do
			{
				result.Add(new AddDocumentServiceJobRow
				{
					NewDocumentServiceJobID = GetFieldValue<Guid>(reader, ordNewDocumentServiceJobID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddDocumentServiceJobAssociateRow>> AddDocumentServiceJobAssociateAsync(SqlConnection connection, Int32 clientID, Guid documentServiceJobID, String modifiedUser, DateTime modifiedDate, Int32 associateID, String associateClientCode, String associateSpecialty, String associateGreeting, String associateBusinessName, String associatePrefix, String associateNameFirst, String associateNameMiddle, String associateNameLast, String associateSuffix, String associateAddress1, String associateAddress2, String associateAddress3, String associateCity, String associateState, String associateZipCode, String associateCompany, String associatePhone, String associateFax, String associateEMail, Int32 referralLocationID, Int32 referralUserID) => AddDocumentServiceJobAssociateAsync(connection, clientID, documentServiceJobID, modifiedUser, modifiedDate, associateID, associateClientCode, associateSpecialty, associateGreeting, associateBusinessName, associatePrefix, associateNameFirst, associateNameMiddle, associateNameLast, associateSuffix, associateAddress1, associateAddress2, associateAddress3, associateCity, associateState, associateZipCode, associateCompany, associatePhone, associateFax, associateEMail, referralLocationID, referralUserID, CancellationToken.None);
	public static async Task<List<AddDocumentServiceJobAssociateRow>> AddDocumentServiceJobAssociateAsync(SqlConnection connection, Int32 clientID, Guid documentServiceJobID, String modifiedUser, DateTime modifiedDate, Int32 associateID, String associateClientCode, String associateSpecialty, String associateGreeting, String associateBusinessName, String associatePrefix, String associateNameFirst, String associateNameMiddle, String associateNameLast, String associateSuffix, String associateAddress1, String associateAddress2, String associateAddress3, String associateCity, String associateState, String associateZipCode, String associateCompany, String associatePhone, String associateFax, String associateEMail, Int32 referralLocationID, Int32 referralUserID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Document_Service_Job_Associate");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_Service_Job_ID", documentServiceJobID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Modified_Date", modifiedDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Associate_ID", associateID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Associate_Client_Code", associateClientCode, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Specialty", associateSpecialty, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Associate_Greeting", associateGreeting, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Business_Name", associateBusinessName, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Prefix", associatePrefix, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@Associate_Name_First", associateNameFirst, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Associate_Name_Middle", associateNameMiddle, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Associate_Name_Last", associateNameLast, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Associate_Suffix", associateSuffix, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Address_1", associateAddress1, SqlDbType.VarChar, 300));
		cmd.Parameters.Add(CreateParameter("@Associate_Address_2", associateAddress2, SqlDbType.VarChar, 300));
		cmd.Parameters.Add(CreateParameter("@Associate_Address_3", associateAddress3, SqlDbType.VarChar, 300));
		cmd.Parameters.Add(CreateParameter("@Associate_City", associateCity, SqlDbType.VarChar, 300));
		cmd.Parameters.Add(CreateParameter("@Associate_State", associateState, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Zip_Code", associateZipCode, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Company", associateCompany, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Associate_Phone", associatePhone, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Fax", associateFax, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_EMail", associateEMail, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Referral_Location_ID", referralLocationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Referral_User_ID", referralUserID, SqlDbType.Int, 4));

		var result = new List<AddDocumentServiceJobAssociateRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordDocumentServiceJobID = reader.GetOrdinal("Document_Service_Job_ID");
			int ordDocumentServiceJobAssociateID = reader.GetOrdinal("Document_Service_Job_Associate_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordAssociateID = reader.GetOrdinal("Associate_ID");
			int ordAssociateClientCode = reader.GetOrdinal("Associate_Client_Code");
			int ordAssociateSpecialty = reader.GetOrdinal("Associate_Specialty");
			int ordAssociateGreeting = reader.GetOrdinal("Associate_Greeting");
			int ordAssociateBusinessName = reader.GetOrdinal("Associate_Business_Name");
			int ordAssociatePrefix = reader.GetOrdinal("Associate_Prefix");
			int ordAssociateNameFirst = reader.GetOrdinal("Associate_Name_First");
			int ordAssociateNameMiddle = reader.GetOrdinal("Associate_Name_Middle");
			int ordAssociateNameLast = reader.GetOrdinal("Associate_Name_Last");
			int ordAssociateSuffix = reader.GetOrdinal("Associate_Suffix");
			int ordAssociateAddress1 = reader.GetOrdinal("Associate_Address_1");
			int ordAssociateAddress2 = reader.GetOrdinal("Associate_Address_2");
			int ordAssociateAddress3 = reader.GetOrdinal("Associate_Address_3");
			int ordAssociateCity = reader.GetOrdinal("Associate_City");
			int ordAssociateState = reader.GetOrdinal("Associate_State");
			int ordAssociateZipCode = reader.GetOrdinal("Associate_Zip_Code");
			int ordAssociateCompany = reader.GetOrdinal("Associate_Company");
			int ordAssociatePhone = reader.GetOrdinal("Associate_Phone");
			int ordAssociateFax = reader.GetOrdinal("Associate_Fax");
			int ordAssociateEMail = reader.GetOrdinal("Associate_EMail");
			int ordReferralLocationID = reader.GetOrdinal("Referral_Location_ID");
			int ordReferralUserID = reader.GetOrdinal("Referral_User_ID");

			do
			{
				result.Add(new AddDocumentServiceJobAssociateRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					DocumentServiceJobID = GetNonNullFieldValue<Guid>(reader, ordDocumentServiceJobID),
					DocumentServiceJobAssociateID = GetNonNullFieldValue<Guid>(reader, ordDocumentServiceJobAssociateID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					AssociateID = GetFieldValue<Int32>(reader, ordAssociateID),
					AssociateClientCode = GetNonNullField<String>(reader, ordAssociateClientCode),
					AssociateSpecialty = GetField<String>(reader, ordAssociateSpecialty),
					AssociateGreeting = GetField<String>(reader, ordAssociateGreeting),
					AssociateBusinessName = GetField<String>(reader, ordAssociateBusinessName),
					AssociatePrefix = GetField<String>(reader, ordAssociatePrefix),
					AssociateNameFirst = GetField<String>(reader, ordAssociateNameFirst),
					AssociateNameMiddle = GetField<String>(reader, ordAssociateNameMiddle),
					AssociateNameLast = GetField<String>(reader, ordAssociateNameLast),
					AssociateSuffix = GetField<String>(reader, ordAssociateSuffix),
					AssociateAddress1 = GetField<String>(reader, ordAssociateAddress1),
					AssociateAddress2 = GetField<String>(reader, ordAssociateAddress2),
					AssociateAddress3 = GetField<String>(reader, ordAssociateAddress3),
					AssociateCity = GetField<String>(reader, ordAssociateCity),
					AssociateState = GetField<String>(reader, ordAssociateState),
					AssociateZipCode = GetField<String>(reader, ordAssociateZipCode),
					AssociateCompany = GetField<String>(reader, ordAssociateCompany),
					AssociatePhone = GetField<String>(reader, ordAssociatePhone),
					AssociateFax = GetField<String>(reader, ordAssociateFax),
					AssociateEMail = GetField<String>(reader, ordAssociateEMail),
					ReferralLocationID = GetFieldValue<Int32>(reader, ordReferralLocationID),
					ReferralUserID = GetFieldValue<Int32>(reader, ordReferralUserID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddDocumentServiceJobAssociate2_Row>> AddDocumentServiceJobAssociate2Async(SqlConnection connection, Int32 clientID, Guid documentServiceJobID, String modifiedUser, DateTime modifiedDate, Int32 associateID, String associateClientCode, String associateSpecialty, String associateGreeting, String associateBusinessName, String associatePrefix, String associateNameFirst, String associateNameMiddle, String associateNameLast, String associateSuffix, String associateAddress1, String associateAddress2, String associateAddress3, String associateCity, String associateState, String associateZipCode, String associateCompany, String associatePhone, String associateFax, String associateEMail, Int32 referralLocationID, Int32 referralUserID) => AddDocumentServiceJobAssociate2Async(connection, clientID, documentServiceJobID, modifiedUser, modifiedDate, associateID, associateClientCode, associateSpecialty, associateGreeting, associateBusinessName, associatePrefix, associateNameFirst, associateNameMiddle, associateNameLast, associateSuffix, associateAddress1, associateAddress2, associateAddress3, associateCity, associateState, associateZipCode, associateCompany, associatePhone, associateFax, associateEMail, referralLocationID, referralUserID, CancellationToken.None);
	public static async Task<List<AddDocumentServiceJobAssociate2_Row>> AddDocumentServiceJobAssociate2Async(SqlConnection connection, Int32 clientID, Guid documentServiceJobID, String modifiedUser, DateTime modifiedDate, Int32 associateID, String associateClientCode, String associateSpecialty, String associateGreeting, String associateBusinessName, String associatePrefix, String associateNameFirst, String associateNameMiddle, String associateNameLast, String associateSuffix, String associateAddress1, String associateAddress2, String associateAddress3, String associateCity, String associateState, String associateZipCode, String associateCompany, String associatePhone, String associateFax, String associateEMail, Int32 referralLocationID, Int32 referralUserID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Document_Service_Job_Associate_2");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_Service_Job_ID", documentServiceJobID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Modified_Date", modifiedDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Associate_ID", associateID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Associate_Client_Code", associateClientCode, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Associate_Specialty", associateSpecialty, SqlDbType.VarChar, 30));
		cmd.Parameters.Add(CreateParameter("@Associate_Greeting", associateGreeting, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Business_Name", associateBusinessName, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Prefix", associatePrefix, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@Associate_Name_First", associateNameFirst, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Associate_Name_Middle", associateNameMiddle, SqlDbType.VarChar, 1));
		cmd.Parameters.Add(CreateParameter("@Associate_Name_Last", associateNameLast, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Associate_Suffix", associateSuffix, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@Associate_Address_1", associateAddress1, SqlDbType.VarChar, 300));
		cmd.Parameters.Add(CreateParameter("@Associate_Address_2", associateAddress2, SqlDbType.VarChar, 300));
		cmd.Parameters.Add(CreateParameter("@Associate_Address_3", associateAddress3, SqlDbType.VarChar, 300));
		cmd.Parameters.Add(CreateParameter("@Associate_City", associateCity, SqlDbType.VarChar, 300));
		cmd.Parameters.Add(CreateParameter("@Associate_State", associateState, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Zip_Code", associateZipCode, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Company", associateCompany, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Associate_Phone", associatePhone, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Fax", associateFax, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_EMail", associateEMail, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Referral_Location_ID", referralLocationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Referral_User_ID", referralUserID, SqlDbType.Int, 4));

		var result = new List<AddDocumentServiceJobAssociate2_Row>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordDocumentServiceJobID = reader.GetOrdinal("Document_Service_Job_ID");
			int ordDocumentServiceJobAssociateID = reader.GetOrdinal("Document_Service_Job_Associate_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordAssociateID = reader.GetOrdinal("Associate_ID");
			int ordAssociateClientCode = reader.GetOrdinal("Associate_Client_Code");
			int ordAssociateSpecialty = reader.GetOrdinal("Associate_Specialty");
			int ordAssociateGreeting = reader.GetOrdinal("Associate_Greeting");
			int ordAssociateBusinessName = reader.GetOrdinal("Associate_Business_Name");
			int ordAssociatePrefix = reader.GetOrdinal("Associate_Prefix");
			int ordAssociateNameFirst = reader.GetOrdinal("Associate_Name_First");
			int ordAssociateNameMiddle = reader.GetOrdinal("Associate_Name_Middle");
			int ordAssociateNameLast = reader.GetOrdinal("Associate_Name_Last");
			int ordAssociateSuffix = reader.GetOrdinal("Associate_Suffix");
			int ordAssociateAddress1 = reader.GetOrdinal("Associate_Address_1");
			int ordAssociateAddress2 = reader.GetOrdinal("Associate_Address_2");
			int ordAssociateAddress3 = reader.GetOrdinal("Associate_Address_3");
			int ordAssociateCity = reader.GetOrdinal("Associate_City");
			int ordAssociateState = reader.GetOrdinal("Associate_State");
			int ordAssociateZipCode = reader.GetOrdinal("Associate_Zip_Code");
			int ordAssociateCompany = reader.GetOrdinal("Associate_Company");
			int ordAssociatePhone = reader.GetOrdinal("Associate_Phone");
			int ordAssociateFax = reader.GetOrdinal("Associate_Fax");
			int ordAssociateEMail = reader.GetOrdinal("Associate_EMail");
			int ordReferralLocationID = reader.GetOrdinal("Referral_Location_ID");
			int ordReferralUserID = reader.GetOrdinal("Referral_User_ID");

			do
			{
				result.Add(new AddDocumentServiceJobAssociate2_Row
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					DocumentServiceJobID = GetNonNullFieldValue<Guid>(reader, ordDocumentServiceJobID),
					DocumentServiceJobAssociateID = GetNonNullFieldValue<Guid>(reader, ordDocumentServiceJobAssociateID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					AssociateID = GetFieldValue<Int32>(reader, ordAssociateID),
					AssociateClientCode = GetNonNullField<String>(reader, ordAssociateClientCode),
					AssociateSpecialty = GetField<String>(reader, ordAssociateSpecialty),
					AssociateGreeting = GetField<String>(reader, ordAssociateGreeting),
					AssociateBusinessName = GetField<String>(reader, ordAssociateBusinessName),
					AssociatePrefix = GetField<String>(reader, ordAssociatePrefix),
					AssociateNameFirst = GetField<String>(reader, ordAssociateNameFirst),
					AssociateNameMiddle = GetField<String>(reader, ordAssociateNameMiddle),
					AssociateNameLast = GetField<String>(reader, ordAssociateNameLast),
					AssociateSuffix = GetField<String>(reader, ordAssociateSuffix),
					AssociateAddress1 = GetField<String>(reader, ordAssociateAddress1),
					AssociateAddress2 = GetField<String>(reader, ordAssociateAddress2),
					AssociateAddress3 = GetField<String>(reader, ordAssociateAddress3),
					AssociateCity = GetField<String>(reader, ordAssociateCity),
					AssociateState = GetField<String>(reader, ordAssociateState),
					AssociateZipCode = GetField<String>(reader, ordAssociateZipCode),
					AssociateCompany = GetField<String>(reader, ordAssociateCompany),
					AssociatePhone = GetField<String>(reader, ordAssociatePhone),
					AssociateFax = GetField<String>(reader, ordAssociateFax),
					AssociateEMail = GetField<String>(reader, ordAssociateEMail),
					ReferralLocationID = GetFieldValue<Int32>(reader, ordReferralLocationID),
					ReferralUserID = GetFieldValue<Int32>(reader, ordReferralUserID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddGlobalUserRow>> AddGlobalUserAsync(SqlConnection connection, String username) => AddGlobalUserAsync(connection, username, CancellationToken.None);
	public static async Task<List<AddGlobalUserRow>> AddGlobalUserAsync(SqlConnection connection, String username, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_GlobalUser");

		cmd.Parameters.Add(CreateParameter("@Username", username, SqlDbType.VarChar, 26));

		var result = new List<AddGlobalUserRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUsername = reader.GetOrdinal("Username");
			int ordPassword = reader.GetOrdinal("Password");
			int ordDeleteID = reader.GetOrdinal("DeleteID");

			do
			{
				result.Add(new AddGlobalUserRow
				{
					Username = GetField<String>(reader, ordUsername),
					Password = GetField<String>(reader, ordPassword),
					DeleteID = GetFieldValue<Decimal>(reader, ordDeleteID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<Int32> AddInterpreterSessionAsync(SqlConnection connection, String externalSessionID, Int32 clientID, Int32 userID, Int32 languageID, Int32 sessionStatus, DateTime sessionStart, String patientID, String patientFullName) => AddInterpreterSessionAsync(connection, externalSessionID, clientID, userID, languageID, sessionStatus, sessionStart, patientID, patientFullName, CancellationToken.None);
	public static async Task<Int32> AddInterpreterSessionAsync(SqlConnection connection, String externalSessionID, Int32 clientID, Int32 userID, Int32 languageID, Int32 sessionStatus, DateTime sessionStart, String patientID, String patientFullName, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Interpreter_Session");

		cmd.Parameters.Add(CreateParameter("@External_Session_ID", externalSessionID, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Language_ID", languageID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@SessionStatus", sessionStatus, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Session_Start", sessionStart, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Full_Name", patientFullName, SqlDbType.VarChar, 350));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> AddNotificationAsync(SqlConnection connection, Int32 transcriptionistID, Int32 userID, Int32 actionID, DateTime dateLogged, String comment, String workstation) => AddNotificationAsync(connection, transcriptionistID, userID, actionID, dateLogged, comment, workstation, CancellationToken.None);
	public static async Task<Int32> AddNotificationAsync(SqlConnection connection, Int32 transcriptionistID, Int32 userID, Int32 actionID, DateTime dateLogged, String comment, String workstation, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Notification");

		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Action_ID", actionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Date_Logged", dateLogged, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Comment", comment, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 30));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<List<AddTranscriptionRow>> AddTranscriptionAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Int32 dictationRouteID, String transcriptionDictationPath, Boolean isStat, Int32 dictationLengthInSeconds, DateTimeOffset dateDictated, DateTime dateDictationReceived, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, DateTime appointmentDate, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comment, String modifiedUser, Int32 dictationID, Int32 appendToTranscriptionID, Int32 prependToTranscriptionID, Guid appointmentID, String appointmentClientCode, String physician, String appointmentExtendedInfo) => AddTranscriptionAsync(connection, clientID, userID, documentID, locationID, dictationRouteID, transcriptionDictationPath, isStat, dictationLengthInSeconds, dateDictated, dateDictationReceived, patientID, patientName, patientBirthdate, patientGender, patientAddress1, patientAddress2, patientCity, patientState, patientZipCode, patientHomePhone, patientWorkPhone, appointmentDate, orderNumber, userField1, userField2, userField3, userField4, userField5, comment, modifiedUser, dictationID, appendToTranscriptionID, prependToTranscriptionID, appointmentID, appointmentClientCode, physician, appointmentExtendedInfo, CancellationToken.None);
	public static async Task<List<AddTranscriptionRow>> AddTranscriptionAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Int32 dictationRouteID, String transcriptionDictationPath, Boolean isStat, Int32 dictationLengthInSeconds, DateTimeOffset dateDictated, DateTime dateDictationReceived, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, DateTime appointmentDate, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comment, String modifiedUser, Int32 dictationID, Int32 appendToTranscriptionID, Int32 prependToTranscriptionID, Guid appointmentID, String appointmentClientCode, String physician, String appointmentExtendedInfo, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Transcription");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictation_Route_ID", dictationRouteID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_DictationPath", transcriptionDictationPath, SqlDbType.VarChar, 1000));
		cmd.Parameters.Add(CreateParameter("@Is_Stat", isStat, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Dictation_Length_InSeconds", dictationLengthInSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Date_Dictated", dateDictated, SqlDbType.DateTimeOffset, 10));
		cmd.Parameters.Add(CreateParameter("@Date_Dictation_Received", dateDictationReceived, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Name", patientName, SqlDbType.Char, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_Birthdate", patientBirthdate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Patient_Gender", patientGender, SqlDbType.Char, 1));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_1", patientAddress1, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_2", patientAddress2, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_City", patientCity, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_State", patientState, SqlDbType.Char, 3));
		cmd.Parameters.Add(CreateParameter("@Patient_Zip_Code", patientZipCode, SqlDbType.Char, 9));
		cmd.Parameters.Add(CreateParameter("@Patient_Home_Phone", patientHomePhone, SqlDbType.Char, 10));
		cmd.Parameters.Add(CreateParameter("@Patient_Work_Phone", patientWorkPhone, SqlDbType.Char, 10));
		cmd.Parameters.Add(CreateParameter("@Appointment_Date", appointmentDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Order_Number", orderNumber, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@User_Field_1", userField1, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_2", userField2, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_3", userField3, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_4", userField4, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_5", userField5, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Comment", comment, SqlDbType.VarChar, 1000));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Dictation_ID", dictationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Append_To_Transcription_ID", appendToTranscriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Prepend_To_Transcription_ID", prependToTranscriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Appointment_ID", appointmentID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Appointment_Client_Code", appointmentClientCode, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Physician", physician, SqlDbType.VarChar, 30));
		cmd.Parameters.Add(CreateParameter("@Appointment_Extended_Info", appointmentExtendedInfo, SqlDbType.Xml));

		var result = new List<AddTranscriptionRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordReceivedLogID = reader.GetOrdinal("Received_Log_ID");
			int ordAppendedToTranscriptionID = reader.GetOrdinal("Appended_To_Transcription_ID");
			int ordAppendedToLogID = reader.GetOrdinal("Appended_To_Log_ID");
			int ordPrependedToTranscriptionID = reader.GetOrdinal("Prepended_To_Transcription_ID");
			int ordPrependedToLogID = reader.GetOrdinal("Prepended_To_Log_ID");

			do
			{
				result.Add(new AddTranscriptionRow
				{
					TranscriptionID = GetFieldValue<Int32>(reader, ordTranscriptionID),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ReceivedLogID = GetFieldValue<Int64>(reader, ordReceivedLogID),
					AppendedToTranscriptionID = GetFieldValue<Int32>(reader, ordAppendedToTranscriptionID),
					AppendedToLogID = GetFieldValue<Int64>(reader, ordAppendedToLogID),
					PrependedToTranscriptionID = GetFieldValue<Int32>(reader, ordPrependedToTranscriptionID),
					PrependedToLogID = GetFieldValue<Int64>(reader, ordPrependedToLogID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<Int32> AddTranscriptionDictationAsync(SqlConnection connection, Int32 transcriptionID, Int32 dictationID) => AddTranscriptionDictationAsync(connection, transcriptionID, dictationID, CancellationToken.None);
	public static async Task<Int32> AddTranscriptionDictationAsync(SqlConnection connection, Int32 transcriptionID, Int32 dictationID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Transcription_Dictation");

		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictation_ID", dictationID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> AddTranscriptionLogAsync(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 userID, Int32 actionID) => AddTranscriptionLogAsync(connection, transcriptionID, clientID, userID, actionID, CancellationToken.None);
	public static async Task<Int32> AddTranscriptionLogAsync(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 userID, Int32 actionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Transcription_Log");

		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Action_ID", actionID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> AddTranscriptionLogForMTAsync(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 transcriptionistID, Int32 actionID) => AddTranscriptionLogForMTAsync(connection, transcriptionID, clientID, transcriptionistID, actionID, CancellationToken.None);
	public static async Task<Int32> AddTranscriptionLogForMTAsync(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 transcriptionistID, Int32 actionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Transcription_Log_ForMT");

		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Action_ID", actionID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<List<AddTranscriptionPackageRow>> AddTranscriptionPackageAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionistID, String machineName, String inScribeVersion, Int32 dictatingUserID, Int32 documentID, Int32 locationID, DateTimeOffset dateDictated, DateTime appointmentDate, Int32 patientLetterId, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 qAProgramId, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, Boolean transcriptionModified, Int32 workflowOverride, Boolean isMarkedForClientReview, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean wasSplit, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, List<SignaturesTable2Row> signaturesTable, List<TagsTableRow> tagsTable, List<NameValuePairsTableRow> optionalVariablesTable, List<AssociatesTableRow> associatesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Byte[] transcriptionContent, Int32 transcriptionContentTypeID, Byte[] hTMLContent, Int32 transcriptionID, Int32 originalTranscriptionID, Guid appointmentID, List<OrdersTableRow> ordersTable, DateTime admitDate, DateTime dischargeDate, String accountNumber, String bed, String floor, Boolean audioPlayed, Boolean audioPlayedFully, String patientCompany, String patientAddress3, Int32 priority) => AddTranscriptionPackageAsync(connection, clientID, transcriptionistID, machineName, inScribeVersion, dictatingUserID, documentID, locationID, dateDictated, appointmentDate, patientLetterId, patientID, patientName, patientBirthdate, patientGender, patientNameFirst, patientNameMiddle, patientNameLast, patientAddress1, patientAddress2, patientCity, patientState, patientZipCode, patientHomePhone, patientWorkPhone, patientOrderNumber, patientUserField1, patientUserField2, patientUserField3, patientUserField4, patientUserField5, patientAddToDB, orderNumber, userField1, userField2, userField3, userField4, userField5, comments, appendTranscriptionID, correctionTranscriptionID, qAProgramId, qARatingsAreFeedbackOnly, qARatingsWereApplied, transcriptionModified, workflowOverride, isMarkedForClientReview, isMarkedForQA, isQAOptional, qAPercent, wasSplit, totalIdleSeconds, totalJobSeconds, initialIdleSeconds, originalQTCharacters, originalNonVisibleQTCharacters, originalAutoTextCharacters, indexMarkSeconds, signaturesTable, tagsTable, optionalVariablesTable, associatesTable, qAFeedbackRatingsTable, transcriptionContent, transcriptionContentTypeID, hTMLContent, transcriptionID, originalTranscriptionID, appointmentID, ordersTable, admitDate, dischargeDate, accountNumber, bed, floor, audioPlayed, audioPlayedFully, patientCompany, patientAddress3, priority, CancellationToken.None);
	public static async Task<List<AddTranscriptionPackageRow>> AddTranscriptionPackageAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionistID, String machineName, String inScribeVersion, Int32 dictatingUserID, Int32 documentID, Int32 locationID, DateTimeOffset dateDictated, DateTime appointmentDate, Int32 patientLetterId, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 qAProgramId, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, Boolean transcriptionModified, Int32 workflowOverride, Boolean isMarkedForClientReview, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean wasSplit, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, List<SignaturesTable2Row> signaturesTable, List<TagsTableRow> tagsTable, List<NameValuePairsTableRow> optionalVariablesTable, List<AssociatesTableRow> associatesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Byte[] transcriptionContent, Int32 transcriptionContentTypeID, Byte[] hTMLContent, Int32 transcriptionID, Int32 originalTranscriptionID, Guid appointmentID, List<OrdersTableRow> ordersTable, DateTime admitDate, DateTime dischargeDate, String accountNumber, String bed, String floor, Boolean audioPlayed, Boolean audioPlayedFully, String patientCompany, String patientAddress3, Int32 priority, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Transcription_Package");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Machine_Name", machineName, SqlDbType.NVarChar, 512));
		cmd.Parameters.Add(CreateParameter("@InScribe_Version", inScribeVersion, SqlDbType.VarChar, 25));
		cmd.Parameters.Add(CreateParameter("@Dictating_User_ID", dictatingUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Date_Dictated", dateDictated, SqlDbType.DateTimeOffset, 10));
		cmd.Parameters.Add(CreateParameter("@Appointment_Date", appointmentDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Patient_Letter_Id", patientLetterId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Name", patientName, SqlDbType.VarChar, 350));
		cmd.Parameters.Add(CreateParameter("@Patient_Birthdate", patientBirthdate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Patient_Gender", patientGender, SqlDbType.Char, 1));
		cmd.Parameters.Add(CreateParameter("@Patient_Name_First", patientNameFirst, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_Name_Middle", patientNameMiddle, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_Name_Last", patientNameLast, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_1", patientAddress1, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_2", patientAddress2, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_City", patientCity, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_State", patientState, SqlDbType.Char, 3));
		cmd.Parameters.Add(CreateParameter("@Patient_Zip_Code", patientZipCode, SqlDbType.Char, 9));
		cmd.Parameters.Add(CreateParameter("@Patient_Home_Phone", patientHomePhone, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Work_Phone", patientWorkPhone, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Order_Number", patientOrderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_1", patientUserField1, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_2", patientUserField2, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_3", patientUserField3, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_4", patientUserField4, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_5", patientUserField5, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_AddToDB", patientAddToDB, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Order_Number", orderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@User_Field_1", userField1, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_2", userField2, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_3", userField3, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_4", userField4, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_5", userField5, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Comments", comments, SqlDbType.VarChar, 1000));
		cmd.Parameters.Add(CreateParameter("@Append_Transcription_ID", appendTranscriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Correction_Transcription_ID", correctionTranscriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@QAProgram_Id", qAProgramId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@QARatingsAreFeedbackOnly", qARatingsAreFeedbackOnly, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@QARatingsWereApplied", qARatingsWereApplied, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Transcription_Modified", transcriptionModified, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@WorkflowOverride", workflowOverride, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@IsMarkedForClientReview", isMarkedForClientReview, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@IsMarkedForQA", isMarkedForQA, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@IsQAOptional", isQAOptional, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@QAPercent", qAPercent, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Was_Split", wasSplit, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Total_Idle_Seconds", totalIdleSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Total_Job_Seconds", totalJobSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Initial_Idle_Seconds", initialIdleSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_QTCharacters", originalQTCharacters, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_NonVisible_QTCharacters", originalNonVisibleQTCharacters, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_AutoTextCharacters", originalAutoTextCharacters, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Index_Mark_Seconds", indexMarkSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Signatures_Table", new SignaturesTable2RowDataTable(signaturesTable), SqlDbType.Structured, "dbo.SignaturesTable2"));
		cmd.Parameters.Add(CreateParameter("@Tags_Table", new TagsTableRowDataTable(tagsTable), SqlDbType.Structured, "dbo.TagsTable"));
		cmd.Parameters.Add(CreateParameter("@OptionalVariables_Table", new NameValuePairsTableRowDataTable(optionalVariablesTable), SqlDbType.Structured, "dbo.NameValuePairsTable"));
		cmd.Parameters.Add(CreateParameter("@Associates_Table", new AssociatesTableRowDataTable(associatesTable), SqlDbType.Structured, "dbo.AssociatesTable"));
		cmd.Parameters.Add(CreateParameter("@QAFeedbackRatings_Table", new QAFeedbackRatingsTableRowDataTable(qAFeedbackRatingsTable), SqlDbType.Structured, "dbo.QAFeedbackRatingsTable"));
		cmd.Parameters.Add(CreateParameter("@Transcription_Content", transcriptionContent, SqlDbType.VarBinary));
		cmd.Parameters.Add(CreateParameter("@Transcription_Content_Type_ID", transcriptionContentTypeID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@HTML_Content", hTMLContent, SqlDbType.VarBinary));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_Transcription_ID", originalTranscriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Appointment_ID", appointmentID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Orders_Table", new OrdersTableRowDataTable(ordersTable), SqlDbType.Structured, "dbo.OrdersTable"));
		cmd.Parameters.Add(CreateParameter("@Admit_Date", admitDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Discharge_Date", dischargeDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Account_Number", accountNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Bed", bed, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Floor", floor, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Audio_Played", audioPlayed, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Audio_Played_Fully", audioPlayedFully, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Patient_Company", patientCompany, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_3", patientAddress3, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Priority", priority, SqlDbType.Int, 4));

		var result = new List<AddTranscriptionPackageRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordNewReceivedTranscriptionJobID = reader.GetOrdinal("New_Received_Transcription_Job_ID");
			int ordTranscriptionDictationPath = reader.GetOrdinal("Transcription_DictationPath");
			int ordOriginalTranscriptionDictationPath = reader.GetOrdinal("Original_Transcription_DictationPath");

			do
			{
				result.Add(new AddTranscriptionPackageRow
				{
					NewReceivedTranscriptionJobID = GetFieldValue<Guid>(reader, ordNewReceivedTranscriptionJobID),
					TranscriptionDictationPath = GetField<String>(reader, ordTranscriptionDictationPath),
					OriginalTranscriptionDictationPath = GetField<String>(reader, ordOriginalTranscriptionDictationPath),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddTranscriptionPackage2_Row>> AddTranscriptionPackage2Async(SqlConnection connection, Int32 clientID, Int32 transcriptionistID, String machineName, String inScribeVersion, Int32 dictatingUserID, Int32 documentID, Int32 locationID, DateTimeOffset dateDictated, DateTime appointmentDate, Int32 patientLetterId, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 qAProgramId, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, Boolean transcriptionModified, Int32 workflowOverride, Boolean isMarkedForClientReview, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean wasSplit, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, List<SignaturesTableRow> signaturesTable, List<TagsTableRow> tagsTable, List<NameValuePairsTableRow> optionalVariablesTable, List<AssociatesTable2Row> associatesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Byte[] transcriptionContent, Int32 transcriptionContentTypeID, Byte[] hTMLContent, Int32 transcriptionID, Int32 originalTranscriptionID, Guid appointmentID, List<OrdersTableRow> ordersTable, DateTime admitDate, DateTime dischargeDate, String accountNumber, String bed, String floor, Boolean audioPlayed, Boolean audioPlayedFully, String patientCompany, String patientAddress3, Int32 priority) => AddTranscriptionPackage2Async(connection, clientID, transcriptionistID, machineName, inScribeVersion, dictatingUserID, documentID, locationID, dateDictated, appointmentDate, patientLetterId, patientID, patientName, patientBirthdate, patientGender, patientNameFirst, patientNameMiddle, patientNameLast, patientAddress1, patientAddress2, patientCity, patientState, patientZipCode, patientHomePhone, patientWorkPhone, patientOrderNumber, patientUserField1, patientUserField2, patientUserField3, patientUserField4, patientUserField5, patientAddToDB, orderNumber, userField1, userField2, userField3, userField4, userField5, comments, appendTranscriptionID, correctionTranscriptionID, qAProgramId, qARatingsAreFeedbackOnly, qARatingsWereApplied, transcriptionModified, workflowOverride, isMarkedForClientReview, isMarkedForQA, isQAOptional, qAPercent, wasSplit, totalIdleSeconds, totalJobSeconds, initialIdleSeconds, originalQTCharacters, originalNonVisibleQTCharacters, originalAutoTextCharacters, indexMarkSeconds, signaturesTable, tagsTable, optionalVariablesTable, associatesTable, qAFeedbackRatingsTable, transcriptionContent, transcriptionContentTypeID, hTMLContent, transcriptionID, originalTranscriptionID, appointmentID, ordersTable, admitDate, dischargeDate, accountNumber, bed, floor, audioPlayed, audioPlayedFully, patientCompany, patientAddress3, priority, CancellationToken.None);
	public static async Task<List<AddTranscriptionPackage2_Row>> AddTranscriptionPackage2Async(SqlConnection connection, Int32 clientID, Int32 transcriptionistID, String machineName, String inScribeVersion, Int32 dictatingUserID, Int32 documentID, Int32 locationID, DateTimeOffset dateDictated, DateTime appointmentDate, Int32 patientLetterId, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 qAProgramId, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, Boolean transcriptionModified, Int32 workflowOverride, Boolean isMarkedForClientReview, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean wasSplit, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, List<SignaturesTableRow> signaturesTable, List<TagsTableRow> tagsTable, List<NameValuePairsTableRow> optionalVariablesTable, List<AssociatesTable2Row> associatesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Byte[] transcriptionContent, Int32 transcriptionContentTypeID, Byte[] hTMLContent, Int32 transcriptionID, Int32 originalTranscriptionID, Guid appointmentID, List<OrdersTableRow> ordersTable, DateTime admitDate, DateTime dischargeDate, String accountNumber, String bed, String floor, Boolean audioPlayed, Boolean audioPlayedFully, String patientCompany, String patientAddress3, Int32 priority, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Transcription_Package_2");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Machine_Name", machineName, SqlDbType.NVarChar, 512));
		cmd.Parameters.Add(CreateParameter("@InScribe_Version", inScribeVersion, SqlDbType.VarChar, 25));
		cmd.Parameters.Add(CreateParameter("@Dictating_User_ID", dictatingUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Date_Dictated", dateDictated, SqlDbType.DateTimeOffset, 10));
		cmd.Parameters.Add(CreateParameter("@Appointment_Date", appointmentDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Patient_Letter_Id", patientLetterId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Name", patientName, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_Birthdate", patientBirthdate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Patient_Gender", patientGender, SqlDbType.Char, 1));
		cmd.Parameters.Add(CreateParameter("@Patient_Name_First", patientNameFirst, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Name_Middle", patientNameMiddle, SqlDbType.Char, 1));
		cmd.Parameters.Add(CreateParameter("@Patient_Name_Last", patientNameLast, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_1", patientAddress1, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_2", patientAddress2, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_City", patientCity, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_State", patientState, SqlDbType.Char, 3));
		cmd.Parameters.Add(CreateParameter("@Patient_Zip_Code", patientZipCode, SqlDbType.Char, 9));
		cmd.Parameters.Add(CreateParameter("@Patient_Home_Phone", patientHomePhone, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Work_Phone", patientWorkPhone, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Order_Number", patientOrderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_1", patientUserField1, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_2", patientUserField2, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_3", patientUserField3, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_4", patientUserField4, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_5", patientUserField5, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_AddToDB", patientAddToDB, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Order_Number", orderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@User_Field_1", userField1, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_2", userField2, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_3", userField3, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_4", userField4, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_5", userField5, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Comments", comments, SqlDbType.VarChar, 1000));
		cmd.Parameters.Add(CreateParameter("@Append_Transcription_ID", appendTranscriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Correction_Transcription_ID", correctionTranscriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@QAProgram_Id", qAProgramId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@QARatingsAreFeedbackOnly", qARatingsAreFeedbackOnly, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@QARatingsWereApplied", qARatingsWereApplied, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Transcription_Modified", transcriptionModified, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@WorkflowOverride", workflowOverride, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@IsMarkedForClientReview", isMarkedForClientReview, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@IsMarkedForQA", isMarkedForQA, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@IsQAOptional", isQAOptional, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@QAPercent", qAPercent, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Was_Split", wasSplit, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Total_Idle_Seconds", totalIdleSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Total_Job_Seconds", totalJobSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Initial_Idle_Seconds", initialIdleSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_QTCharacters", originalQTCharacters, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_NonVisible_QTCharacters", originalNonVisibleQTCharacters, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_AutoTextCharacters", originalAutoTextCharacters, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Index_Mark_Seconds", indexMarkSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Signatures_Table", new SignaturesTableRowDataTable(signaturesTable), SqlDbType.Structured, "dbo.SignaturesTable"));
		cmd.Parameters.Add(CreateParameter("@Tags_Table", new TagsTableRowDataTable(tagsTable), SqlDbType.Structured, "dbo.TagsTable"));
		cmd.Parameters.Add(CreateParameter("@OptionalVariables_Table", new NameValuePairsTableRowDataTable(optionalVariablesTable), SqlDbType.Structured, "dbo.NameValuePairsTable"));
		cmd.Parameters.Add(CreateParameter("@Associates_Table", new AssociatesTable2RowDataTable(associatesTable), SqlDbType.Structured, "dbo.AssociatesTable2"));
		cmd.Parameters.Add(CreateParameter("@QAFeedbackRatings_Table", new QAFeedbackRatingsTableRowDataTable(qAFeedbackRatingsTable), SqlDbType.Structured, "dbo.QAFeedbackRatingsTable"));
		cmd.Parameters.Add(CreateParameter("@Transcription_Content", transcriptionContent, SqlDbType.VarBinary));
		cmd.Parameters.Add(CreateParameter("@Transcription_Content_Type_ID", transcriptionContentTypeID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@HTML_Content", hTMLContent, SqlDbType.VarBinary));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_Transcription_ID", originalTranscriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Appointment_ID", appointmentID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Orders_Table", new OrdersTableRowDataTable(ordersTable), SqlDbType.Structured, "dbo.OrdersTable"));
		cmd.Parameters.Add(CreateParameter("@Admit_Date", admitDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Discharge_Date", dischargeDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Account_Number", accountNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Bed", bed, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Floor", floor, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Audio_Played", audioPlayed, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Audio_Played_Fully", audioPlayedFully, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Patient_Company", patientCompany, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_3", patientAddress3, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Priority", priority, SqlDbType.Int, 4));

		var result = new List<AddTranscriptionPackage2_Row>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordNewReceivedTranscriptionJobID = reader.GetOrdinal("New_Received_Transcription_Job_ID");
			int ordTranscriptionDictationPath = reader.GetOrdinal("Transcription_DictationPath");
			int ordOriginalTranscriptionDictationPath = reader.GetOrdinal("Original_Transcription_DictationPath");

			do
			{
				result.Add(new AddTranscriptionPackage2_Row
				{
					NewReceivedTranscriptionJobID = GetFieldValue<Guid>(reader, ordNewReceivedTranscriptionJobID),
					TranscriptionDictationPath = GetField<String>(reader, ordTranscriptionDictationPath),
					OriginalTranscriptionDictationPath = GetField<String>(reader, ordOriginalTranscriptionDictationPath),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddTranscriptionPackage3_Row>> AddTranscriptionPackage3Async(SqlConnection connection, Int32 clientID, Int32 transcriptionistID, String machineName, String inScribeVersion, Int32 dictatingUserID, Int32 documentID, Int32 locationID, DateTimeOffset dateDictated, DateTime appointmentDate, Int32 patientLetterId, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 qAProgramId, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, Boolean transcriptionModified, Int32 workflowOverride, Boolean isMarkedForClientReview, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean wasSplit, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, List<SignaturesTableRow> signaturesTable, List<TagsTableRow> tagsTable, List<NameValuePairsTableRow> optionalVariablesTable, List<AssociatesTable3Row> associatesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Byte[] transcriptionContent, Int32 transcriptionContentTypeID, Byte[] hTMLContent, Int32 transcriptionID, Int32 originalTranscriptionID, Guid appointmentID, List<OrdersTableRow> ordersTable, DateTime admitDate, DateTime dischargeDate, String accountNumber, String bed, String floor, Boolean audioPlayed, Boolean audioPlayedFully, String patientCompany, String patientAddress3, Int32 priority) => AddTranscriptionPackage3Async(connection, clientID, transcriptionistID, machineName, inScribeVersion, dictatingUserID, documentID, locationID, dateDictated, appointmentDate, patientLetterId, patientID, patientName, patientBirthdate, patientGender, patientNameFirst, patientNameMiddle, patientNameLast, patientAddress1, patientAddress2, patientCity, patientState, patientZipCode, patientHomePhone, patientWorkPhone, patientOrderNumber, patientUserField1, patientUserField2, patientUserField3, patientUserField4, patientUserField5, patientAddToDB, orderNumber, userField1, userField2, userField3, userField4, userField5, comments, appendTranscriptionID, correctionTranscriptionID, qAProgramId, qARatingsAreFeedbackOnly, qARatingsWereApplied, transcriptionModified, workflowOverride, isMarkedForClientReview, isMarkedForQA, isQAOptional, qAPercent, wasSplit, totalIdleSeconds, totalJobSeconds, initialIdleSeconds, originalQTCharacters, originalNonVisibleQTCharacters, originalAutoTextCharacters, indexMarkSeconds, signaturesTable, tagsTable, optionalVariablesTable, associatesTable, qAFeedbackRatingsTable, transcriptionContent, transcriptionContentTypeID, hTMLContent, transcriptionID, originalTranscriptionID, appointmentID, ordersTable, admitDate, dischargeDate, accountNumber, bed, floor, audioPlayed, audioPlayedFully, patientCompany, patientAddress3, priority, CancellationToken.None);
	public static async Task<List<AddTranscriptionPackage3_Row>> AddTranscriptionPackage3Async(SqlConnection connection, Int32 clientID, Int32 transcriptionistID, String machineName, String inScribeVersion, Int32 dictatingUserID, Int32 documentID, Int32 locationID, DateTimeOffset dateDictated, DateTime appointmentDate, Int32 patientLetterId, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 qAProgramId, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, Boolean transcriptionModified, Int32 workflowOverride, Boolean isMarkedForClientReview, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean wasSplit, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, List<SignaturesTableRow> signaturesTable, List<TagsTableRow> tagsTable, List<NameValuePairsTableRow> optionalVariablesTable, List<AssociatesTable3Row> associatesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Byte[] transcriptionContent, Int32 transcriptionContentTypeID, Byte[] hTMLContent, Int32 transcriptionID, Int32 originalTranscriptionID, Guid appointmentID, List<OrdersTableRow> ordersTable, DateTime admitDate, DateTime dischargeDate, String accountNumber, String bed, String floor, Boolean audioPlayed, Boolean audioPlayedFully, String patientCompany, String patientAddress3, Int32 priority, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Transcription_Package_3");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Machine_Name", machineName, SqlDbType.NVarChar, 512));
		cmd.Parameters.Add(CreateParameter("@InScribe_Version", inScribeVersion, SqlDbType.VarChar, 25));
		cmd.Parameters.Add(CreateParameter("@Dictating_User_ID", dictatingUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Date_Dictated", dateDictated, SqlDbType.DateTimeOffset, 10));
		cmd.Parameters.Add(CreateParameter("@Appointment_Date", appointmentDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Patient_Letter_Id", patientLetterId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Name", patientName, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_Birthdate", patientBirthdate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Patient_Gender", patientGender, SqlDbType.Char, 1));
		cmd.Parameters.Add(CreateParameter("@Patient_Name_First", patientNameFirst, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Name_Middle", patientNameMiddle, SqlDbType.Char, 1));
		cmd.Parameters.Add(CreateParameter("@Patient_Name_Last", patientNameLast, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_1", patientAddress1, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_2", patientAddress2, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_City", patientCity, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_State", patientState, SqlDbType.Char, 3));
		cmd.Parameters.Add(CreateParameter("@Patient_Zip_Code", patientZipCode, SqlDbType.Char, 9));
		cmd.Parameters.Add(CreateParameter("@Patient_Home_Phone", patientHomePhone, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Work_Phone", patientWorkPhone, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Order_Number", patientOrderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_1", patientUserField1, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_2", patientUserField2, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_3", patientUserField3, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_4", patientUserField4, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_5", patientUserField5, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_AddToDB", patientAddToDB, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Order_Number", orderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@User_Field_1", userField1, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_2", userField2, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_3", userField3, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_4", userField4, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_5", userField5, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Comments", comments, SqlDbType.VarChar, 1000));
		cmd.Parameters.Add(CreateParameter("@Append_Transcription_ID", appendTranscriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Correction_Transcription_ID", correctionTranscriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@QAProgram_Id", qAProgramId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@QARatingsAreFeedbackOnly", qARatingsAreFeedbackOnly, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@QARatingsWereApplied", qARatingsWereApplied, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Transcription_Modified", transcriptionModified, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@WorkflowOverride", workflowOverride, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@IsMarkedForClientReview", isMarkedForClientReview, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@IsMarkedForQA", isMarkedForQA, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@IsQAOptional", isQAOptional, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@QAPercent", qAPercent, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Was_Split", wasSplit, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Total_Idle_Seconds", totalIdleSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Total_Job_Seconds", totalJobSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Initial_Idle_Seconds", initialIdleSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_QTCharacters", originalQTCharacters, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_NonVisible_QTCharacters", originalNonVisibleQTCharacters, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_AutoTextCharacters", originalAutoTextCharacters, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Index_Mark_Seconds", indexMarkSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Signatures_Table", new SignaturesTableRowDataTable(signaturesTable), SqlDbType.Structured, "dbo.SignaturesTable"));
		cmd.Parameters.Add(CreateParameter("@Tags_Table", new TagsTableRowDataTable(tagsTable), SqlDbType.Structured, "dbo.TagsTable"));
		cmd.Parameters.Add(CreateParameter("@OptionalVariables_Table", new NameValuePairsTableRowDataTable(optionalVariablesTable), SqlDbType.Structured, "dbo.NameValuePairsTable"));
		cmd.Parameters.Add(CreateParameter("@Associates_Table", new AssociatesTable3RowDataTable(associatesTable), SqlDbType.Structured, "dbo.AssociatesTable3"));
		cmd.Parameters.Add(CreateParameter("@QAFeedbackRatings_Table", new QAFeedbackRatingsTableRowDataTable(qAFeedbackRatingsTable), SqlDbType.Structured, "dbo.QAFeedbackRatingsTable"));
		cmd.Parameters.Add(CreateParameter("@Transcription_Content", transcriptionContent, SqlDbType.VarBinary));
		cmd.Parameters.Add(CreateParameter("@Transcription_Content_Type_ID", transcriptionContentTypeID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@HTML_Content", hTMLContent, SqlDbType.VarBinary));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_Transcription_ID", originalTranscriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Appointment_ID", appointmentID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Orders_Table", new OrdersTableRowDataTable(ordersTable), SqlDbType.Structured, "dbo.OrdersTable"));
		cmd.Parameters.Add(CreateParameter("@Admit_Date", admitDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Discharge_Date", dischargeDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Account_Number", accountNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Bed", bed, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Floor", floor, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Audio_Played", audioPlayed, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Audio_Played_Fully", audioPlayedFully, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Patient_Company", patientCompany, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_3", patientAddress3, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Priority", priority, SqlDbType.Int, 4));

		var result = new List<AddTranscriptionPackage3_Row>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordNewReceivedTranscriptionJobID = reader.GetOrdinal("New_Received_Transcription_Job_ID");
			int ordTranscriptionDictationPath = reader.GetOrdinal("Transcription_DictationPath");
			int ordOriginalTranscriptionDictationPath = reader.GetOrdinal("Original_Transcription_DictationPath");

			do
			{
				result.Add(new AddTranscriptionPackage3_Row
				{
					NewReceivedTranscriptionJobID = GetFieldValue<Guid>(reader, ordNewReceivedTranscriptionJobID),
					TranscriptionDictationPath = GetField<String>(reader, ordTranscriptionDictationPath),
					OriginalTranscriptionDictationPath = GetField<String>(reader, ordOriginalTranscriptionDictationPath),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddTranscriptionPreviewRow>> AddTranscriptionPreviewAsync(SqlConnection connection, Int32 transcriptionistID, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, String transcriptionID, DateTime appointmentDate, DateTime dateTranscribed, DateTime dateDictated, Boolean incomingStat, Int32 incomingPriority, String patientID, String patientName, String patientGender, DateTime patientBirthdate, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, Int32 originalTID, String patientCompany, String patientAddress3) => AddTranscriptionPreviewAsync(connection, transcriptionistID, clientID, userID, documentID, locationID, transcriptionID, appointmentDate, dateTranscribed, dateDictated, incomingStat, incomingPriority, patientID, patientName, patientGender, patientBirthdate, patientAddress1, patientAddress2, patientCity, patientState, patientZipCode, patientHomePhone, patientWorkPhone, orderNumber, userField1, userField2, userField3, userField4, userField5, originalTID, patientCompany, patientAddress3, CancellationToken.None);
	public static async Task<List<AddTranscriptionPreviewRow>> AddTranscriptionPreviewAsync(SqlConnection connection, Int32 transcriptionistID, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, String transcriptionID, DateTime appointmentDate, DateTime dateTranscribed, DateTime dateDictated, Boolean incomingStat, Int32 incomingPriority, String patientID, String patientName, String patientGender, DateTime patientBirthdate, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, Int32 originalTID, String patientCompany, String patientAddress3, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Transcription_Preview");

		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Char, 12));
		cmd.Parameters.Add(CreateParameter("@Appointment_Date", appointmentDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Date_Transcribed", dateTranscribed, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Date_Dictated", dateDictated, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Incoming_Stat", incomingStat, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Incoming_Priority", incomingPriority, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Name", patientName, SqlDbType.Char, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_Gender", patientGender, SqlDbType.Char, 1));
		cmd.Parameters.Add(CreateParameter("@Patient_Birthdate", patientBirthdate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_1", patientAddress1, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_2", patientAddress2, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_City", patientCity, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_State", patientState, SqlDbType.Char, 3));
		cmd.Parameters.Add(CreateParameter("@Patient_Zip_Code", patientZipCode, SqlDbType.Char, 9));
		cmd.Parameters.Add(CreateParameter("@Patient_Home_Phone", patientHomePhone, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Work_Phone", patientWorkPhone, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Order_Number", orderNumber, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@User_Field_1", userField1, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_2", userField2, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_3", userField3, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_4", userField4, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_5", userField5, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Original_TID", originalTID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patient_Company", patientCompany, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_3", patientAddress3, SqlDbType.VarChar, 50));

		var result = new List<AddTranscriptionPreviewRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordPreviewID = reader.GetOrdinal("Preview_ID");
			int ordPreviewFilePath = reader.GetOrdinal("Preview_FilePath");

			do
			{
				result.Add(new AddTranscriptionPreviewRow
				{
					PreviewID = GetFieldValue<Int32>(reader, ordPreviewID),
					PreviewFilePath = GetField<String>(reader, ordPreviewFilePath),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddTranscriptionPreview2_Row>> AddTranscriptionPreview2Async(SqlConnection connection, Int32 transcriptionistID, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, String transcriptionID, DateTime appointmentDate, DateTime dateTranscribed, DateTime dateDictated, Boolean incomingStat, Int32 incomingPriority, String patientID, String patientName, String patientGender, DateTime patientBirthdate, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, Int32 originalTID, String patientCompany, String patientAddress3) => AddTranscriptionPreview2Async(connection, transcriptionistID, clientID, userID, documentID, locationID, transcriptionID, appointmentDate, dateTranscribed, dateDictated, incomingStat, incomingPriority, patientID, patientName, patientGender, patientBirthdate, patientAddress1, patientAddress2, patientCity, patientState, patientZipCode, patientHomePhone, patientWorkPhone, orderNumber, userField1, userField2, userField3, userField4, userField5, originalTID, patientCompany, patientAddress3, CancellationToken.None);
	public static async Task<List<AddTranscriptionPreview2_Row>> AddTranscriptionPreview2Async(SqlConnection connection, Int32 transcriptionistID, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, String transcriptionID, DateTime appointmentDate, DateTime dateTranscribed, DateTime dateDictated, Boolean incomingStat, Int32 incomingPriority, String patientID, String patientName, String patientGender, DateTime patientBirthdate, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, Int32 originalTID, String patientCompany, String patientAddress3, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Transcription_Preview_2");

		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Char, 12));
		cmd.Parameters.Add(CreateParameter("@Appointment_Date", appointmentDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Date_Transcribed", dateTranscribed, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Date_Dictated", dateDictated, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Incoming_Stat", incomingStat, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Incoming_Priority", incomingPriority, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Name", patientName, SqlDbType.VarChar, 350));
		cmd.Parameters.Add(CreateParameter("@Patient_Gender", patientGender, SqlDbType.Char, 1));
		cmd.Parameters.Add(CreateParameter("@Patient_Birthdate", patientBirthdate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_1", patientAddress1, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_2", patientAddress2, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_City", patientCity, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_State", patientState, SqlDbType.Char, 3));
		cmd.Parameters.Add(CreateParameter("@Patient_Zip_Code", patientZipCode, SqlDbType.Char, 9));
		cmd.Parameters.Add(CreateParameter("@Patient_Home_Phone", patientHomePhone, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Work_Phone", patientWorkPhone, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Order_Number", orderNumber, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@User_Field_1", userField1, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_2", userField2, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_3", userField3, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_4", userField4, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_5", userField5, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Original_TID", originalTID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patient_Company", patientCompany, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_3", patientAddress3, SqlDbType.VarChar, 50));

		var result = new List<AddTranscriptionPreview2_Row>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordPreviewID = reader.GetOrdinal("Preview_ID");
			int ordPreviewFilePath = reader.GetOrdinal("Preview_FilePath");

			do
			{
				result.Add(new AddTranscriptionPreview2_Row
				{
					PreviewID = GetFieldValue<Int32>(reader, ordPreviewID),
					PreviewFilePath = GetField<String>(reader, ordPreviewFilePath),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddTranscriptionPreviewAppointmentRow>> AddTranscriptionPreviewAppointmentAsync(SqlConnection connection, Int32 previewID, Int32 clientID, Guid appointmentID, String appointmentClientCode, String physician, Int32 patientsAppointmentsTypeID, DateTime admitDate, DateTime dischargeDate, String accountNumber, String location, String room, String bed, String floor, String facility, String patientsAppointmentsStatusID, String patientClass, String patientType, Int32 transcriptionistID) => AddTranscriptionPreviewAppointmentAsync(connection, previewID, clientID, appointmentID, appointmentClientCode, physician, patientsAppointmentsTypeID, admitDate, dischargeDate, accountNumber, location, room, bed, floor, facility, patientsAppointmentsStatusID, patientClass, patientType, transcriptionistID, CancellationToken.None);
	public static async Task<List<AddTranscriptionPreviewAppointmentRow>> AddTranscriptionPreviewAppointmentAsync(SqlConnection connection, Int32 previewID, Int32 clientID, Guid appointmentID, String appointmentClientCode, String physician, Int32 patientsAppointmentsTypeID, DateTime admitDate, DateTime dischargeDate, String accountNumber, String location, String room, String bed, String floor, String facility, String patientsAppointmentsStatusID, String patientClass, String patientType, Int32 transcriptionistID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Transcription_Preview_Appointment");

		cmd.Parameters.Add(CreateParameter("@Preview_ID", previewID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Appointment_ID", appointmentID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Appointment_Client_Code", appointmentClientCode, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Physician", physician, SqlDbType.VarChar, 30));
		cmd.Parameters.Add(CreateParameter("@Patients_Appointments_Type_ID", patientsAppointmentsTypeID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Admit_Date", admitDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Discharge_Date", dischargeDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Account_Number", accountNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Location", location, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Room", room, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Bed", bed, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Floor", floor, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Facility", facility, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Patients_Appointments_Status_ID", patientsAppointmentsStatusID, SqlDbType.Char, 3));
		cmd.Parameters.Add(CreateParameter("@Patient_Class", patientClass, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@Patient_Type", patientType, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));

		var result = new List<AddTranscriptionPreviewAppointmentRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionPreviewAppointmentID = reader.GetOrdinal("Transcription_Preview_Appointment_ID");

			do
			{
				result.Add(new AddTranscriptionPreviewAppointmentRow
				{
					TranscriptionPreviewAppointmentID = GetFieldValue<Int32>(reader, ordTranscriptionPreviewAppointmentID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<Int32> AddTranscriptionPreviewAppointmentProviderAsync(SqlConnection connection, Int32 transcriptionPreviewAppointmentID, Int32 clientID, Int32 previewID, Guid patientsAppointmentsProviderID, Guid appointmentID, String providerClientCode, Int32 providerRoleID, String namePrefix, String nameFirst, String nameMiddle, String nameLast, String nameSuffix, Int32 transcriptionistID) => AddTranscriptionPreviewAppointmentProviderAsync(connection, transcriptionPreviewAppointmentID, clientID, previewID, patientsAppointmentsProviderID, appointmentID, providerClientCode, providerRoleID, namePrefix, nameFirst, nameMiddle, nameLast, nameSuffix, transcriptionistID, CancellationToken.None);
	public static async Task<Int32> AddTranscriptionPreviewAppointmentProviderAsync(SqlConnection connection, Int32 transcriptionPreviewAppointmentID, Int32 clientID, Int32 previewID, Guid patientsAppointmentsProviderID, Guid appointmentID, String providerClientCode, Int32 providerRoleID, String namePrefix, String nameFirst, String nameMiddle, String nameLast, String nameSuffix, Int32 transcriptionistID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Transcription_Preview_Appointment_Provider");

		cmd.Parameters.Add(CreateParameter("@Transcription_Preview_Appointment_ID", transcriptionPreviewAppointmentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Preview_ID", previewID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patients_Appointments_Provider_ID", patientsAppointmentsProviderID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Appointment_ID", appointmentID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Provider_Client_Code", providerClientCode, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Provider_Role_ID", providerRoleID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Name_Prefix", namePrefix, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@Name_First", nameFirst, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Name_Middle", nameMiddle, SqlDbType.VarChar, 1));
		cmd.Parameters.Add(CreateParameter("@Name_Last", nameLast, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Name_Suffix", nameSuffix, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> AddTranscriptionPreviewAssociateAsync(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 associateID, String associateClientCode, String associatePrefix, String associateNameFirst, String associateNameMiddle, String associateNameLast, String associateSuffix, String associateBusinessName, String associateSpecialty, String associateGreeting, String associateAddress1, String associateAddress2, String associateAddress3, String associateCity, String associateState, String associateZipCode, String associateCountry, String associatePhone, String associateFax, String associateEMail, Int32 referralUserID, Boolean primaryAssociate, Boolean informalAssociate, Int32 referralLocationID, Int16 associateTypeID, Boolean addToDB, Boolean autoFax, String associateCompany) => AddTranscriptionPreviewAssociateAsync(connection, transcriptionID, clientID, associateID, associateClientCode, associatePrefix, associateNameFirst, associateNameMiddle, associateNameLast, associateSuffix, associateBusinessName, associateSpecialty, associateGreeting, associateAddress1, associateAddress2, associateAddress3, associateCity, associateState, associateZipCode, associateCountry, associatePhone, associateFax, associateEMail, referralUserID, primaryAssociate, informalAssociate, referralLocationID, associateTypeID, addToDB, autoFax, associateCompany, CancellationToken.None);
	public static async Task<Int32> AddTranscriptionPreviewAssociateAsync(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 associateID, String associateClientCode, String associatePrefix, String associateNameFirst, String associateNameMiddle, String associateNameLast, String associateSuffix, String associateBusinessName, String associateSpecialty, String associateGreeting, String associateAddress1, String associateAddress2, String associateAddress3, String associateCity, String associateState, String associateZipCode, String associateCountry, String associatePhone, String associateFax, String associateEMail, Int32 referralUserID, Boolean primaryAssociate, Boolean informalAssociate, Int32 referralLocationID, Int16 associateTypeID, Boolean addToDB, Boolean autoFax, String associateCompany, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Transcription_Preview_Associate");

		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Associate_ID", associateID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Associate_Client_Code", associateClientCode, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Associate_Prefix", associatePrefix, SqlDbType.Char, 10));
		cmd.Parameters.Add(CreateParameter("@Associate_Name_First", associateNameFirst, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Associate_Name_Middle", associateNameMiddle, SqlDbType.Char, 1));
		cmd.Parameters.Add(CreateParameter("@Associate_Name_Last", associateNameLast, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Associate_Suffix", associateSuffix, SqlDbType.Char, 10));
		cmd.Parameters.Add(CreateParameter("@Associate_Business_Name", associateBusinessName, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Specialty", associateSpecialty, SqlDbType.Char, 30));
		cmd.Parameters.Add(CreateParameter("@Associate_Greeting", associateGreeting, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Address_1", associateAddress1, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Address_2", associateAddress2, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Address_3", associateAddress3, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_City", associateCity, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Associate_State", associateState, SqlDbType.Char, 3));
		cmd.Parameters.Add(CreateParameter("@Associate_Zip_Code", associateZipCode, SqlDbType.Char, 9));
		cmd.Parameters.Add(CreateParameter("@Associate_Country", associateCountry, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Associate_Phone", associatePhone, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Fax", associateFax, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_EMail", associateEMail, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Referral_User_ID", referralUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Primary_Associate", primaryAssociate, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Informal_Associate", informalAssociate, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Referral_Location_ID", referralLocationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Associate_Type_ID", associateTypeID, SqlDbType.SmallInt, 2));
		cmd.Parameters.Add(CreateParameter("@AddToDB", addToDB, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@AutoFax", autoFax, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Associate_Company", associateCompany, SqlDbType.VarChar, 100));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> AddTranscriptionPreviewAssociate2Async(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 associateID, String associateClientCode, String associatePrefix, String associateNameFirst, String associateNameMiddle, String associateNameLast, String associateSuffix, String associateBusinessName, String associateSpecialty, String associateGreeting, String associateAddress1, String associateAddress2, String associateAddress3, String associateCity, String associateState, String associateZipCode, String associatePhone, String associateFax, String associateEMail, Int32 referralUserID, Boolean primaryAssociate, Boolean informalAssociate, Int32 referralLocationID, Int16 associateTypeID, Boolean addToDB, Boolean autoFax, String associateCompany) => AddTranscriptionPreviewAssociate2Async(connection, transcriptionID, clientID, associateID, associateClientCode, associatePrefix, associateNameFirst, associateNameMiddle, associateNameLast, associateSuffix, associateBusinessName, associateSpecialty, associateGreeting, associateAddress1, associateAddress2, associateAddress3, associateCity, associateState, associateZipCode, associatePhone, associateFax, associateEMail, referralUserID, primaryAssociate, informalAssociate, referralLocationID, associateTypeID, addToDB, autoFax, associateCompany, CancellationToken.None);
	public static async Task<Int32> AddTranscriptionPreviewAssociate2Async(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 associateID, String associateClientCode, String associatePrefix, String associateNameFirst, String associateNameMiddle, String associateNameLast, String associateSuffix, String associateBusinessName, String associateSpecialty, String associateGreeting, String associateAddress1, String associateAddress2, String associateAddress3, String associateCity, String associateState, String associateZipCode, String associatePhone, String associateFax, String associateEMail, Int32 referralUserID, Boolean primaryAssociate, Boolean informalAssociate, Int32 referralLocationID, Int16 associateTypeID, Boolean addToDB, Boolean autoFax, String associateCompany, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Transcription_Preview_Associate_2");

		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Associate_ID", associateID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Associate_Client_Code", associateClientCode, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Associate_Prefix", associatePrefix, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@Associate_Name_First", associateNameFirst, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Associate_Name_Middle", associateNameMiddle, SqlDbType.VarChar, 1));
		cmd.Parameters.Add(CreateParameter("@Associate_Name_Last", associateNameLast, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Associate_Suffix", associateSuffix, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@Associate_Business_Name", associateBusinessName, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Specialty", associateSpecialty, SqlDbType.VarChar, 30));
		cmd.Parameters.Add(CreateParameter("@Associate_Greeting", associateGreeting, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Address_1", associateAddress1, SqlDbType.VarChar, 300));
		cmd.Parameters.Add(CreateParameter("@Associate_Address_2", associateAddress2, SqlDbType.VarChar, 300));
		cmd.Parameters.Add(CreateParameter("@Associate_Address_3", associateAddress3, SqlDbType.VarChar, 300));
		cmd.Parameters.Add(CreateParameter("@Associate_City", associateCity, SqlDbType.VarChar, 300));
		cmd.Parameters.Add(CreateParameter("@Associate_State", associateState, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Zip_Code", associateZipCode, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Phone", associatePhone, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Fax", associateFax, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_EMail", associateEMail, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Referral_User_ID", referralUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Primary_Associate", primaryAssociate, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Informal_Associate", informalAssociate, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Referral_Location_ID", referralLocationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Associate_Type_ID", associateTypeID, SqlDbType.SmallInt, 2));
		cmd.Parameters.Add(CreateParameter("@AddToDB", addToDB, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@AutoFax", autoFax, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Associate_Company", associateCompany, SqlDbType.VarChar, 100));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> AddTranscriptionPreviewAssociate3Async(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 associateID, String associateClientCode, String associatePrefix, String associateNameFirst, String associateNameMiddle, String associateNameLast, String associateSuffix, String associateBusinessName, String associateSpecialty, String associateGreeting, String associateAddress1, String associateAddress2, String associateAddress3, String associateCity, String associateState, String associateZipCode, String associatePhone, String associateFax, String associateEMail, Int32 referralUserID, Boolean primaryAssociate, Boolean informalAssociate, Int32 referralLocationID, Int16 associateTypeID, Boolean addToDB, Boolean autoFax, String associateCompany) => AddTranscriptionPreviewAssociate3Async(connection, transcriptionID, clientID, associateID, associateClientCode, associatePrefix, associateNameFirst, associateNameMiddle, associateNameLast, associateSuffix, associateBusinessName, associateSpecialty, associateGreeting, associateAddress1, associateAddress2, associateAddress3, associateCity, associateState, associateZipCode, associatePhone, associateFax, associateEMail, referralUserID, primaryAssociate, informalAssociate, referralLocationID, associateTypeID, addToDB, autoFax, associateCompany, CancellationToken.None);
	public static async Task<Int32> AddTranscriptionPreviewAssociate3Async(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 associateID, String associateClientCode, String associatePrefix, String associateNameFirst, String associateNameMiddle, String associateNameLast, String associateSuffix, String associateBusinessName, String associateSpecialty, String associateGreeting, String associateAddress1, String associateAddress2, String associateAddress3, String associateCity, String associateState, String associateZipCode, String associatePhone, String associateFax, String associateEMail, Int32 referralUserID, Boolean primaryAssociate, Boolean informalAssociate, Int32 referralLocationID, Int16 associateTypeID, Boolean addToDB, Boolean autoFax, String associateCompany, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Transcription_Preview_Associate_3");

		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Associate_ID", associateID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Associate_Client_Code", associateClientCode, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Prefix", associatePrefix, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@Associate_Name_First", associateNameFirst, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Associate_Name_Middle", associateNameMiddle, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Associate_Name_Last", associateNameLast, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Associate_Suffix", associateSuffix, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Business_Name", associateBusinessName, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Specialty", associateSpecialty, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Associate_Greeting", associateGreeting, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Address_1", associateAddress1, SqlDbType.VarChar, 300));
		cmd.Parameters.Add(CreateParameter("@Associate_Address_2", associateAddress2, SqlDbType.VarChar, 300));
		cmd.Parameters.Add(CreateParameter("@Associate_Address_3", associateAddress3, SqlDbType.VarChar, 300));
		cmd.Parameters.Add(CreateParameter("@Associate_City", associateCity, SqlDbType.VarChar, 300));
		cmd.Parameters.Add(CreateParameter("@Associate_State", associateState, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Zip_Code", associateZipCode, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Phone", associatePhone, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_Fax", associateFax, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Associate_EMail", associateEMail, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Referral_User_ID", referralUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Primary_Associate", primaryAssociate, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Informal_Associate", informalAssociate, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Referral_Location_ID", referralLocationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Associate_Type_ID", associateTypeID, SqlDbType.SmallInt, 2));
		cmd.Parameters.Add(CreateParameter("@AddToDB", addToDB, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@AutoFax", autoFax, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Associate_Company", associateCompany, SqlDbType.VarChar, 100));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<List<AddTranscriptionPreviewOrderRow>> AddTranscriptionPreviewOrderAsync(SqlConnection connection, Int32 previewID, Int32 clientID, Guid orderID, String patientID, Guid appointmentID, String accountNumber, String orderNumber, String accessionNumber, String orderStatusCode, DateTime dateObserved, DateTime dateRequested, String itemCode, String description, String notes, String userField1, String userField2, String userField3, String userField4, String userField5, Int32 transcriptionistID) => AddTranscriptionPreviewOrderAsync(connection, previewID, clientID, orderID, patientID, appointmentID, accountNumber, orderNumber, accessionNumber, orderStatusCode, dateObserved, dateRequested, itemCode, description, notes, userField1, userField2, userField3, userField4, userField5, transcriptionistID, CancellationToken.None);
	public static async Task<List<AddTranscriptionPreviewOrderRow>> AddTranscriptionPreviewOrderAsync(SqlConnection connection, Int32 previewID, Int32 clientID, Guid orderID, String patientID, Guid appointmentID, String accountNumber, String orderNumber, String accessionNumber, String orderStatusCode, DateTime dateObserved, DateTime dateRequested, String itemCode, String description, String notes, String userField1, String userField2, String userField3, String userField4, String userField5, Int32 transcriptionistID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Transcription_Preview_Order");

		cmd.Parameters.Add(CreateParameter("@Preview_ID", previewID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Order_ID", orderID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Appointment_ID", appointmentID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Account_Number", accountNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Order_Number", orderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Accession_Number", accessionNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Order_Status_Code", orderStatusCode, SqlDbType.Char, 2));
		cmd.Parameters.Add(CreateParameter("@Date_Observed", dateObserved, SqlDbType.DateTime2, 8));
		cmd.Parameters.Add(CreateParameter("@Date_Requested", dateRequested, SqlDbType.DateTime2, 8));
		cmd.Parameters.Add(CreateParameter("@Item_Code", itemCode, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Description", description, SqlDbType.VarChar, 500));
		cmd.Parameters.Add(CreateParameter("@Notes", notes, SqlDbType.VarChar, 1000));
		cmd.Parameters.Add(CreateParameter("@User_Field_1", userField1, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_2", userField2, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_3", userField3, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_4", userField4, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_5", userField5, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));

		var result = new List<AddTranscriptionPreviewOrderRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionPreviewOrderID = reader.GetOrdinal("Transcription_Preview_Order_ID");

			do
			{
				result.Add(new AddTranscriptionPreviewOrderRow
				{
					TranscriptionPreviewOrderID = GetFieldValue<Int32>(reader, ordTranscriptionPreviewOrderID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<Int32> AddTranscriptionPreviewOrderProviderAsync(SqlConnection connection, Int32 transcriptionPreviewOrderID, Int32 clientID, Int32 previewID, Guid ordersProviderID, Guid orderID, String providerClientCode, Int32 providerRoleID, String namePrefix, String nameFirst, String nameMiddle, String nameLast, String nameSuffix, Int32 transcriptionistID) => AddTranscriptionPreviewOrderProviderAsync(connection, transcriptionPreviewOrderID, clientID, previewID, ordersProviderID, orderID, providerClientCode, providerRoleID, namePrefix, nameFirst, nameMiddle, nameLast, nameSuffix, transcriptionistID, CancellationToken.None);
	public static async Task<Int32> AddTranscriptionPreviewOrderProviderAsync(SqlConnection connection, Int32 transcriptionPreviewOrderID, Int32 clientID, Int32 previewID, Guid ordersProviderID, Guid orderID, String providerClientCode, Int32 providerRoleID, String namePrefix, String nameFirst, String nameMiddle, String nameLast, String nameSuffix, Int32 transcriptionistID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Transcription_Preview_Order_Provider");

		cmd.Parameters.Add(CreateParameter("@Transcription_Preview_Order_ID", transcriptionPreviewOrderID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Preview_ID", previewID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Orders_Provider_ID", ordersProviderID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Order_ID", orderID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Provider_Client_Code", providerClientCode, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Provider_Role_ID", providerRoleID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Name_Prefix", namePrefix, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@Name_First", nameFirst, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Name_Middle", nameMiddle, SqlDbType.VarChar, 1));
		cmd.Parameters.Add(CreateParameter("@Name_Last", nameLast, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Name_Suffix", nameSuffix, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> AddTranscriptionPreviewOrderProvider2Async(SqlConnection connection, Int32 transcriptionPreviewOrderID, Int32 clientID, Int32 previewID, Guid ordersProviderID, Guid orderID, String providerClientCode, Int32 providerRoleID, String namePrefix, String nameFirst, String nameMiddle, String nameLast, String nameSuffix, Int32 transcriptionistID) => AddTranscriptionPreviewOrderProvider2Async(connection, transcriptionPreviewOrderID, clientID, previewID, ordersProviderID, orderID, providerClientCode, providerRoleID, namePrefix, nameFirst, nameMiddle, nameLast, nameSuffix, transcriptionistID, CancellationToken.None);
	public static async Task<Int32> AddTranscriptionPreviewOrderProvider2Async(SqlConnection connection, Int32 transcriptionPreviewOrderID, Int32 clientID, Int32 previewID, Guid ordersProviderID, Guid orderID, String providerClientCode, Int32 providerRoleID, String namePrefix, String nameFirst, String nameMiddle, String nameLast, String nameSuffix, Int32 transcriptionistID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Transcription_Preview_Order_Provider_2");

		cmd.Parameters.Add(CreateParameter("@Transcription_Preview_Order_ID", transcriptionPreviewOrderID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Preview_ID", previewID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Orders_Provider_ID", ordersProviderID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Order_ID", orderID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Provider_Client_Code", providerClientCode, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Provider_Role_ID", providerRoleID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Name_Prefix", namePrefix, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@Name_First", nameFirst, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Name_Middle", nameMiddle, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Name_Last", nameLast, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Name_Suffix", nameSuffix, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> AddTranscriptionPreviewQAAsync(SqlConnection connection, Int32 previewID, Int32 transcriptionistID, Int32 transcriptionID) => AddTranscriptionPreviewQAAsync(connection, previewID, transcriptionistID, transcriptionID, CancellationToken.None);
	public static async Task<Int32> AddTranscriptionPreviewQAAsync(SqlConnection connection, Int32 previewID, Int32 transcriptionistID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Transcription_Preview_QA");

		cmd.Parameters.Add(CreateParameter("@Preview_ID", previewID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> AddTranscriptionPreviewSignatureAsync(SqlConnection connection, Int32 transcriptionID, Int32 clientId, Int32 userID, Int32 lastOrder) => AddTranscriptionPreviewSignatureAsync(connection, transcriptionID, clientId, userID, lastOrder, CancellationToken.None);
	public static async Task<Int32> AddTranscriptionPreviewSignatureAsync(SqlConnection connection, Int32 transcriptionID, Int32 clientId, Int32 userID, Int32 lastOrder, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Transcription_Preview_Signature");

		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_Id", clientId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Last_Order", lastOrder, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<List<AddTranscriptionVersionRow>> AddTranscriptionVersionAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID, Guid transcriptionContentVersionID, Int64 logID, DateTime modifiedDate, String modifiedUser) => AddTranscriptionVersionAsync(connection, clientID, transcriptionID, transcriptionContentVersionID, logID, modifiedDate, modifiedUser, CancellationToken.None);
	public static async Task<List<AddTranscriptionVersionRow>> AddTranscriptionVersionAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID, Guid transcriptionContentVersionID, Int64 logID, DateTime modifiedDate, String modifiedUser, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Transcription_Version");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_Content_Version_ID", transcriptionContentVersionID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Log_ID", logID, SqlDbType.BigInt, 8));
		cmd.Parameters.Add(CreateParameter("@Modified_Date", modifiedDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));

		var result = new List<AddTranscriptionVersionRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionVersionID = reader.GetOrdinal("Transcription_Version_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordTranscriptionContentVersionID = reader.GetOrdinal("Transcription_Content_Version_ID");
			int ordLogID = reader.GetOrdinal("Log_ID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordData = reader.GetOrdinal("Data");

			do
			{
				result.Add(new AddTranscriptionVersionRow
				{
					TranscriptionVersionID = GetNonNullFieldValue<Guid>(reader, ordTranscriptionVersionID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					TranscriptionContentVersionID = GetFieldValue<Guid>(reader, ordTranscriptionContentVersionID),
					LogID = GetFieldValue<Int64>(reader, ordLogID),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
					Data = GetField<String>(reader, ordData),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AddWorkItemRow>> AddWorkItemAsync(SqlConnection connection, Int32 transcriptionistID, Int32 clientID, String machineName, Int32 transcriptionID, Int32 originalTranscriptionID) => AddWorkItemAsync(connection, transcriptionistID, clientID, machineName, transcriptionID, originalTranscriptionID, CancellationToken.None);
	public static async Task<List<AddWorkItemRow>> AddWorkItemAsync(SqlConnection connection, Int32 transcriptionistID, Int32 clientID, String machineName, Int32 transcriptionID, Int32 originalTranscriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Add_Work_Item");

		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Machine_name", machineName, SqlDbType.NVarChar, 512));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_Transcription_ID", originalTranscriptionID, SqlDbType.Int, 4));

		var result = new List<AddWorkItemRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordWorkItemID = reader.GetOrdinal("Work_Item_ID");

			do
			{
				result.Add(new AddWorkItemRow
				{
					WorkItemID = GetFieldValue<Guid>(reader, ordWorkItemID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<ASRGetTranscriptionPreviewCDASortStyleSheetRow>> ASRGetTranscriptionPreviewCDASortStyleSheetAsync(SqlConnection connection, Int32 previewID) => ASRGetTranscriptionPreviewCDASortStyleSheetAsync(connection, previewID, CancellationToken.None);
	public static async Task<List<ASRGetTranscriptionPreviewCDASortStyleSheetRow>> ASRGetTranscriptionPreviewCDASortStyleSheetAsync(SqlConnection connection, Int32 previewID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.ASR_Get_TranscriptionPreview_CDA_SortStyleSheet");

		cmd.Parameters.Add(CreateParameter("@Preview_ID", previewID, SqlDbType.Int, 4));

		var result = new List<ASRGetTranscriptionPreviewCDASortStyleSheetRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordSortStyleSheetPath = reader.GetOrdinal("SortStyleSheet_Path");

			do
			{
				result.Add(new ASRGetTranscriptionPreviewCDASortStyleSheetRow
				{
					SortStyleSheetPath = GetField<String>(reader, ordSortStyleSheetPath),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<ASRGetTranscriptionPreviewCDAStylesheetRow>> ASRGetTranscriptionPreviewCDAStylesheetAsync(SqlConnection connection, Int32 previewID) => ASRGetTranscriptionPreviewCDAStylesheetAsync(connection, previewID, CancellationToken.None);
	public static async Task<List<ASRGetTranscriptionPreviewCDAStylesheetRow>> ASRGetTranscriptionPreviewCDAStylesheetAsync(SqlConnection connection, Int32 previewID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.ASR_Get_TranscriptionPreview_CDA_Stylesheet");

		cmd.Parameters.Add(CreateParameter("@Preview_ID", previewID, SqlDbType.Int, 4));

		var result = new List<ASRGetTranscriptionPreviewCDAStylesheetRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordXSLStyleSheetPath = reader.GetOrdinal("XSLStyleSheetPath");
			int ordIsCDSOnly = reader.GetOrdinal("Is_CDS_Only");

			do
			{
				result.Add(new ASRGetTranscriptionPreviewCDAStylesheetRow
				{
					XSLStyleSheetPath = GetField<String>(reader, ordXSLStyleSheetPath),
					IsCDSOnly = GetFieldValue<Boolean>(reader, ordIsCDSOnly),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<ASRGetWorkItemCDASortStyleSheetRow>> ASRGetWorkItemCDASortStyleSheetAsync(SqlConnection connection, Guid workItemID) => ASRGetWorkItemCDASortStyleSheetAsync(connection, workItemID, CancellationToken.None);
	public static async Task<List<ASRGetWorkItemCDASortStyleSheetRow>> ASRGetWorkItemCDASortStyleSheetAsync(SqlConnection connection, Guid workItemID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.ASR_Get_WorkItem_CDA_SortStyleSheet");

		cmd.Parameters.Add(CreateParameter("@Work_Item_ID", workItemID, SqlDbType.UniqueIdentifier, 16));

		var result = new List<ASRGetWorkItemCDASortStyleSheetRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordSortStyleSheetPath = reader.GetOrdinal("SortStyleSheet_Path");

			do
			{
				result.Add(new ASRGetWorkItemCDASortStyleSheetRow
				{
					SortStyleSheetPath = GetField<String>(reader, ordSortStyleSheetPath),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<ASRGetWorkItemCDAStylesheetRow>> ASRGetWorkItemCDAStylesheetAsync(SqlConnection connection, Guid workItemID) => ASRGetWorkItemCDAStylesheetAsync(connection, workItemID, CancellationToken.None);
	public static async Task<List<ASRGetWorkItemCDAStylesheetRow>> ASRGetWorkItemCDAStylesheetAsync(SqlConnection connection, Guid workItemID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.ASR_Get_WorkItem_CDA_Stylesheet");

		cmd.Parameters.Add(CreateParameter("@Work_Item_ID", workItemID, SqlDbType.UniqueIdentifier, 16));

		var result = new List<ASRGetWorkItemCDAStylesheetRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordXSLStyleSheetPath = reader.GetOrdinal("XSLStyleSheetPath");
			int ordIsCDSOnly = reader.GetOrdinal("Is_CDS_Only");

			do
			{
				result.Add(new ASRGetWorkItemCDAStylesheetRow
				{
					XSLStyleSheetPath = GetField<String>(reader, ordXSLStyleSheetPath),
					IsCDSOnly = GetFieldValue<Boolean>(reader, ordIsCDSOnly),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateAndroidUserRow>> AuthenticateAndroidUserAsync(SqlConnection connection, String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion) => AuthenticateAndroidUserAsync(connection, clientName, userName, userPass, iPAddress, workstation, programVersion, CancellationToken.None);
	public static async Task<List<AuthenticateAndroidUserRow>> AuthenticateAndroidUserAsync(SqlConnection connection, String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_Android_User");

		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 8));
		cmd.Parameters.Add(CreateParameter("@UserPass", userPass, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));

		var result = new List<AuthenticateAndroidUserRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");

			do
			{
				result.Add(new AuthenticateAndroidUserRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateAndroidUserWithHashRow>> AuthenticateAndroidUserWithHashAsync(SqlConnection connection, String clientName, String userName, Byte[] passwordHash, String iPAddress, String workstation, String programVersion) => AuthenticateAndroidUserWithHashAsync(connection, clientName, userName, passwordHash, iPAddress, workstation, programVersion, CancellationToken.None);
	public static async Task<List<AuthenticateAndroidUserWithHashRow>> AuthenticateAndroidUserWithHashAsync(SqlConnection connection, String clientName, String userName, Byte[] passwordHash, String iPAddress, String workstation, String programVersion, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_Android_User_With_Hash");

		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Password_Hash", passwordHash, SqlDbType.VarBinary, 128));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));

		var result = new List<AuthenticateAndroidUserWithHashRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordIsLocked = reader.GetOrdinal("Is_Locked");
			int ordPasswordLockTimeout = reader.GetOrdinal("Password_Lock_Timeout");
			int ordPasswordDaysLeft = reader.GetOrdinal("Password_Days_Left");
			int ordUserDictates = reader.GetOrdinal("User_Dictates");
			int ordPasswordExpirationWarningDays = reader.GetOrdinal("Password_Expiration_Warning_Days");

			do
			{
				result.Add(new AuthenticateAndroidUserWithHashRow
				{
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					IsLocked = GetFieldValue<Boolean>(reader, ordIsLocked),
					PasswordLockTimeout = GetFieldValue<Int32>(reader, ordPasswordLockTimeout),
					PasswordDaysLeft = GetFieldValue<Int32>(reader, ordPasswordDaysLeft),
					UserDictates = GetFieldValue<Boolean>(reader, ordUserDictates),
					PasswordExpirationWarningDays = GetFieldValue<Int32>(reader, ordPasswordExpirationWarningDays),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateAndroidUserWithLinkedAccountRow>> AuthenticateAndroidUserWithLinkedAccountAsync(SqlConnection connection, Int32 clientID, Int32 userID, String userPass, String iPAddress, String workstation, String programVersion, Guid masterSessionKey) => AuthenticateAndroidUserWithLinkedAccountAsync(connection, clientID, userID, userPass, iPAddress, workstation, programVersion, masterSessionKey, CancellationToken.None);
	public static async Task<List<AuthenticateAndroidUserWithLinkedAccountRow>> AuthenticateAndroidUserWithLinkedAccountAsync(SqlConnection connection, Int32 clientID, Int32 userID, String userPass, String iPAddress, String workstation, String programVersion, Guid masterSessionKey, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_Android_User_With_Linked_Account");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@UserPass", userPass, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Master_Session_Key", masterSessionKey, SqlDbType.UniqueIdentifier, 16));

		var result = new List<AuthenticateAndroidUserWithLinkedAccountRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordIsLocked = reader.GetOrdinal("Is_Locked");
			int ordPasswordLockTimeout = reader.GetOrdinal("Password_Lock_Timeout");
			int ordPasswordDaysLeft = reader.GetOrdinal("Password_Days_Left");
			int ordCanSavePassword = reader.GetOrdinal("Can_Save_Password");
			int ordUserDictates = reader.GetOrdinal("User_Dictates");
			int ordPasswordExpirationWarningDays = reader.GetOrdinal("Password_Expiration_Warning_Days");

			do
			{
				result.Add(new AuthenticateAndroidUserWithLinkedAccountRow
				{
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					IsLocked = GetFieldValue<Boolean>(reader, ordIsLocked),
					PasswordLockTimeout = GetFieldValue<Int32>(reader, ordPasswordLockTimeout),
					PasswordDaysLeft = GetFieldValue<Int32>(reader, ordPasswordDaysLeft),
					CanSavePassword = GetFieldValue<Boolean>(reader, ordCanSavePassword),
					UserDictates = GetFieldValue<Boolean>(reader, ordUserDictates),
					PasswordExpirationWarningDays = GetFieldValue<Int32>(reader, ordPasswordExpirationWarningDays),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateAndroidUserWithLinkedAccountWithHashRow>> AuthenticateAndroidUserWithLinkedAccountWithHashAsync(SqlConnection connection, Int32 clientID, Int32 userID, Byte[] passwordHash, String iPAddress, String workstation, String programVersion, Guid masterSessionKey) => AuthenticateAndroidUserWithLinkedAccountWithHashAsync(connection, clientID, userID, passwordHash, iPAddress, workstation, programVersion, masterSessionKey, CancellationToken.None);
	public static async Task<List<AuthenticateAndroidUserWithLinkedAccountWithHashRow>> AuthenticateAndroidUserWithLinkedAccountWithHashAsync(SqlConnection connection, Int32 clientID, Int32 userID, Byte[] passwordHash, String iPAddress, String workstation, String programVersion, Guid masterSessionKey, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_Android_User_With_Linked_Account_With_Hash");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Password_Hash", passwordHash, SqlDbType.VarBinary, 128));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Master_Session_Key", masterSessionKey, SqlDbType.UniqueIdentifier, 16));

		var result = new List<AuthenticateAndroidUserWithLinkedAccountWithHashRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordIsLocked = reader.GetOrdinal("Is_Locked");
			int ordPasswordLockTimeout = reader.GetOrdinal("Password_Lock_Timeout");
			int ordPasswordDaysLeft = reader.GetOrdinal("Password_Days_Left");
			int ordCanSavePassword = reader.GetOrdinal("Can_Save_Password");
			int ordUserDictates = reader.GetOrdinal("User_Dictates");
			int ordPasswordExpirationWarningDays = reader.GetOrdinal("Password_Expiration_Warning_Days");

			do
			{
				result.Add(new AuthenticateAndroidUserWithLinkedAccountWithHashRow
				{
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					IsLocked = GetFieldValue<Boolean>(reader, ordIsLocked),
					PasswordLockTimeout = GetFieldValue<Int32>(reader, ordPasswordLockTimeout),
					PasswordDaysLeft = GetFieldValue<Int32>(reader, ordPasswordDaysLeft),
					CanSavePassword = GetFieldValue<Boolean>(reader, ordCanSavePassword),
					UserDictates = GetFieldValue<Boolean>(reader, ordUserDictates),
					PasswordExpirationWarningDays = GetFieldValue<Int32>(reader, ordPasswordExpirationWarningDays),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateAndroidUserWithLockRow>> AuthenticateAndroidUserWithLockAsync(SqlConnection connection, String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion) => AuthenticateAndroidUserWithLockAsync(connection, clientName, userName, userPass, iPAddress, workstation, programVersion, CancellationToken.None);
	public static async Task<List<AuthenticateAndroidUserWithLockRow>> AuthenticateAndroidUserWithLockAsync(SqlConnection connection, String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_Android_User_With_Lock");

		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 8));
		cmd.Parameters.Add(CreateParameter("@UserPass", userPass, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));

		var result = new List<AuthenticateAndroidUserWithLockRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordIsLocked = reader.GetOrdinal("Is_Locked");
			int ordPasswordLockTimeout = reader.GetOrdinal("Password_Lock_Timeout");
			int ordPasswordDaysLeft = reader.GetOrdinal("Password_Days_Left");
			int ordUserDictates = reader.GetOrdinal("User_Dictates");
			int ordPasswordExpirationWarningDays = reader.GetOrdinal("Password_Expiration_Warning_Days");

			do
			{
				result.Add(new AuthenticateAndroidUserWithLockRow
				{
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					IsLocked = GetFieldValue<Boolean>(reader, ordIsLocked),
					PasswordLockTimeout = GetFieldValue<Int32>(reader, ordPasswordLockTimeout),
					PasswordDaysLeft = GetFieldValue<Int32>(reader, ordPasswordDaysLeft),
					UserDictates = GetFieldValue<Boolean>(reader, ordUserDictates),
					PasswordExpirationWarningDays = GetFieldValue<Int32>(reader, ordPasswordExpirationWarningDays),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateInScribeUserForPasswordResetRow>> AuthenticateInScribeUserForPasswordResetAsync(SqlConnection connection, String companyCode, String userName, String iPAddress, String workstation, String programVersion) => AuthenticateInScribeUserForPasswordResetAsync(connection, companyCode, userName, iPAddress, workstation, programVersion, CancellationToken.None);
	public static async Task<List<AuthenticateInScribeUserForPasswordResetRow>> AuthenticateInScribeUserForPasswordResetAsync(SqlConnection connection, String companyCode, String userName, String iPAddress, String workstation, String programVersion, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_InScribe_User_For_Password_Reset");

		cmd.Parameters.Add(CreateParameter("@Company_Code", companyCode, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));

		var result = new List<AuthenticateInScribeUserForPasswordResetRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionistID = reader.GetOrdinal("Transcriptionist_ID");
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordIsLocked = reader.GetOrdinal("Is_Locked");
			int ordPasswordLockTimeout = reader.GetOrdinal("Password_Lock_Timeout");

			do
			{
				result.Add(new AuthenticateInScribeUserForPasswordResetRow
				{
					TranscriptionistID = GetFieldValue<Int32>(reader, ordTranscriptionistID),
					CompanyID = GetFieldValue<Int32>(reader, ordCompanyID),
					IsLocked = GetFieldValue<Boolean>(reader, ordIsLocked),
					PasswordLockTimeout = GetFieldValue<Int32>(reader, ordPasswordLockTimeout),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateInScribeUserWithHashRow>> AuthenticateInScribeUserWithHashAsync(SqlConnection connection, String companyCode, String userName, Byte[] passwordHash, String iPAddress, String workstation, String programVersion) => AuthenticateInScribeUserWithHashAsync(connection, companyCode, userName, passwordHash, iPAddress, workstation, programVersion, CancellationToken.None);
	public static async Task<List<AuthenticateInScribeUserWithHashRow>> AuthenticateInScribeUserWithHashAsync(SqlConnection connection, String companyCode, String userName, Byte[] passwordHash, String iPAddress, String workstation, String programVersion, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_InScribe_User_With_Hash");

		cmd.Parameters.Add(CreateParameter("@Company_Code", companyCode, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Password_Hash", passwordHash, SqlDbType.VarBinary, 128));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));

		var result = new List<AuthenticateInScribeUserWithHashRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionistID = reader.GetOrdinal("Transcriptionist_ID");
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordIsLocked = reader.GetOrdinal("Is_Locked");
			int ordPasswordLockTimeout = reader.GetOrdinal("Password_Lock_Timeout");
			int ordPasswordDaysLeft = reader.GetOrdinal("Password_Days_Left");

			do
			{
				result.Add(new AuthenticateInScribeUserWithHashRow
				{
					TranscriptionistID = GetFieldValue<Int32>(reader, ordTranscriptionistID),
					CompanyID = GetFieldValue<Int32>(reader, ordCompanyID),
					IsLocked = GetFieldValue<Boolean>(reader, ordIsLocked),
					PasswordLockTimeout = GetFieldValue<Int32>(reader, ordPasswordLockTimeout),
					PasswordDaysLeft = GetFieldValue<Int32>(reader, ordPasswordDaysLeft),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateInScribeUserWithLockRow>> AuthenticateInScribeUserWithLockAsync(SqlConnection connection, String companyCode, String userName, String userPass, String iPAddress, String workstation, String programVersion) => AuthenticateInScribeUserWithLockAsync(connection, companyCode, userName, userPass, iPAddress, workstation, programVersion, CancellationToken.None);
	public static async Task<List<AuthenticateInScribeUserWithLockRow>> AuthenticateInScribeUserWithLockAsync(SqlConnection connection, String companyCode, String userName, String userPass, String iPAddress, String workstation, String programVersion, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_InScribe_User_With_Lock");

		cmd.Parameters.Add(CreateParameter("@Company_Code", companyCode, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserPass", userPass, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));

		var result = new List<AuthenticateInScribeUserWithLockRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionistID = reader.GetOrdinal("Transcriptionist_ID");
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordIsLocked = reader.GetOrdinal("Is_Locked");
			int ordPasswordLockTimeout = reader.GetOrdinal("Password_Lock_Timeout");
			int ordPasswordDaysLeft = reader.GetOrdinal("Password_Days_Left");

			do
			{
				result.Add(new AuthenticateInScribeUserWithLockRow
				{
					TranscriptionistID = GetFieldValue<Int32>(reader, ordTranscriptionistID),
					CompanyID = GetFieldValue<Int32>(reader, ordCompanyID),
					IsLocked = GetFieldValue<Boolean>(reader, ordIsLocked),
					PasswordLockTimeout = GetFieldValue<Int32>(reader, ordPasswordLockTimeout),
					PasswordDaysLeft = GetFieldValue<Int32>(reader, ordPasswordDaysLeft),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateInScribeUserWithLock2Row>> AuthenticateInScribeUserWithLock2Async(SqlConnection connection, String companyCode, String userName, String userPass, String iPAddress, String workstation, String programVersion) => AuthenticateInScribeUserWithLock2Async(connection, companyCode, userName, userPass, iPAddress, workstation, programVersion, CancellationToken.None);
	public static async Task<List<AuthenticateInScribeUserWithLock2Row>> AuthenticateInScribeUserWithLock2Async(SqlConnection connection, String companyCode, String userName, String userPass, String iPAddress, String workstation, String programVersion, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_InScribe_User_With_Lock2");

		cmd.Parameters.Add(CreateParameter("@Company_Code", companyCode, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserPass", userPass, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));

		var result = new List<AuthenticateInScribeUserWithLock2Row>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionistID = reader.GetOrdinal("Transcriptionist_ID");
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordIsLocked = reader.GetOrdinal("Is_Locked");
			int ordPasswordLockTimeout = reader.GetOrdinal("Password_Lock_Timeout");
			int ordPasswordDaysLeft = reader.GetOrdinal("Password_Days_Left");

			do
			{
				result.Add(new AuthenticateInScribeUserWithLock2Row
				{
					TranscriptionistID = GetFieldValue<Int32>(reader, ordTranscriptionistID),
					CompanyID = GetFieldValue<Int32>(reader, ordCompanyID),
					IsLocked = GetFieldValue<Boolean>(reader, ordIsLocked),
					PasswordLockTimeout = GetFieldValue<Int32>(reader, ordPasswordLockTimeout),
					PasswordDaysLeft = GetFieldValue<Int32>(reader, ordPasswordDaysLeft),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateInSyncUserRow>> AuthenticateInSyncUserAsync(SqlConnection connection, String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion) => AuthenticateInSyncUserAsync(connection, clientName, userName, userPass, iPAddress, workstation, programVersion, CancellationToken.None);
	public static async Task<List<AuthenticateInSyncUserRow>> AuthenticateInSyncUserAsync(SqlConnection connection, String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_InSync_User");

		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 8));
		cmd.Parameters.Add(CreateParameter("@UserPass", userPass, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));

		var result = new List<AuthenticateInSyncUserRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");

			do
			{
				result.Add(new AuthenticateInSyncUserRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateInSyncUserWithHashRow>> AuthenticateInSyncUserWithHashAsync(SqlConnection connection, String clientName, String userName, Byte[] passwordHash, String iPAddress, String workstation, String programVersion) => AuthenticateInSyncUserWithHashAsync(connection, clientName, userName, passwordHash, iPAddress, workstation, programVersion, CancellationToken.None);
	public static async Task<List<AuthenticateInSyncUserWithHashRow>> AuthenticateInSyncUserWithHashAsync(SqlConnection connection, String clientName, String userName, Byte[] passwordHash, String iPAddress, String workstation, String programVersion, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_InSync_User_With_Hash");

		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Password_Hash", passwordHash, SqlDbType.VarBinary, 128));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));

		var result = new List<AuthenticateInSyncUserWithHashRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordIsLocked = reader.GetOrdinal("Is_Locked");
			int ordPasswordLockTimeout = reader.GetOrdinal("Password_Lock_Timeout");
			int ordPasswordDaysLeft = reader.GetOrdinal("Password_Days_Left");

			do
			{
				result.Add(new AuthenticateInSyncUserWithHashRow
				{
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					IsLocked = GetFieldValue<Boolean>(reader, ordIsLocked),
					PasswordLockTimeout = GetFieldValue<Int32>(reader, ordPasswordLockTimeout),
					PasswordDaysLeft = GetFieldValue<Int32>(reader, ordPasswordDaysLeft),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateInSyncUserWithLockRow>> AuthenticateInSyncUserWithLockAsync(SqlConnection connection, String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion) => AuthenticateInSyncUserWithLockAsync(connection, clientName, userName, userPass, iPAddress, workstation, programVersion, CancellationToken.None);
	public static async Task<List<AuthenticateInSyncUserWithLockRow>> AuthenticateInSyncUserWithLockAsync(SqlConnection connection, String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_InSync_User_With_Lock");

		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 8));
		cmd.Parameters.Add(CreateParameter("@UserPass", userPass, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));

		var result = new List<AuthenticateInSyncUserWithLockRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordIsLocked = reader.GetOrdinal("Is_Locked");
			int ordPasswordLockTimeout = reader.GetOrdinal("Password_Lock_Timeout");
			int ordPasswordDaysLeft = reader.GetOrdinal("Password_Days_Left");

			do
			{
				result.Add(new AuthenticateInSyncUserWithLockRow
				{
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					IsLocked = GetFieldValue<Boolean>(reader, ordIsLocked),
					PasswordLockTimeout = GetFieldValue<Int32>(reader, ordPasswordLockTimeout),
					PasswordDaysLeft = GetFieldValue<Int32>(reader, ordPasswordDaysLeft),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateInTouchServerRow>> AuthenticateInTouchServerAsync(SqlConnection connection, String companyCode, String machineCode, String iPAddress, String password) => AuthenticateInTouchServerAsync(connection, companyCode, machineCode, iPAddress, password, CancellationToken.None);
	public static async Task<List<AuthenticateInTouchServerRow>> AuthenticateInTouchServerAsync(SqlConnection connection, String companyCode, String machineCode, String iPAddress, String password, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_InTouch_Server");

		cmd.Parameters.Add(CreateParameter("@CompanyCode", companyCode, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@MachineCode", machineCode, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Password", password, SqlDbType.VarChar, 20));

		var result = new List<AuthenticateInTouchServerRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordCompanyCode = reader.GetOrdinal("Company_Code");
			int ordCompanyActive = reader.GetOrdinal("Company_Active");
			int ordServerId = reader.GetOrdinal("Server_Id");
			int ordMachineCode = reader.GetOrdinal("Machine_Code");

			do
			{
				result.Add(new AuthenticateInTouchServerRow
				{
					CompanyID = GetNonNullFieldValue<Int32>(reader, ordCompanyID),
					CompanyCode = GetNonNullField<String>(reader, ordCompanyCode),
					CompanyActive = GetNonNullFieldValue<Boolean>(reader, ordCompanyActive),
					ServerId = GetNonNullFieldValue<Int32>(reader, ordServerId),
					MachineCode = GetField<String>(reader, ordMachineCode),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateInTouchUserRow>> AuthenticateInTouchUserAsync(SqlConnection connection, String clientName, String userName, Int32 userPin, String iPAddress, String workstation, String programVersion) => AuthenticateInTouchUserAsync(connection, clientName, userName, userPin, iPAddress, workstation, programVersion, CancellationToken.None);
	public static async Task<List<AuthenticateInTouchUserRow>> AuthenticateInTouchUserAsync(SqlConnection connection, String clientName, String userName, Int32 userPin, String iPAddress, String workstation, String programVersion, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_InTouch_User");

		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserPin", userPin, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));

		var result = new List<AuthenticateInTouchUserRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");

			do
			{
				result.Add(new AuthenticateInTouchUserRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateInTouchAccountRow>> AuthenticateInTouchAccountAsync(SqlConnection connection, String companyCode, String machineCode, String iPAddress) => AuthenticateInTouchAccountAsync(connection, companyCode, machineCode, iPAddress, CancellationToken.None);
	public static async Task<List<AuthenticateInTouchAccountRow>> AuthenticateInTouchAccountAsync(SqlConnection connection, String companyCode, String machineCode, String iPAddress, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_InTouchAccount");

		cmd.Parameters.Add(CreateParameter("@CompanyCode", companyCode, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@MachineCode", machineCode, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));

		var result = new List<AuthenticateInTouchAccountRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordCompanyCode = reader.GetOrdinal("Company_Code");
			int ordCompanyActive = reader.GetOrdinal("Company_Active");
			int ordInTouchAccountId = reader.GetOrdinal("InTouchAccount_Id");
			int ordMachineCode = reader.GetOrdinal("Machine_Code");

			do
			{
				result.Add(new AuthenticateInTouchAccountRow
				{
					CompanyID = GetNonNullFieldValue<Int32>(reader, ordCompanyID),
					CompanyCode = GetNonNullField<String>(reader, ordCompanyCode),
					CompanyActive = GetNonNullFieldValue<Boolean>(reader, ordCompanyActive),
					InTouchAccountId = GetNonNullFieldValue<Int32>(reader, ordInTouchAccountId),
					MachineCode = GetField<String>(reader, ordMachineCode),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateIPhoneUserRow>> AuthenticateIPhoneUserAsync(SqlConnection connection, String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion) => AuthenticateIPhoneUserAsync(connection, clientName, userName, userPass, iPAddress, workstation, programVersion, CancellationToken.None);
	public static async Task<List<AuthenticateIPhoneUserRow>> AuthenticateIPhoneUserAsync(SqlConnection connection, String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_iPhone_User");

		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 8));
		cmd.Parameters.Add(CreateParameter("@UserPass", userPass, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));

		var result = new List<AuthenticateIPhoneUserRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");

			do
			{
				result.Add(new AuthenticateIPhoneUserRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateIPhoneUserWithHashRow>> AuthenticateIPhoneUserWithHashAsync(SqlConnection connection, String clientName, String userName, Byte[] passwordHash, String iPAddress, String workstation, String programVersion) => AuthenticateIPhoneUserWithHashAsync(connection, clientName, userName, passwordHash, iPAddress, workstation, programVersion, CancellationToken.None);
	public static async Task<List<AuthenticateIPhoneUserWithHashRow>> AuthenticateIPhoneUserWithHashAsync(SqlConnection connection, String clientName, String userName, Byte[] passwordHash, String iPAddress, String workstation, String programVersion, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_iPhone_User_With_Hash");

		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Password_Hash", passwordHash, SqlDbType.VarBinary, 128));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));

		var result = new List<AuthenticateIPhoneUserWithHashRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordIsLocked = reader.GetOrdinal("Is_Locked");
			int ordPasswordLockTimeout = reader.GetOrdinal("Password_Lock_Timeout");
			int ordPasswordDaysLeft = reader.GetOrdinal("Password_Days_Left");
			int ordPasswordExpirationWarningDays = reader.GetOrdinal("Password_Expiration_Warning_Days");
			int ordUserDictates = reader.GetOrdinal("User_Dictates");

			do
			{
				result.Add(new AuthenticateIPhoneUserWithHashRow
				{
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					IsLocked = GetFieldValue<Boolean>(reader, ordIsLocked),
					PasswordLockTimeout = GetFieldValue<Int32>(reader, ordPasswordLockTimeout),
					PasswordDaysLeft = GetFieldValue<Int32>(reader, ordPasswordDaysLeft),
					PasswordExpirationWarningDays = GetFieldValue<Int32>(reader, ordPasswordExpirationWarningDays),
					UserDictates = GetFieldValue<Boolean>(reader, ordUserDictates),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateIPhoneUserWithLinkedAccountRow>> AuthenticateIPhoneUserWithLinkedAccountAsync(SqlConnection connection, Int32 clientID, Int32 userID, String userPass, String iPAddress, String workstation, String programVersion, Guid masterSessionKey) => AuthenticateIPhoneUserWithLinkedAccountAsync(connection, clientID, userID, userPass, iPAddress, workstation, programVersion, masterSessionKey, CancellationToken.None);
	public static async Task<List<AuthenticateIPhoneUserWithLinkedAccountRow>> AuthenticateIPhoneUserWithLinkedAccountAsync(SqlConnection connection, Int32 clientID, Int32 userID, String userPass, String iPAddress, String workstation, String programVersion, Guid masterSessionKey, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_iPhone_User_With_Linked_Account");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@UserPass", userPass, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Master_Session_Key", masterSessionKey, SqlDbType.UniqueIdentifier, 16));

		var result = new List<AuthenticateIPhoneUserWithLinkedAccountRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordIsLocked = reader.GetOrdinal("Is_Locked");
			int ordPasswordLockTimeout = reader.GetOrdinal("Password_Lock_Timeout");
			int ordPasswordDaysLeft = reader.GetOrdinal("Password_Days_Left");
			int ordPasswordExpirationWarningDays = reader.GetOrdinal("Password_Expiration_Warning_Days");
			int ordCanSavePassword = reader.GetOrdinal("Can_Save_Password");
			int ordUserDictates = reader.GetOrdinal("User_Dictates");

			do
			{
				result.Add(new AuthenticateIPhoneUserWithLinkedAccountRow
				{
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					IsLocked = GetFieldValue<Boolean>(reader, ordIsLocked),
					PasswordLockTimeout = GetFieldValue<Int32>(reader, ordPasswordLockTimeout),
					PasswordDaysLeft = GetFieldValue<Int32>(reader, ordPasswordDaysLeft),
					PasswordExpirationWarningDays = GetFieldValue<Int32>(reader, ordPasswordExpirationWarningDays),
					CanSavePassword = GetFieldValue<Boolean>(reader, ordCanSavePassword),
					UserDictates = GetFieldValue<Boolean>(reader, ordUserDictates),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateIPhoneUserWithLinkedAccountWithHashRow>> AuthenticateIPhoneUserWithLinkedAccountWithHashAsync(SqlConnection connection, Int32 clientID, Int32 userID, Byte[] passwordHash, String iPAddress, String workstation, String programVersion, Guid masterSessionKey) => AuthenticateIPhoneUserWithLinkedAccountWithHashAsync(connection, clientID, userID, passwordHash, iPAddress, workstation, programVersion, masterSessionKey, CancellationToken.None);
	public static async Task<List<AuthenticateIPhoneUserWithLinkedAccountWithHashRow>> AuthenticateIPhoneUserWithLinkedAccountWithHashAsync(SqlConnection connection, Int32 clientID, Int32 userID, Byte[] passwordHash, String iPAddress, String workstation, String programVersion, Guid masterSessionKey, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_iPhone_User_With_Linked_Account_With_Hash");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Password_Hash", passwordHash, SqlDbType.VarBinary, 128));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Master_Session_Key", masterSessionKey, SqlDbType.UniqueIdentifier, 16));

		var result = new List<AuthenticateIPhoneUserWithLinkedAccountWithHashRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordIsLocked = reader.GetOrdinal("Is_Locked");
			int ordPasswordLockTimeout = reader.GetOrdinal("Password_Lock_Timeout");
			int ordPasswordDaysLeft = reader.GetOrdinal("Password_Days_Left");
			int ordPasswordExpirationWarningDays = reader.GetOrdinal("Password_Expiration_Warning_Days");
			int ordCanSavePassword = reader.GetOrdinal("Can_Save_Password");
			int ordUserDictates = reader.GetOrdinal("User_Dictates");

			do
			{
				result.Add(new AuthenticateIPhoneUserWithLinkedAccountWithHashRow
				{
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					IsLocked = GetFieldValue<Boolean>(reader, ordIsLocked),
					PasswordLockTimeout = GetFieldValue<Int32>(reader, ordPasswordLockTimeout),
					PasswordDaysLeft = GetFieldValue<Int32>(reader, ordPasswordDaysLeft),
					PasswordExpirationWarningDays = GetFieldValue<Int32>(reader, ordPasswordExpirationWarningDays),
					CanSavePassword = GetFieldValue<Boolean>(reader, ordCanSavePassword),
					UserDictates = GetFieldValue<Boolean>(reader, ordUserDictates),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateIPhoneUserWithLockRow>> AuthenticateIPhoneUserWithLockAsync(SqlConnection connection, String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion) => AuthenticateIPhoneUserWithLockAsync(connection, clientName, userName, userPass, iPAddress, workstation, programVersion, CancellationToken.None);
	public static async Task<List<AuthenticateIPhoneUserWithLockRow>> AuthenticateIPhoneUserWithLockAsync(SqlConnection connection, String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_iPhone_User_With_Lock");

		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 8));
		cmd.Parameters.Add(CreateParameter("@UserPass", userPass, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));

		var result = new List<AuthenticateIPhoneUserWithLockRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordIsLocked = reader.GetOrdinal("Is_Locked");
			int ordPasswordLockTimeout = reader.GetOrdinal("Password_Lock_Timeout");

			do
			{
				result.Add(new AuthenticateIPhoneUserWithLockRow
				{
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					IsLocked = GetFieldValue<Boolean>(reader, ordIsLocked),
					PasswordLockTimeout = GetFieldValue<Int32>(reader, ordPasswordLockTimeout),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateIPhoneUserWithLock2Row>> AuthenticateIPhoneUserWithLock2Async(SqlConnection connection, String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion) => AuthenticateIPhoneUserWithLock2Async(connection, clientName, userName, userPass, iPAddress, workstation, programVersion, CancellationToken.None);
	public static async Task<List<AuthenticateIPhoneUserWithLock2Row>> AuthenticateIPhoneUserWithLock2Async(SqlConnection connection, String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_iPhone_User_With_Lock2");

		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 8));
		cmd.Parameters.Add(CreateParameter("@UserPass", userPass, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));

		var result = new List<AuthenticateIPhoneUserWithLock2Row>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordIsLocked = reader.GetOrdinal("Is_Locked");
			int ordPasswordLockTimeout = reader.GetOrdinal("Password_Lock_Timeout");
			int ordPasswordDaysLeft = reader.GetOrdinal("Password_Days_Left");
			int ordPasswordExpirationWarningDays = reader.GetOrdinal("Password_Expiration_Warning_Days");
			int ordUserDictates = reader.GetOrdinal("User_Dictates");

			do
			{
				result.Add(new AuthenticateIPhoneUserWithLock2Row
				{
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					IsLocked = GetFieldValue<Boolean>(reader, ordIsLocked),
					PasswordLockTimeout = GetFieldValue<Int32>(reader, ordPasswordLockTimeout),
					PasswordDaysLeft = GetFieldValue<Int32>(reader, ordPasswordDaysLeft),
					PasswordExpirationWarningDays = GetFieldValue<Int32>(reader, ordPasswordExpirationWarningDays),
					UserDictates = GetFieldValue<Boolean>(reader, ordUserDictates),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateNMSConnectorUserRow>> AuthenticateNMSConnectorUserAsync(SqlConnection connection, String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion) => AuthenticateNMSConnectorUserAsync(connection, clientName, userName, userPass, iPAddress, workstation, programVersion, CancellationToken.None);
	public static async Task<List<AuthenticateNMSConnectorUserRow>> AuthenticateNMSConnectorUserAsync(SqlConnection connection, String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_NMSConnector_User");

		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 8));
		cmd.Parameters.Add(CreateParameter("@UserPass", userPass, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));

		var result = new List<AuthenticateNMSConnectorUserRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordIsLocked = reader.GetOrdinal("Is_Locked");
			int ordPasswordLockTimeout = reader.GetOrdinal("Password_Lock_Timeout");
			int ordPasswordDaysLeft = reader.GetOrdinal("Password_Days_Left");
			int ordUserDictates = reader.GetOrdinal("User_Dictates");

			do
			{
				result.Add(new AuthenticateNMSConnectorUserRow
				{
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					IsLocked = GetFieldValue<Boolean>(reader, ordIsLocked),
					PasswordLockTimeout = GetFieldValue<Int32>(reader, ordPasswordLockTimeout),
					PasswordDaysLeft = GetFieldValue<Int32>(reader, ordPasswordDaysLeft),
					UserDictates = GetFieldValue<Boolean>(reader, ordUserDictates),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateNMSConnectorUserWithHashRow>> AuthenticateNMSConnectorUserWithHashAsync(SqlConnection connection, String clientName, String userName, Byte[] passwordHash, String iPAddress, String workstation, String programVersion) => AuthenticateNMSConnectorUserWithHashAsync(connection, clientName, userName, passwordHash, iPAddress, workstation, programVersion, CancellationToken.None);
	public static async Task<List<AuthenticateNMSConnectorUserWithHashRow>> AuthenticateNMSConnectorUserWithHashAsync(SqlConnection connection, String clientName, String userName, Byte[] passwordHash, String iPAddress, String workstation, String programVersion, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_NMSConnector_User_With_Hash");

		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Password_Hash", passwordHash, SqlDbType.VarBinary, 128));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));

		var result = new List<AuthenticateNMSConnectorUserWithHashRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordIsLocked = reader.GetOrdinal("Is_Locked");
			int ordPasswordLockTimeout = reader.GetOrdinal("Password_Lock_Timeout");
			int ordPasswordDaysLeft = reader.GetOrdinal("Password_Days_Left");
			int ordUserDictates = reader.GetOrdinal("User_Dictates");

			do
			{
				result.Add(new AuthenticateNMSConnectorUserWithHashRow
				{
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					IsLocked = GetFieldValue<Boolean>(reader, ordIsLocked),
					PasswordLockTimeout = GetFieldValue<Int32>(reader, ordPasswordLockTimeout),
					PasswordDaysLeft = GetFieldValue<Int32>(reader, ordPasswordDaysLeft),
					UserDictates = GetFieldValue<Boolean>(reader, ordUserDictates),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateServiceAccountRow>> AuthenticateServiceAccountAsync(SqlConnection connection, String clientName, String loginCode, String password, String localIPAddress) => AuthenticateServiceAccountAsync(connection, clientName, loginCode, password, localIPAddress, CancellationToken.None);
	public static async Task<List<AuthenticateServiceAccountRow>> AuthenticateServiceAccountAsync(SqlConnection connection, String clientName, String loginCode, String password, String localIPAddress, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_ServiceAccount");

		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Login_Code", loginCode, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Password", password, SqlDbType.VarChar, 25));
		cmd.Parameters.Add(CreateParameter("@Local_IP_Address", localIPAddress, SqlDbType.VarChar, 50));

		var result = new List<AuthenticateServiceAccountRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordServiceAccountID = reader.GetOrdinal("Service_Account_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordLoginCode = reader.GetOrdinal("Login_Code");
			int ordPassword = reader.GetOrdinal("Password");
			int ordMachineCode = reader.GetOrdinal("Machine_Code");
			int ordIsActive = reader.GetOrdinal("Is_Active");

			do
			{
				result.Add(new AuthenticateServiceAccountRow
				{
					ServiceAccountID = GetNonNullFieldValue<Int32>(reader, ordServiceAccountID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					LoginCode = GetNonNullField<String>(reader, ordLoginCode),
					Password = GetNonNullField<String>(reader, ordPassword),
					MachineCode = GetField<String>(reader, ordMachineCode),
					IsActive = GetNonNullFieldValue<Boolean>(reader, ordIsActive),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthenticateShadowLinkServiceAccountRow>> AuthenticateShadowLinkServiceAccountAsync(SqlConnection connection, String clientName, String loginCode, String password, String localIPAddress) => AuthenticateShadowLinkServiceAccountAsync(connection, clientName, loginCode, password, localIPAddress, CancellationToken.None);
	public static async Task<List<AuthenticateShadowLinkServiceAccountRow>> AuthenticateShadowLinkServiceAccountAsync(SqlConnection connection, String clientName, String loginCode, String password, String localIPAddress, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authenticate_ShadowLink_ServiceAccount");

		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Login_Code", loginCode, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Password", password, SqlDbType.VarChar, 25));
		cmd.Parameters.Add(CreateParameter("@Local_IP_Address", localIPAddress, SqlDbType.VarChar, 50));

		var result = new List<AuthenticateShadowLinkServiceAccountRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordServiceAccountID = reader.GetOrdinal("Service_Account_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordLoginCode = reader.GetOrdinal("Login_Code");
			int ordPassword = reader.GetOrdinal("Password");
			int ordMachineCode = reader.GetOrdinal("Machine_Code");
			int ordIsActive = reader.GetOrdinal("Is_Active");
			int ordSendingFilepath = reader.GetOrdinal("Sending_Filepath");

			do
			{
				result.Add(new AuthenticateShadowLinkServiceAccountRow
				{
					ServiceAccountID = GetNonNullFieldValue<Int32>(reader, ordServiceAccountID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					LoginCode = GetNonNullField<String>(reader, ordLoginCode),
					Password = GetNonNullField<String>(reader, ordPassword),
					MachineCode = GetField<String>(reader, ordMachineCode),
					IsActive = GetNonNullFieldValue<Boolean>(reader, ordIsActive),
					SendingFilepath = GetField<String>(reader, ordSendingFilepath),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<AuthorizeRegionByClientRow>> AuthorizeRegionByClientAsync(SqlConnection connection, Int32 authenticatedClientID, Int32 associateClientID) => AuthorizeRegionByClientAsync(connection, authenticatedClientID, associateClientID, CancellationToken.None);
	public static async Task<List<AuthorizeRegionByClientRow>> AuthorizeRegionByClientAsync(SqlConnection connection, Int32 authenticatedClientID, Int32 associateClientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Authorize_Region_By_Client");

		cmd.Parameters.Add(CreateParameter("@Authenticated_Client_ID", authenticatedClientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Associate_Client_ID", associateClientID, SqlDbType.Int, 4));

		var result = new List<AuthorizeRegionByClientRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordIsAuthorized = reader.GetOrdinal("Is_Authorized");

			do
			{
				result.Add(new AuthorizeRegionByClientRow
				{
					IsAuthorized = GetNonNullFieldValue<Boolean>(reader, ordIsAuthorized),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<Int32> CheckInWorkItemAsync(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 transcriptionistID) => CheckInWorkItemAsync(connection, transcriptionID, clientID, transcriptionistID, CancellationToken.None);
	public static async Task<Int32> CheckInWorkItemAsync(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 transcriptionistID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.CheckIn_Work_Item");

		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<List<CommitDocumentServiceJobRow>> CommitDocumentServiceJobAsync(SqlConnection connection, Int32 clientID, Guid documentServiceJobID) => CommitDocumentServiceJobAsync(connection, clientID, documentServiceJobID, CancellationToken.None);
	public static async Task<List<CommitDocumentServiceJobRow>> CommitDocumentServiceJobAsync(SqlConnection connection, Int32 clientID, Guid documentServiceJobID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Commit_Document_Service_Job");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_Service_Job_ID", documentServiceJobID, SqlDbType.UniqueIdentifier, 16));

		var result = new List<CommitDocumentServiceJobRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUpdateCount = reader.GetOrdinal("Update_Count");

			do
			{
				result.Add(new CommitDocumentServiceJobRow
				{
					UpdateCount = GetNonNullFieldValue<Int32>(reader, ordUpdateCount),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<Int32> CorrectTranscriptionAsync(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 transcriptionistID, Int32 correctionTID) => CorrectTranscriptionAsync(connection, transcriptionID, clientID, transcriptionistID, correctionTID, CancellationToken.None);
	public static async Task<Int32> CorrectTranscriptionAsync(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 transcriptionistID, Int32 correctionTID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Correct_Transcription");

		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Correction_TID", correctionTID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<List<DeleteClientUserAuthorGroupEnrollmentRow>> DeleteClientUserAuthorGroupEnrollmentAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 authorGroupID, String modifiedUser, DateTime modifiedDate) => DeleteClientUserAuthorGroupEnrollmentAsync(connection, clientID, userID, authorGroupID, modifiedUser, modifiedDate, CancellationToken.None);
	public static async Task<List<DeleteClientUserAuthorGroupEnrollmentRow>> DeleteClientUserAuthorGroupEnrollmentAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 authorGroupID, String modifiedUser, DateTime modifiedDate, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Delete_Client_User_AuthorGroup_Enrollment");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Author_Group_ID", authorGroupID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Modified_Date", modifiedDate, SqlDbType.DateTime, 8));

		var result = new List<DeleteClientUserAuthorGroupEnrollmentRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordAuthorGroupID = reader.GetOrdinal("Author_Group_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");

			do
			{
				result.Add(new DeleteClientUserAuthorGroupEnrollmentRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					AuthorGroupID = GetNonNullFieldValue<Int32>(reader, ordAuthorGroupID),
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<Int32> DeleteClientUserInpatientWorklistVisitAsync(SqlConnection connection, Int32 clientID, Int32 userID, Guid visitID, Int32 associateTypeID, String modifiedUser, DateTime modifiedDate) => DeleteClientUserInpatientWorklistVisitAsync(connection, clientID, userID, visitID, associateTypeID, modifiedUser, modifiedDate, CancellationToken.None);
	public static async Task<Int32> DeleteClientUserInpatientWorklistVisitAsync(SqlConnection connection, Int32 clientID, Int32 userID, Guid visitID, Int32 associateTypeID, String modifiedUser, DateTime modifiedDate, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Delete_Client_User_InpatientWorklist_Visit");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Visit_ID", visitID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Associate_Type_ID", associateTypeID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Modified_Date", modifiedDate, SqlDbType.DateTime, 8));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> DeleteClientUserLinkedAccountAsync(SqlConnection connection, Int32 sourceClientID, Int32 sourceUserID, Int32 targetClientID, Int32 targetUserID) => DeleteClientUserLinkedAccountAsync(connection, sourceClientID, sourceUserID, targetClientID, targetUserID, CancellationToken.None);
	public static async Task<Int32> DeleteClientUserLinkedAccountAsync(SqlConnection connection, Int32 sourceClientID, Int32 sourceUserID, Int32 targetClientID, Int32 targetUserID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Delete_Client_User_LinkedAccount");

		cmd.Parameters.Add(CreateParameter("@Source_Client_ID", sourceClientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Source_User_ID", sourceUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Target_Client_ID", targetClientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Target_User_ID", targetUserID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> DeleteClientUserWorklistEncounterAsync(SqlConnection connection, Int32 clientID, Int32 userID, Guid encounterID, Int32 associateTypeID, String modifiedUser, DateTime modifiedDate) => DeleteClientUserWorklistEncounterAsync(connection, clientID, userID, encounterID, associateTypeID, modifiedUser, modifiedDate, CancellationToken.None);
	public static async Task<Int32> DeleteClientUserWorklistEncounterAsync(SqlConnection connection, Int32 clientID, Int32 userID, Guid encounterID, Int32 associateTypeID, String modifiedUser, DateTime modifiedDate, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Delete_Client_User_Worklist_Encounter");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Encounter_ID", encounterID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Associate_Type_ID", associateTypeID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Modified_Date", modifiedDate, SqlDbType.DateTime, 8));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> DeleteCompanyInTouchServerResetUserAsync(SqlConnection connection, Int32 companyID, Int32 serverID, Int32 userID) => DeleteCompanyInTouchServerResetUserAsync(connection, companyID, serverID, userID, CancellationToken.None);
	public static async Task<Int32> DeleteCompanyInTouchServerResetUserAsync(SqlConnection connection, Int32 companyID, Int32 serverID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Delete_Company_InTouch_Server_Reset_User");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Server_ID", serverID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> DeleteDeviceFoldersAsync(SqlConnection connection, Int32 deviceID) => DeleteDeviceFoldersAsync(connection, deviceID, CancellationToken.None);
	public static async Task<Int32> DeleteDeviceFoldersAsync(SqlConnection connection, Int32 deviceID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Delete_Device_Folders");

		cmd.Parameters.Add(CreateParameter("@Device_ID", deviceID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> DeleteDocumentServiceJobAssociatesAsync(SqlConnection connection, Int32 clientID, Guid documentServiceJobID) => DeleteDocumentServiceJobAssociatesAsync(connection, clientID, documentServiceJobID, CancellationToken.None);
	public static async Task<Int32> DeleteDocumentServiceJobAssociatesAsync(SqlConnection connection, Int32 clientID, Guid documentServiceJobID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Delete_Document_Service_Job_Associates");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_Service_Job_ID", documentServiceJobID, SqlDbType.UniqueIdentifier, 16));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> DeleteTranscriptionPreviewAsync(SqlConnection connection, Int32 clientID, Int32 previewID) => DeleteTranscriptionPreviewAsync(connection, clientID, previewID, CancellationToken.None);
	public static async Task<Int32> DeleteTranscriptionPreviewAsync(SqlConnection connection, Int32 clientID, Int32 previewID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Delete_Transcription_Preview");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Preview_ID", previewID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<List<EditCaseAttachmentFileRow>> EditCaseAttachmentFileAsync(SqlConnection connection, Guid caseID, Int32 caseAttachmentID, Byte[] data) => EditCaseAttachmentFileAsync(connection, caseID, caseAttachmentID, data, CancellationToken.None);
	public static async Task<List<EditCaseAttachmentFileRow>> EditCaseAttachmentFileAsync(SqlConnection connection, Guid caseID, Int32 caseAttachmentID, Byte[] data, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Case_Attachment_File");

		cmd.Parameters.Add(CreateParameter("@Case_ID", caseID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Case_Attachment_ID", caseAttachmentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Data", data, SqlDbType.VarBinary));

		var result = new List<EditCaseAttachmentFileRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCaseAttachmentID = reader.GetOrdinal("Case_Attachment_ID");

			do
			{
				result.Add(new EditCaseAttachmentFileRow
				{
					CaseAttachmentID = GetFieldValue<Int32>(reader, ordCaseAttachmentID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<EditClientUserContactInfoRow>> EditClientUserContactInfoAsync(SqlConnection connection, Int32 clientID, Int32 userID, String modifiedUser, DateTime modifiedDate, String userEmail) => EditClientUserContactInfoAsync(connection, clientID, userID, modifiedUser, modifiedDate, userEmail, CancellationToken.None);
	public static async Task<List<EditClientUserContactInfoRow>> EditClientUserContactInfoAsync(SqlConnection connection, Int32 clientID, Int32 userID, String modifiedUser, DateTime modifiedDate, String userEmail, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Client_User_ContactInfo");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Modified_Date", modifiedDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@User_Email", userEmail, SqlDbType.VarChar, 100));

		var result = new List<EditClientUserContactInfoRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordWasEmailUpdated = reader.GetOrdinal("Was_Email_Updated");

			do
			{
				result.Add(new EditClientUserContactInfoRow
				{
					WasEmailUpdated = GetFieldValue<Boolean>(reader, ordWasEmailUpdated),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<EditClientUserPasswordRow>> EditClientUserPasswordAsync(SqlConnection connection, Int32 userID, Int32 clientID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID) => EditClientUserPasswordAsync(connection, userID, clientID, passwordSalt, passwordHash, passwordHashAlgorithmID, CancellationToken.None);
	public static async Task<List<EditClientUserPasswordRow>> EditClientUserPasswordAsync(SqlConnection connection, Int32 userID, Int32 clientID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Client_User_Password");

		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Password_Salt", passwordSalt, SqlDbType.VarBinary, 36));
		cmd.Parameters.Add(CreateParameter("@Password_Hash", passwordHash, SqlDbType.VarBinary, 128));
		cmd.Parameters.Add(CreateParameter("@Password_Hash_Algorithm_ID", passwordHashAlgorithmID, SqlDbType.Int, 4));

		var result = new List<EditClientUserPasswordRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserID = reader.GetOrdinal("User_ID");

			do
			{
				result.Add(new EditClientUserPasswordRow
				{
					UserID = GetFieldValue<Int32>(reader, ordUserID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<EditCompanyUserContactInfoRow>> EditCompanyUserContactInfoAsync(SqlConnection connection, Int32 companyID, Int32 transcriptionistID, String transcriptionistEMail, String transcriptionistPhone1, String transcriptionistPhone2, String modifiedUser, DateTime modifiedDate) => EditCompanyUserContactInfoAsync(connection, companyID, transcriptionistID, transcriptionistEMail, transcriptionistPhone1, transcriptionistPhone2, modifiedUser, modifiedDate, CancellationToken.None);
	public static async Task<List<EditCompanyUserContactInfoRow>> EditCompanyUserContactInfoAsync(SqlConnection connection, Int32 companyID, Int32 transcriptionistID, String transcriptionistEMail, String transcriptionistPhone1, String transcriptionistPhone2, String modifiedUser, DateTime modifiedDate, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Company_User_ContactInfo");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_EMail", transcriptionistEMail, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_Phone_1", transcriptionistPhone1, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_Phone_2", transcriptionistPhone2, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Modified_Date", modifiedDate, SqlDbType.DateTime, 8));

		var result = new List<EditCompanyUserContactInfoRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionistID = reader.GetOrdinal("Transcriptionist_ID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordTranscriptionistEMail = reader.GetOrdinal("Transcriptionist_EMail");
			int ordTranscriptionistPhone1 = reader.GetOrdinal("Transcriptionist_Phone_1");
			int ordTranscriptionistPhone2 = reader.GetOrdinal("Transcriptionist_Phone_2");
			int ordWasEmailUpdated = reader.GetOrdinal("Was_Email_Updated");

			do
			{
				result.Add(new EditCompanyUserContactInfoRow
				{
					TranscriptionistID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionistID),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					TranscriptionistEMail = GetField<String>(reader, ordTranscriptionistEMail),
					TranscriptionistPhone1 = GetField<String>(reader, ordTranscriptionistPhone1),
					TranscriptionistPhone2 = GetField<String>(reader, ordTranscriptionistPhone2),
					WasEmailUpdated = GetFieldValue<Boolean>(reader, ordWasEmailUpdated),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<EditCompanyUserInfoRow>> EditCompanyUserInfoAsync(SqlConnection connection, Int32 companyID, Int32 transcriptionistID, String transcriptionistNameFirst, String transcriptionistNameMiddle, String transcriptionistNameLast, String transcriptionistEMail, String transcriptionistPhone1, String transcriptionistPhone2, String modifiedUser, DateTime modifiedDate) => EditCompanyUserInfoAsync(connection, companyID, transcriptionistID, transcriptionistNameFirst, transcriptionistNameMiddle, transcriptionistNameLast, transcriptionistEMail, transcriptionistPhone1, transcriptionistPhone2, modifiedUser, modifiedDate, CancellationToken.None);
	public static async Task<List<EditCompanyUserInfoRow>> EditCompanyUserInfoAsync(SqlConnection connection, Int32 companyID, Int32 transcriptionistID, String transcriptionistNameFirst, String transcriptionistNameMiddle, String transcriptionistNameLast, String transcriptionistEMail, String transcriptionistPhone1, String transcriptionistPhone2, String modifiedUser, DateTime modifiedDate, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Company_User_Info");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_Name_First", transcriptionistNameFirst, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_Name_Middle", transcriptionistNameMiddle, SqlDbType.VarChar, 1));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_Name_Last", transcriptionistNameLast, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_EMail", transcriptionistEMail, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_Phone_1", transcriptionistPhone1, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_Phone_2", transcriptionistPhone2, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Modified_Date", modifiedDate, SqlDbType.DateTime, 8));

		var result = new List<EditCompanyUserInfoRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionistID = reader.GetOrdinal("Transcriptionist_ID");
			int ordTranscriptionistUsername = reader.GetOrdinal("Transcriptionist_Username");
			int ordTranscriptionistFullname = reader.GetOrdinal("Transcriptionist_Fullname");
			int ordTranscriptionistNameLast = reader.GetOrdinal("Transcriptionist_Name_Last");
			int ordTranscriptionistNameMiddle = reader.GetOrdinal("Transcriptionist_Name_Middle");
			int ordTranscriptionistNameFirst = reader.GetOrdinal("Transcriptionist_Name_First");
			int ordTranscriptionistActive = reader.GetOrdinal("Transcriptionist_Active");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordTranscriptionistEMail = reader.GetOrdinal("Transcriptionist_EMail");
			int ordTranscriptionistPhone1 = reader.GetOrdinal("Transcriptionist_Phone_1");
			int ordTranscriptionistPhone2 = reader.GetOrdinal("Transcriptionist_Phone_2");
			int ordPasswordDaysLeft = reader.GetOrdinal("PasswordDaysLeft");
			int ordWasEmailUpdated = reader.GetOrdinal("Was_Email_Updated");

			do
			{
				result.Add(new EditCompanyUserInfoRow
				{
					TranscriptionistID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionistID),
					TranscriptionistUsername = GetField<String>(reader, ordTranscriptionistUsername),
					TranscriptionistFullname = GetField<String>(reader, ordTranscriptionistFullname),
					TranscriptionistNameLast = GetField<String>(reader, ordTranscriptionistNameLast),
					TranscriptionistNameMiddle = GetField<String>(reader, ordTranscriptionistNameMiddle),
					TranscriptionistNameFirst = GetField<String>(reader, ordTranscriptionistNameFirst),
					TranscriptionistActive = GetNonNullFieldValue<Boolean>(reader, ordTranscriptionistActive),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					TranscriptionistEMail = GetField<String>(reader, ordTranscriptionistEMail),
					TranscriptionistPhone1 = GetField<String>(reader, ordTranscriptionistPhone1),
					TranscriptionistPhone2 = GetField<String>(reader, ordTranscriptionistPhone2),
					PasswordDaysLeft = GetFieldValue<Int32>(reader, ordPasswordDaysLeft),
					WasEmailUpdated = GetFieldValue<Boolean>(reader, ordWasEmailUpdated),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<EditCompanyUserPasswordRow>> EditCompanyUserPasswordAsync(SqlConnection connection, Int32 userID, Int32 companyID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID) => EditCompanyUserPasswordAsync(connection, userID, companyID, passwordSalt, passwordHash, passwordHashAlgorithmID, CancellationToken.None);
	public static async Task<List<EditCompanyUserPasswordRow>> EditCompanyUserPasswordAsync(SqlConnection connection, Int32 userID, Int32 companyID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Company_User_Password");

		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Password_Salt", passwordSalt, SqlDbType.VarBinary, 36));
		cmd.Parameters.Add(CreateParameter("@Password_Hash", passwordHash, SqlDbType.VarBinary, 128));
		cmd.Parameters.Add(CreateParameter("@Password_Hash_Algorithm_ID", passwordHashAlgorithmID, SqlDbType.Int, 4));

		var result = new List<EditCompanyUserPasswordRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserID = reader.GetOrdinal("User_ID");

			do
			{
				result.Add(new EditCompanyUserPasswordRow
				{
					UserID = GetFieldValue<Int32>(reader, ordUserID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<Int32> EditDeviceAsync(SqlConnection connection, Int32 deviceID, Int32 deviceAPITypeID, String identifier, Boolean showDictationLog, Boolean printDictationLog, String modifiedUser, String extendedConfigurationInfo) => EditDeviceAsync(connection, deviceID, deviceAPITypeID, identifier, showDictationLog, printDictationLog, modifiedUser, extendedConfigurationInfo, CancellationToken.None);
	public static async Task<Int32> EditDeviceAsync(SqlConnection connection, Int32 deviceID, Int32 deviceAPITypeID, String identifier, Boolean showDictationLog, Boolean printDictationLog, String modifiedUser, String extendedConfigurationInfo, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Device");

		cmd.Parameters.Add(CreateParameter("@Device_ID", deviceID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Device_API_Type_ID", deviceAPITypeID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Identifier", identifier, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Show_Dictation_Log", showDictationLog, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Print_Dictation_Log", printDictationLog, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Extended_Configuration_Info", extendedConfigurationInfo, SqlDbType.Xml));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<List<EditDictationRow>> EditDictationAsync(SqlConnection connection, Int32 dictationID, Int32 dictationStatusID, DateTime dateConverted, DateTime dateReceived, String errorDescription, Int32 lengthInSeconds, Int32 dictationRouteID) => EditDictationAsync(connection, dictationID, dictationStatusID, dateConverted, dateReceived, errorDescription, lengthInSeconds, dictationRouteID, CancellationToken.None);
	public static async Task<List<EditDictationRow>> EditDictationAsync(SqlConnection connection, Int32 dictationID, Int32 dictationStatusID, DateTime dateConverted, DateTime dateReceived, String errorDescription, Int32 lengthInSeconds, Int32 dictationRouteID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Dictation");

		cmd.Parameters.Add(CreateParameter("@Dictation_ID", dictationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictation_Status_ID", dictationStatusID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Date_Converted", dateConverted, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Date_Received", dateReceived, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Error_Description", errorDescription, SqlDbType.VarChar, 500));
		cmd.Parameters.Add(CreateParameter("@Length_InSeconds", lengthInSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictation_Route_ID", dictationRouteID, SqlDbType.Int, 4));

		var result = new List<EditDictationRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDictationStatusID = reader.GetOrdinal("Dictation_Status_ID");
			int ordDateConverted = reader.GetOrdinal("Date_Converted");
			int ordDateReceived = reader.GetOrdinal("Date_Received");
			int ordOldDictationStatusID = reader.GetOrdinal("Old_Dictation_Status_ID");
			int ordOldDateConverted = reader.GetOrdinal("Old_Date_Converted");
			int ordOldDateReceived = reader.GetOrdinal("Old_Date_Received");
			int ordLength = reader.GetOrdinal("Length");
			int ordOldLength = reader.GetOrdinal("Old_Length");
			int ordDictationRouteID = reader.GetOrdinal("Dictation_Route_ID");
			int ordOldDictationRouteID = reader.GetOrdinal("Old_Dictation_Route_ID");

			do
			{
				result.Add(new EditDictationRow
				{
					DictationStatusID = GetFieldValue<Int32>(reader, ordDictationStatusID),
					DateConverted = GetFieldValue<DateTime>(reader, ordDateConverted),
					DateReceived = GetFieldValue<DateTime>(reader, ordDateReceived),
					OldDictationStatusID = GetFieldValue<Int32>(reader, ordOldDictationStatusID),
					OldDateConverted = GetFieldValue<DateTime>(reader, ordOldDateConverted),
					OldDateReceived = GetFieldValue<DateTime>(reader, ordOldDateReceived),
					Length = GetFieldValue<Int32>(reader, ordLength),
					OldLength = GetFieldValue<Int32>(reader, ordOldLength),
					DictationRouteID = GetFieldValue<Int32>(reader, ordDictationRouteID),
					OldDictationRouteID = GetFieldValue<Int32>(reader, ordOldDictationRouteID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<EditDictationAppendRow>> EditDictationAppendAsync(SqlConnection connection, Int32 clientID, Int32 dictationID, Int32 masterTranscriptionID) => EditDictationAppendAsync(connection, clientID, dictationID, masterTranscriptionID, CancellationToken.None);
	public static async Task<List<EditDictationAppendRow>> EditDictationAppendAsync(SqlConnection connection, Int32 clientID, Int32 dictationID, Int32 masterTranscriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Dictation_Append");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictation_ID", dictationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Master_Transcription_ID", masterTranscriptionID, SqlDbType.Int, 4));

		var result = new List<EditDictationAppendRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordAppendTranscriptionID = reader.GetOrdinal("Append_Transcription_ID");

			do
			{
				result.Add(new EditDictationAppendRow
				{
					AppendTranscriptionID = GetFieldValue<Int32>(reader, ordAppendTranscriptionID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<Int32> EditDictationChunkUploadDateAsync(SqlConnection connection, Int32 clientID, Int32 dictationID) => EditDictationChunkUploadDateAsync(connection, clientID, dictationID, CancellationToken.None);
	public static async Task<Int32> EditDictationChunkUploadDateAsync(SqlConnection connection, Int32 clientID, Int32 dictationID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Dictation_Chunk_Upload_Date");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictation_ID", dictationID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<List<EditDictationPrependRow>> EditDictationPrependAsync(SqlConnection connection, Int32 clientID, Int32 dictationID, Int32 masterTranscriptionID) => EditDictationPrependAsync(connection, clientID, dictationID, masterTranscriptionID, CancellationToken.None);
	public static async Task<List<EditDictationPrependRow>> EditDictationPrependAsync(SqlConnection connection, Int32 clientID, Int32 dictationID, Int32 masterTranscriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Dictation_Prepend");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictation_ID", dictationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Master_Transcription_ID", masterTranscriptionID, SqlDbType.Int, 4));

		var result = new List<EditDictationPrependRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordPrependTranscriptionID = reader.GetOrdinal("Prepend_Transcription_ID");

			do
			{
				result.Add(new EditDictationPrependRow
				{
					PrependTranscriptionID = GetFieldValue<Int32>(reader, ordPrependTranscriptionID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<EditDictationStatusRow>> EditDictationStatusAsync(SqlConnection connection, Int32 clientID, Int32 dictationID, Int32 dictationStatusID) => EditDictationStatusAsync(connection, clientID, dictationID, dictationStatusID, CancellationToken.None);
	public static async Task<List<EditDictationStatusRow>> EditDictationStatusAsync(SqlConnection connection, Int32 clientID, Int32 dictationID, Int32 dictationStatusID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Dictation_Status");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictation_ID", dictationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictation_Status_ID", dictationStatusID, SqlDbType.Int, 4));

		var result = new List<EditDictationStatusRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDictationStatusID = reader.GetOrdinal("Dictation_Status_ID");
			int ordOldDictationStatusID = reader.GetOrdinal("Old_Dictation_Status_ID");

			do
			{
				result.Add(new EditDictationStatusRow
				{
					DictationStatusID = GetFieldValue<Int32>(reader, ordDictationStatusID),
					OldDictationStatusID = GetFieldValue<Int32>(reader, ordOldDictationStatusID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<EditDocumentServiceJobContentRow>> EditDocumentServiceJobContentAsync(SqlConnection connection, Int32 clientID, Guid documentServiceJobID, Int32 contentTypeID, Byte[] content) => EditDocumentServiceJobContentAsync(connection, clientID, documentServiceJobID, contentTypeID, content, CancellationToken.None);
	public static async Task<List<EditDocumentServiceJobContentRow>> EditDocumentServiceJobContentAsync(SqlConnection connection, Int32 clientID, Guid documentServiceJobID, Int32 contentTypeID, Byte[] content, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Document_Service_Job_Content");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_Service_Job_ID", documentServiceJobID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Content_Type_ID", contentTypeID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Content", content, SqlDbType.VarBinary));

		var result = new List<EditDocumentServiceJobContentRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUpdateCount = reader.GetOrdinal("Update_Count");

			do
			{
				result.Add(new EditDocumentServiceJobContentRow
				{
					UpdateCount = GetNonNullFieldValue<Int32>(reader, ordUpdateCount),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<EditDocumentServiceJobRelatedTranscriptionRow>> EditDocumentServiceJobRelatedTranscriptionAsync(SqlConnection connection, Int32 clientID, Guid documentServiceJobID, Int32 precedingTranscriptionID, Int32 followingTranscriptionID) => EditDocumentServiceJobRelatedTranscriptionAsync(connection, clientID, documentServiceJobID, precedingTranscriptionID, followingTranscriptionID, CancellationToken.None);
	public static async Task<List<EditDocumentServiceJobRelatedTranscriptionRow>> EditDocumentServiceJobRelatedTranscriptionAsync(SqlConnection connection, Int32 clientID, Guid documentServiceJobID, Int32 precedingTranscriptionID, Int32 followingTranscriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Document_Service_Job_Related_Transcription");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_Service_Job_ID", documentServiceJobID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Preceding_Transcription_ID", precedingTranscriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Following_Transcription_ID", followingTranscriptionID, SqlDbType.Int, 4));

		var result = new List<EditDocumentServiceJobRelatedTranscriptionRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordPrecedingTranscriptionID = reader.GetOrdinal("Preceding_Transcription_ID");
			int ordFollowingTranscriptionID = reader.GetOrdinal("Following_Transcription_ID");

			do
			{
				result.Add(new EditDocumentServiceJobRelatedTranscriptionRow
				{
					PrecedingTranscriptionID = GetFieldValue<Int32>(reader, ordPrecedingTranscriptionID),
					FollowingTranscriptionID = GetFieldValue<Int32>(reader, ordFollowingTranscriptionID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<Int32> EditInterpreterSessionEndAsync(SqlConnection connection, String externalSessionID, Int32 sessionStatusID, Int32 sessionDuration, Int32 interpreterSessionsHangupCauseID, DateTime sessionEnd, String hangupCause) => EditInterpreterSessionEndAsync(connection, externalSessionID, sessionStatusID, sessionDuration, interpreterSessionsHangupCauseID, sessionEnd, hangupCause, CancellationToken.None);
	public static async Task<Int32> EditInterpreterSessionEndAsync(SqlConnection connection, String externalSessionID, Int32 sessionStatusID, Int32 sessionDuration, Int32 interpreterSessionsHangupCauseID, DateTime sessionEnd, String hangupCause, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Interpreter_Session_End");

		cmd.Parameters.Add(CreateParameter("@External_Session_ID", externalSessionID, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@SessionStatus_ID", sessionStatusID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Session_Duration", sessionDuration, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Interpreter_Sessions_Hangup_Cause_ID", interpreterSessionsHangupCauseID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Session_End", sessionEnd, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Hangup_Cause", hangupCause, SqlDbType.VarChar, 50));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> EditInterpreterSessionRecordingAsync(SqlConnection connection, String externalSessionID, String recordingURL) => EditInterpreterSessionRecordingAsync(connection, externalSessionID, recordingURL, CancellationToken.None);
	public static async Task<Int32> EditInterpreterSessionRecordingAsync(SqlConnection connection, String externalSessionID, String recordingURL, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Interpreter_Session_Recording");

		cmd.Parameters.Add(CreateParameter("@External_Session_ID", externalSessionID, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Recording_URL", recordingURL, SqlDbType.VarChar, 500));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> EditInterpreterSessionStatusAsync(SqlConnection connection, String externalSessionID, Int32 sessionStatusID, Int32 interpreterID) => EditInterpreterSessionStatusAsync(connection, externalSessionID, sessionStatusID, interpreterID, CancellationToken.None);
	public static async Task<Int32> EditInterpreterSessionStatusAsync(SqlConnection connection, String externalSessionID, Int32 sessionStatusID, Int32 interpreterID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Interpreter_Session_Status");

		cmd.Parameters.Add(CreateParameter("@External_Session_ID", externalSessionID, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@SessionStatus_ID", sessionStatusID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Interpreter_ID", interpreterID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> EditProgramVersionAsync(SqlConnection connection, Int32 programID, Int32 versionID, String versionNumber, Boolean upgradeRequired, Boolean upgradeAvailable, String upgradeMessage, String upgradeURL, String modifiedUser, DateTime modifiedDate, Boolean isPrivate) => EditProgramVersionAsync(connection, programID, versionID, versionNumber, upgradeRequired, upgradeAvailable, upgradeMessage, upgradeURL, modifiedUser, modifiedDate, isPrivate, CancellationToken.None);
	public static async Task<Int32> EditProgramVersionAsync(SqlConnection connection, Int32 programID, Int32 versionID, String versionNumber, Boolean upgradeRequired, Boolean upgradeAvailable, String upgradeMessage, String upgradeURL, String modifiedUser, DateTime modifiedDate, Boolean isPrivate, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Program_Version");

		cmd.Parameters.Add(CreateParameter("@Program_ID", programID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Version_ID", versionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Version_Number", versionNumber, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Upgrade_Required", upgradeRequired, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Upgrade_Available", upgradeAvailable, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Upgrade_Message", upgradeMessage, SqlDbType.VarChar, 1000));
		cmd.Parameters.Add(CreateParameter("@Upgrade_URL", upgradeURL, SqlDbType.VarChar, 1000));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Modified_Date", modifiedDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Is_Private", isPrivate, SqlDbType.Bit, 1));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> EditTranscriptionCompleteFinalAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID) => EditTranscriptionCompleteFinalAsync(connection, clientID, userID, transcriptionID, forClientID, forUserID, CancellationToken.None);
	public static async Task<Int32> EditTranscriptionCompleteFinalAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Transcription_Complete_Final");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@For_Client_ID", forClientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@For_User_ID", forUserID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> EditTranscriptionCompleteFinal2Async(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID) => EditTranscriptionCompleteFinal2Async(connection, clientID, userID, transcriptionID, forClientID, forUserID, CancellationToken.None);
	public static async Task<Int32> EditTranscriptionCompleteFinal2Async(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Transcription_Complete_Final2");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@For_Client_ID", forClientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@For_User_ID", forUserID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> EditTranscriptionCompletePreliminaryAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID) => EditTranscriptionCompletePreliminaryAsync(connection, clientID, userID, transcriptionID, forClientID, forUserID, CancellationToken.None);
	public static async Task<Int32> EditTranscriptionCompletePreliminaryAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Transcription_Complete_Preliminary");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@For_Client_ID", forClientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@For_User_ID", forUserID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<List<EditTranscriptionCompletePreliminaryWithAppendRow>> EditTranscriptionCompletePreliminaryWithAppendAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID, String tranText) => EditTranscriptionCompletePreliminaryWithAppendAsync(connection, clientID, userID, transcriptionID, forClientID, forUserID, tranText, CancellationToken.None);
	public static async Task<List<EditTranscriptionCompletePreliminaryWithAppendRow>> EditTranscriptionCompletePreliminaryWithAppendAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID, String tranText, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Transcription_Complete_Preliminary_WithAppend");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@For_Client_ID", forClientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@For_User_ID", forUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Tran_Text", tranText, SqlDbType.VarChar));

		var result = new List<EditTranscriptionCompletePreliminaryWithAppendRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordNewTID = reader.GetOrdinal("NewTID");
			int ordNewContentVersionID = reader.GetOrdinal("New_Content_Version_ID");

			do
			{
				result.Add(new EditTranscriptionCompletePreliminaryWithAppendRow
				{
					NewTID = GetFieldValue<Int32>(reader, ordNewTID),
					NewContentVersionID = GetFieldValue<Guid>(reader, ordNewContentVersionID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<Int32> EditTranscriptionCompleteReferralAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID) => EditTranscriptionCompleteReferralAsync(connection, clientID, userID, transcriptionID, forClientID, forUserID, CancellationToken.None);
	public static async Task<Int32> EditTranscriptionCompleteReferralAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Transcription_Complete_Referral");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@For_Client_ID", forClientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@For_User_ID", forUserID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> EditTranscriptionCompleteReviewAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID) => EditTranscriptionCompleteReviewAsync(connection, clientID, userID, transcriptionID, forClientID, forUserID, CancellationToken.None);
	public static async Task<Int32> EditTranscriptionCompleteReviewAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Transcription_Complete_Review");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@For_Client_ID", forClientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@For_User_ID", forUserID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> EditTranscriptionCompleteReview2Async(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID) => EditTranscriptionCompleteReview2Async(connection, clientID, userID, transcriptionID, forClientID, forUserID, CancellationToken.None);
	public static async Task<Int32> EditTranscriptionCompleteReview2Async(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 forClientID, Int32 forUserID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Transcription_Complete_Review2");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@For_Client_ID", forClientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@For_User_ID", forUserID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> EditTranscriptionHeaderAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, String modifiedUser, Int32 authorID, Int32 documentID, Int32 locationID, DateTime dictationDate, String patientID, String patientName, String patientGender, DateTime patientBirthdate, DateTime appointmentDate, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5) => EditTranscriptionHeaderAsync(connection, clientID, userID, transcriptionID, modifiedUser, authorID, documentID, locationID, dictationDate, patientID, patientName, patientGender, patientBirthdate, appointmentDate, orderNumber, userField1, userField2, userField3, userField4, userField5, CancellationToken.None);
	public static async Task<Int32> EditTranscriptionHeaderAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, String modifiedUser, Int32 authorID, Int32 documentID, Int32 locationID, DateTime dictationDate, String patientID, String patientName, String patientGender, DateTime patientBirthdate, DateTime appointmentDate, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Transcription_Header");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Author_ID", authorID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictation_Date", dictationDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Name", patientName, SqlDbType.VarChar, 350));
		cmd.Parameters.Add(CreateParameter("@Patient_Gender", patientGender, SqlDbType.Char, 1));
		cmd.Parameters.Add(CreateParameter("@Patient_Birthdate", patientBirthdate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Appointment_Date", appointmentDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Order_Number", orderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@User_Field_1", userField1, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_2", userField2, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_3", userField3, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_4", userField4, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_5", userField5, SqlDbType.VarChar, 100));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> EditTranscriptionHeaderV2Async(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, String modifiedUser, Int32 authorID, Int32 documentID, Int32 locationID, DateTime dateDictated, DateTime dateDictatedCST, String patientID, String patientName, String patientGender, DateTime patientBirthdate, DateTime appointmentDate, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5) => EditTranscriptionHeaderV2Async(connection, clientID, userID, transcriptionID, modifiedUser, authorID, documentID, locationID, dateDictated, dateDictatedCST, patientID, patientName, patientGender, patientBirthdate, appointmentDate, orderNumber, userField1, userField2, userField3, userField4, userField5, CancellationToken.None);
	public static async Task<Int32> EditTranscriptionHeaderV2Async(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, String modifiedUser, Int32 authorID, Int32 documentID, Int32 locationID, DateTime dateDictated, DateTime dateDictatedCST, String patientID, String patientName, String patientGender, DateTime patientBirthdate, DateTime appointmentDate, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Transcription_Header_V2");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Modified_User", modifiedUser, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Author_ID", authorID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Date_Dictated", dateDictated, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Date_Dictated_CST", dateDictatedCST, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Name", patientName, SqlDbType.VarChar, 350));
		cmd.Parameters.Add(CreateParameter("@Patient_Gender", patientGender, SqlDbType.Char, 1));
		cmd.Parameters.Add(CreateParameter("@Patient_Birthdate", patientBirthdate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Appointment_Date", appointmentDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Order_Number", orderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@User_Field_1", userField1, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_2", userField2, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_3", userField3, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_4", userField4, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_5", userField5, SqlDbType.VarChar, 100));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> EditWorkItemAsync(SqlConnection connection, Guid workItemID, Int32 transcriptionID, Int32 originalTranscriptionID, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 clientID, Int32 transcriptionistID, Int32 dictatingUserID, Int32 documentID, Int32 locationID, Byte[] transcriptionContent, DateTimeOffset dateDictated, DateTime appointmentDate, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 workflowOverride, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean isMarkedForClientReview, Int32 qAProgramId, Boolean transcriptionModified, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, String transcriptionDictationPath, Int32 patientLetterId, Boolean wasSplit, List<TagsTableRow> tagsTable, List<SignaturesTable2Row> signaturesTable, List<AssociatesTableRow> associatesTable, List<NameValuePairsTableRow> optionalVariablesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Int32 contentTypeID, Byte[] hTMLContent, String inScribeVersion, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, Boolean audioPlayed, Boolean audioPlayedFully) => EditWorkItemAsync(connection, workItemID, transcriptionID, originalTranscriptionID, appendTranscriptionID, correctionTranscriptionID, clientID, transcriptionistID, dictatingUserID, documentID, locationID, transcriptionContent, dateDictated, appointmentDate, patientID, patientName, patientBirthdate, patientGender, patientNameFirst, patientNameMiddle, patientNameLast, patientAddress1, patientAddress2, patientCity, patientState, patientZipCode, patientHomePhone, patientWorkPhone, patientOrderNumber, patientUserField1, patientUserField2, patientUserField3, patientUserField4, patientUserField5, patientAddToDB, orderNumber, userField1, userField2, userField3, userField4, userField5, comments, workflowOverride, isMarkedForQA, isQAOptional, qAPercent, isMarkedForClientReview, qAProgramId, transcriptionModified, qARatingsAreFeedbackOnly, qARatingsWereApplied, transcriptionDictationPath, patientLetterId, wasSplit, tagsTable, signaturesTable, associatesTable, optionalVariablesTable, qAFeedbackRatingsTable, contentTypeID, hTMLContent, inScribeVersion, totalIdleSeconds, totalJobSeconds, initialIdleSeconds, originalQTCharacters, originalNonVisibleQTCharacters, originalAutoTextCharacters, indexMarkSeconds, audioPlayed, audioPlayedFully, CancellationToken.None);
	public static async Task<Int32> EditWorkItemAsync(SqlConnection connection, Guid workItemID, Int32 transcriptionID, Int32 originalTranscriptionID, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 clientID, Int32 transcriptionistID, Int32 dictatingUserID, Int32 documentID, Int32 locationID, Byte[] transcriptionContent, DateTimeOffset dateDictated, DateTime appointmentDate, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 workflowOverride, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean isMarkedForClientReview, Int32 qAProgramId, Boolean transcriptionModified, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, String transcriptionDictationPath, Int32 patientLetterId, Boolean wasSplit, List<TagsTableRow> tagsTable, List<SignaturesTable2Row> signaturesTable, List<AssociatesTableRow> associatesTable, List<NameValuePairsTableRow> optionalVariablesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Int32 contentTypeID, Byte[] hTMLContent, String inScribeVersion, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, Boolean audioPlayed, Boolean audioPlayedFully, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Work_Item");

		cmd.Parameters.Add(CreateParameter("@Work_Item_ID", workItemID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_Transcription_ID", originalTranscriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Append_Transcription_ID", appendTranscriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Correction_Transcription_ID", correctionTranscriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictating_User_ID", dictatingUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_Content", transcriptionContent, SqlDbType.VarBinary));
		cmd.Parameters.Add(CreateParameter("@Date_Dictated", dateDictated, SqlDbType.DateTimeOffset, 10));
		cmd.Parameters.Add(CreateParameter("@Appointment_Date", appointmentDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Name", patientName, SqlDbType.VarChar, 350));
		cmd.Parameters.Add(CreateParameter("@Patient_Birthdate", patientBirthdate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Patient_Gender", patientGender, SqlDbType.Char, 1));
		cmd.Parameters.Add(CreateParameter("@Patient_Name_First", patientNameFirst, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_Name_Middle", patientNameMiddle, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_Name_Last", patientNameLast, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_1", patientAddress1, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_2", patientAddress2, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_City", patientCity, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_State", patientState, SqlDbType.Char, 3));
		cmd.Parameters.Add(CreateParameter("@Patient_Zip_Code", patientZipCode, SqlDbType.Char, 9));
		cmd.Parameters.Add(CreateParameter("@Patient_Home_Phone", patientHomePhone, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Work_Phone", patientWorkPhone, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Order_Number", patientOrderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_1", patientUserField1, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_2", patientUserField2, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_3", patientUserField3, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_4", patientUserField4, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_5", patientUserField5, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_AddToDB", patientAddToDB, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Order_Number", orderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@User_Field_1", userField1, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_2", userField2, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_3", userField3, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_4", userField4, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_5", userField5, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Comments", comments, SqlDbType.VarChar, 1000));
		cmd.Parameters.Add(CreateParameter("@WorkflowOverride", workflowOverride, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@IsMarkedForQA", isMarkedForQA, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@IsQAOptional", isQAOptional, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@QAPercent", qAPercent, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@IsMarkedForClientReview", isMarkedForClientReview, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@QAProgram_Id", qAProgramId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_Modified", transcriptionModified, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@QARatingsAreFeedbackOnly", qARatingsAreFeedbackOnly, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@QARatingsWereApplied", qARatingsWereApplied, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Transcription_DictationPath", transcriptionDictationPath, SqlDbType.VarChar, 1000));
		cmd.Parameters.Add(CreateParameter("@Patient_Letter_Id", patientLetterId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Was_Split", wasSplit, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Tags_Table", new TagsTableRowDataTable(tagsTable), SqlDbType.Structured, "dbo.TagsTable"));
		cmd.Parameters.Add(CreateParameter("@Signatures_Table", new SignaturesTable2RowDataTable(signaturesTable), SqlDbType.Structured, "dbo.SignaturesTable2"));
		cmd.Parameters.Add(CreateParameter("@Associates_Table", new AssociatesTableRowDataTable(associatesTable), SqlDbType.Structured, "dbo.AssociatesTable"));
		cmd.Parameters.Add(CreateParameter("@OptionalVariables_Table", new NameValuePairsTableRowDataTable(optionalVariablesTable), SqlDbType.Structured, "dbo.NameValuePairsTable"));
		cmd.Parameters.Add(CreateParameter("@QAFeedbackRatings_Table", new QAFeedbackRatingsTableRowDataTable(qAFeedbackRatingsTable), SqlDbType.Structured, "dbo.QAFeedbackRatingsTable"));
		cmd.Parameters.Add(CreateParameter("@Content_Type_ID", contentTypeID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@HTML_Content", hTMLContent, SqlDbType.VarBinary));
		cmd.Parameters.Add(CreateParameter("@InScribe_Version", inScribeVersion, SqlDbType.VarChar, 25));
		cmd.Parameters.Add(CreateParameter("@Total_Idle_Seconds", totalIdleSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Total_Job_Seconds", totalJobSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Initial_Idle_Seconds", initialIdleSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_QTCharacters", originalQTCharacters, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_NonVisible_QTCharacters", originalNonVisibleQTCharacters, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_AutoTextCharacters", originalAutoTextCharacters, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Index_Mark_Seconds", indexMarkSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Audio_Played", audioPlayed, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Audio_Played_Fully", audioPlayedFully, SqlDbType.Bit, 1));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> EditWorkItem2Async(SqlConnection connection, Guid workItemID, Int32 transcriptionID, Int32 originalTranscriptionID, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 clientID, Int32 transcriptionistID, Int32 dictatingUserID, Int32 documentID, Int32 locationID, Byte[] transcriptionContent, DateTimeOffset dateDictated, DateTime appointmentDate, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 workflowOverride, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean isMarkedForClientReview, Int32 qAProgramId, Boolean transcriptionModified, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, String transcriptionDictationPath, Int32 patientLetterId, Boolean wasSplit, List<TagsTableRow> tagsTable, List<SignaturesTableRow> signaturesTable, List<AssociatesTable2Row> associatesTable, List<NameValuePairsTableRow> optionalVariablesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Int32 contentTypeID, Byte[] hTMLContent, String inScribeVersion, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, Boolean audioPlayed, Boolean audioPlayedFully) => EditWorkItem2Async(connection, workItemID, transcriptionID, originalTranscriptionID, appendTranscriptionID, correctionTranscriptionID, clientID, transcriptionistID, dictatingUserID, documentID, locationID, transcriptionContent, dateDictated, appointmentDate, patientID, patientName, patientBirthdate, patientGender, patientNameFirst, patientNameMiddle, patientNameLast, patientAddress1, patientAddress2, patientCity, patientState, patientZipCode, patientHomePhone, patientWorkPhone, patientOrderNumber, patientUserField1, patientUserField2, patientUserField3, patientUserField4, patientUserField5, patientAddToDB, orderNumber, userField1, userField2, userField3, userField4, userField5, comments, workflowOverride, isMarkedForQA, isQAOptional, qAPercent, isMarkedForClientReview, qAProgramId, transcriptionModified, qARatingsAreFeedbackOnly, qARatingsWereApplied, transcriptionDictationPath, patientLetterId, wasSplit, tagsTable, signaturesTable, associatesTable, optionalVariablesTable, qAFeedbackRatingsTable, contentTypeID, hTMLContent, inScribeVersion, totalIdleSeconds, totalJobSeconds, initialIdleSeconds, originalQTCharacters, originalNonVisibleQTCharacters, originalAutoTextCharacters, indexMarkSeconds, audioPlayed, audioPlayedFully, CancellationToken.None);
	public static async Task<Int32> EditWorkItem2Async(SqlConnection connection, Guid workItemID, Int32 transcriptionID, Int32 originalTranscriptionID, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 clientID, Int32 transcriptionistID, Int32 dictatingUserID, Int32 documentID, Int32 locationID, Byte[] transcriptionContent, DateTimeOffset dateDictated, DateTime appointmentDate, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 workflowOverride, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean isMarkedForClientReview, Int32 qAProgramId, Boolean transcriptionModified, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, String transcriptionDictationPath, Int32 patientLetterId, Boolean wasSplit, List<TagsTableRow> tagsTable, List<SignaturesTableRow> signaturesTable, List<AssociatesTable2Row> associatesTable, List<NameValuePairsTableRow> optionalVariablesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Int32 contentTypeID, Byte[] hTMLContent, String inScribeVersion, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, Boolean audioPlayed, Boolean audioPlayedFully, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Work_Item_2");

		cmd.Parameters.Add(CreateParameter("@Work_Item_ID", workItemID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_Transcription_ID", originalTranscriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Append_Transcription_ID", appendTranscriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Correction_Transcription_ID", correctionTranscriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictating_User_ID", dictatingUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_Content", transcriptionContent, SqlDbType.VarBinary));
		cmd.Parameters.Add(CreateParameter("@Date_Dictated", dateDictated, SqlDbType.DateTimeOffset, 10));
		cmd.Parameters.Add(CreateParameter("@Appointment_Date", appointmentDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Name", patientName, SqlDbType.VarChar, 40));
		cmd.Parameters.Add(CreateParameter("@Patient_Birthdate", patientBirthdate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Patient_Gender", patientGender, SqlDbType.Char, 1));
		cmd.Parameters.Add(CreateParameter("@Patient_Name_First", patientNameFirst, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Name_Middle", patientNameMiddle, SqlDbType.Char, 1));
		cmd.Parameters.Add(CreateParameter("@Patient_Name_Last", patientNameLast, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_1", patientAddress1, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_2", patientAddress2, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_City", patientCity, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_State", patientState, SqlDbType.Char, 3));
		cmd.Parameters.Add(CreateParameter("@Patient_Zip_Code", patientZipCode, SqlDbType.Char, 9));
		cmd.Parameters.Add(CreateParameter("@Patient_Home_Phone", patientHomePhone, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Work_Phone", patientWorkPhone, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Order_Number", patientOrderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_1", patientUserField1, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_2", patientUserField2, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_3", patientUserField3, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_4", patientUserField4, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_5", patientUserField5, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_AddToDB", patientAddToDB, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Order_Number", orderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@User_Field_1", userField1, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_2", userField2, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_3", userField3, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_4", userField4, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_5", userField5, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Comments", comments, SqlDbType.VarChar, 1000));
		cmd.Parameters.Add(CreateParameter("@WorkflowOverride", workflowOverride, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@IsMarkedForQA", isMarkedForQA, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@IsQAOptional", isQAOptional, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@QAPercent", qAPercent, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@IsMarkedForClientReview", isMarkedForClientReview, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@QAProgram_Id", qAProgramId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_Modified", transcriptionModified, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@QARatingsAreFeedbackOnly", qARatingsAreFeedbackOnly, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@QARatingsWereApplied", qARatingsWereApplied, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Transcription_DictationPath", transcriptionDictationPath, SqlDbType.VarChar, 1000));
		cmd.Parameters.Add(CreateParameter("@Patient_Letter_Id", patientLetterId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Was_Split", wasSplit, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Tags_Table", new TagsTableRowDataTable(tagsTable), SqlDbType.Structured, "dbo.TagsTable"));
		cmd.Parameters.Add(CreateParameter("@Signatures_Table", new SignaturesTableRowDataTable(signaturesTable), SqlDbType.Structured, "dbo.SignaturesTable"));
		cmd.Parameters.Add(CreateParameter("@Associates_Table", new AssociatesTable2RowDataTable(associatesTable), SqlDbType.Structured, "dbo.AssociatesTable2"));
		cmd.Parameters.Add(CreateParameter("@OptionalVariables_Table", new NameValuePairsTableRowDataTable(optionalVariablesTable), SqlDbType.Structured, "dbo.NameValuePairsTable"));
		cmd.Parameters.Add(CreateParameter("@QAFeedbackRatings_Table", new QAFeedbackRatingsTableRowDataTable(qAFeedbackRatingsTable), SqlDbType.Structured, "dbo.QAFeedbackRatingsTable"));
		cmd.Parameters.Add(CreateParameter("@Content_Type_ID", contentTypeID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@HTML_Content", hTMLContent, SqlDbType.VarBinary));
		cmd.Parameters.Add(CreateParameter("@InScribe_Version", inScribeVersion, SqlDbType.VarChar, 25));
		cmd.Parameters.Add(CreateParameter("@Total_Idle_Seconds", totalIdleSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Total_Job_Seconds", totalJobSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Initial_Idle_Seconds", initialIdleSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_QTCharacters", originalQTCharacters, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_NonVisible_QTCharacters", originalNonVisibleQTCharacters, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_AutoTextCharacters", originalAutoTextCharacters, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Index_Mark_Seconds", indexMarkSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Audio_Played", audioPlayed, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Audio_Played_Fully", audioPlayedFully, SqlDbType.Bit, 1));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> EditWorkItem3Async(SqlConnection connection, Guid workItemID, Int32 transcriptionID, Int32 originalTranscriptionID, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 clientID, Int32 transcriptionistID, Int32 dictatingUserID, Int32 documentID, Int32 locationID, Byte[] transcriptionContent, DateTimeOffset dateDictated, DateTime appointmentDate, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 workflowOverride, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean isMarkedForClientReview, Int32 qAProgramId, Boolean transcriptionModified, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, String transcriptionDictationPath, Int32 patientLetterId, Boolean wasSplit, List<TagsTableRow> tagsTable, List<SignaturesTableRow> signaturesTable, List<AssociatesTable3Row> associatesTable, List<NameValuePairsTableRow> optionalVariablesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Int32 contentTypeID, Byte[] hTMLContent, String inScribeVersion, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, Boolean audioPlayed, Boolean audioPlayedFully) => EditWorkItem3Async(connection, workItemID, transcriptionID, originalTranscriptionID, appendTranscriptionID, correctionTranscriptionID, clientID, transcriptionistID, dictatingUserID, documentID, locationID, transcriptionContent, dateDictated, appointmentDate, patientID, patientName, patientBirthdate, patientGender, patientNameFirst, patientNameMiddle, patientNameLast, patientAddress1, patientAddress2, patientCity, patientState, patientZipCode, patientHomePhone, patientWorkPhone, patientOrderNumber, patientUserField1, patientUserField2, patientUserField3, patientUserField4, patientUserField5, patientAddToDB, orderNumber, userField1, userField2, userField3, userField4, userField5, comments, workflowOverride, isMarkedForQA, isQAOptional, qAPercent, isMarkedForClientReview, qAProgramId, transcriptionModified, qARatingsAreFeedbackOnly, qARatingsWereApplied, transcriptionDictationPath, patientLetterId, wasSplit, tagsTable, signaturesTable, associatesTable, optionalVariablesTable, qAFeedbackRatingsTable, contentTypeID, hTMLContent, inScribeVersion, totalIdleSeconds, totalJobSeconds, initialIdleSeconds, originalQTCharacters, originalNonVisibleQTCharacters, originalAutoTextCharacters, indexMarkSeconds, audioPlayed, audioPlayedFully, CancellationToken.None);
	public static async Task<Int32> EditWorkItem3Async(SqlConnection connection, Guid workItemID, Int32 transcriptionID, Int32 originalTranscriptionID, Int32 appendTranscriptionID, Int32 correctionTranscriptionID, Int32 clientID, Int32 transcriptionistID, Int32 dictatingUserID, Int32 documentID, Int32 locationID, Byte[] transcriptionContent, DateTimeOffset dateDictated, DateTime appointmentDate, String patientID, String patientName, DateTime patientBirthdate, String patientGender, String patientNameFirst, String patientNameMiddle, String patientNameLast, String patientAddress1, String patientAddress2, String patientCity, String patientState, String patientZipCode, String patientHomePhone, String patientWorkPhone, String patientOrderNumber, String patientUserField1, String patientUserField2, String patientUserField3, String patientUserField4, String patientUserField5, Boolean patientAddToDB, String orderNumber, String userField1, String userField2, String userField3, String userField4, String userField5, String comments, Int32 workflowOverride, Boolean isMarkedForQA, Boolean isQAOptional, Int32 qAPercent, Boolean isMarkedForClientReview, Int32 qAProgramId, Boolean transcriptionModified, Boolean qARatingsAreFeedbackOnly, Boolean qARatingsWereApplied, String transcriptionDictationPath, Int32 patientLetterId, Boolean wasSplit, List<TagsTableRow> tagsTable, List<SignaturesTableRow> signaturesTable, List<AssociatesTable3Row> associatesTable, List<NameValuePairsTableRow> optionalVariablesTable, List<QAFeedbackRatingsTableRow> qAFeedbackRatingsTable, Int32 contentTypeID, Byte[] hTMLContent, String inScribeVersion, Int32 totalIdleSeconds, Int32 totalJobSeconds, Int32 initialIdleSeconds, Int32 originalQTCharacters, Int32 originalNonVisibleQTCharacters, Int32 originalAutoTextCharacters, Int32 indexMarkSeconds, Boolean audioPlayed, Boolean audioPlayedFully, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Work_Item_3");

		cmd.Parameters.Add(CreateParameter("@Work_Item_ID", workItemID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_Transcription_ID", originalTranscriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Append_Transcription_ID", appendTranscriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Correction_Transcription_ID", correctionTranscriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictating_User_ID", dictatingUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_Content", transcriptionContent, SqlDbType.VarBinary));
		cmd.Parameters.Add(CreateParameter("@Date_Dictated", dateDictated, SqlDbType.DateTimeOffset, 10));
		cmd.Parameters.Add(CreateParameter("@Appointment_Date", appointmentDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Name", patientName, SqlDbType.VarChar, 40));
		cmd.Parameters.Add(CreateParameter("@Patient_Birthdate", patientBirthdate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@Patient_Gender", patientGender, SqlDbType.Char, 1));
		cmd.Parameters.Add(CreateParameter("@Patient_Name_First", patientNameFirst, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Name_Middle", patientNameMiddle, SqlDbType.Char, 1));
		cmd.Parameters.Add(CreateParameter("@Patient_Name_Last", patientNameLast, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_1", patientAddress1, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_Address_2", patientAddress2, SqlDbType.Char, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_City", patientCity, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_State", patientState, SqlDbType.Char, 3));
		cmd.Parameters.Add(CreateParameter("@Patient_Zip_Code", patientZipCode, SqlDbType.Char, 9));
		cmd.Parameters.Add(CreateParameter("@Patient_Home_Phone", patientHomePhone, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Work_Phone", patientWorkPhone, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Order_Number", patientOrderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_1", patientUserField1, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_2", patientUserField2, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_3", patientUserField3, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_4", patientUserField4, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_User_Field_5", patientUserField5, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Patient_AddToDB", patientAddToDB, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Order_Number", orderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@User_Field_1", userField1, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_2", userField2, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_3", userField3, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_4", userField4, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_Field_5", userField5, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Comments", comments, SqlDbType.VarChar, 1000));
		cmd.Parameters.Add(CreateParameter("@WorkflowOverride", workflowOverride, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@IsMarkedForQA", isMarkedForQA, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@IsQAOptional", isQAOptional, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@QAPercent", qAPercent, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@IsMarkedForClientReview", isMarkedForClientReview, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@QAProgram_Id", qAProgramId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_Modified", transcriptionModified, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@QARatingsAreFeedbackOnly", qARatingsAreFeedbackOnly, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@QARatingsWereApplied", qARatingsWereApplied, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Transcription_DictationPath", transcriptionDictationPath, SqlDbType.VarChar, 1000));
		cmd.Parameters.Add(CreateParameter("@Patient_Letter_Id", patientLetterId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Was_Split", wasSplit, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Tags_Table", new TagsTableRowDataTable(tagsTable), SqlDbType.Structured, "dbo.TagsTable"));
		cmd.Parameters.Add(CreateParameter("@Signatures_Table", new SignaturesTableRowDataTable(signaturesTable), SqlDbType.Structured, "dbo.SignaturesTable"));
		cmd.Parameters.Add(CreateParameter("@Associates_Table", new AssociatesTable3RowDataTable(associatesTable), SqlDbType.Structured, "dbo.AssociatesTable3"));
		cmd.Parameters.Add(CreateParameter("@OptionalVariables_Table", new NameValuePairsTableRowDataTable(optionalVariablesTable), SqlDbType.Structured, "dbo.NameValuePairsTable"));
		cmd.Parameters.Add(CreateParameter("@QAFeedbackRatings_Table", new QAFeedbackRatingsTableRowDataTable(qAFeedbackRatingsTable), SqlDbType.Structured, "dbo.QAFeedbackRatingsTable"));
		cmd.Parameters.Add(CreateParameter("@Content_Type_ID", contentTypeID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@HTML_Content", hTMLContent, SqlDbType.VarBinary));
		cmd.Parameters.Add(CreateParameter("@InScribe_Version", inScribeVersion, SqlDbType.VarChar, 25));
		cmd.Parameters.Add(CreateParameter("@Total_Idle_Seconds", totalIdleSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Total_Job_Seconds", totalJobSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Initial_Idle_Seconds", initialIdleSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_QTCharacters", originalQTCharacters, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_NonVisible_QTCharacters", originalNonVisibleQTCharacters, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Original_AutoTextCharacters", originalAutoTextCharacters, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Index_Mark_Seconds", indexMarkSeconds, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Audio_Played", audioPlayed, SqlDbType.Bit, 1));
		cmd.Parameters.Add(CreateParameter("@Audio_Played_Fully", audioPlayedFully, SqlDbType.Bit, 1));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<List<EditWorkItemStatusRow>> EditWorkItemStatusAsync(SqlConnection connection, Guid workItemID, DateTime dateProcessed, Int32 statusID) => EditWorkItemStatusAsync(connection, workItemID, dateProcessed, statusID, CancellationToken.None);
	public static async Task<List<EditWorkItemStatusRow>> EditWorkItemStatusAsync(SqlConnection connection, Guid workItemID, DateTime dateProcessed, Int32 statusID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Work_Item_Status");

		cmd.Parameters.Add(CreateParameter("@Work_Item_ID", workItemID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Date_Processed", dateProcessed, SqlDbType.DateTime2, 7));
		cmd.Parameters.Add(CreateParameter("@Status_ID", statusID, SqlDbType.Int, 4));

		var result = new List<EditWorkItemStatusRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordReceivedTranscriptionJobID = reader.GetOrdinal("Received_Transcription_Job_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordDateProcessed = reader.GetOrdinal("Date_Processed");
			int ordNewStatusID = reader.GetOrdinal("New_Status_ID");
			int ordOldStatusID = reader.GetOrdinal("Old_Status_ID");

			do
			{
				result.Add(new EditWorkItemStatusRow
				{
					ReceivedTranscriptionJobID = GetNonNullFieldValue<Guid>(reader, ordReceivedTranscriptionJobID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					TranscriptionID = GetFieldValue<Int32>(reader, ordTranscriptionID),
					DateProcessed = GetFieldValue<DateTime>(reader, ordDateProcessed),
					NewStatusID = GetNonNullFieldValue<Int32>(reader, ordNewStatusID),
					OldStatusID = GetNonNullFieldValue<Int32>(reader, ordOldStatusID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<Int32> EditWorkItemTranscriptionAsync(SqlConnection connection, Guid workItemID, Byte[] transcriptionContent, Byte[] hTMLContent, Int32 contentTypeID) => EditWorkItemTranscriptionAsync(connection, workItemID, transcriptionContent, hTMLContent, contentTypeID, CancellationToken.None);
	public static async Task<Int32> EditWorkItemTranscriptionAsync(SqlConnection connection, Guid workItemID, Byte[] transcriptionContent, Byte[] hTMLContent, Int32 contentTypeID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Edit_Work_Item_Transcription");

		cmd.Parameters.Add(CreateParameter("@Work_Item_ID", workItemID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Transcription_Content", transcriptionContent, SqlDbType.VarBinary));
		cmd.Parameters.Add(CreateParameter("@HTML_Content", hTMLContent, SqlDbType.VarBinary));
		cmd.Parameters.Add(CreateParameter("@Content_Type_ID", contentTypeID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<List<EmergencyGetCompanyUserClientPoolTranscriptionJobRow>> EmergencyGetCompanyUserClientPoolTranscriptionJobAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 transcriptionID, Boolean enableAvailablePoolJobs) => EmergencyGetCompanyUserClientPoolTranscriptionJobAsync(connection, companyID, companyUserID, transcriptionID, enableAvailablePoolJobs, CancellationToken.None);
	public static async Task<List<EmergencyGetCompanyUserClientPoolTranscriptionJobRow>> EmergencyGetCompanyUserClientPoolTranscriptionJobAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 transcriptionID, Boolean enableAvailablePoolJobs, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Emergency_Get_Company_User_ClientPoolTranscriptionJob");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Company_User_ID", companyUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Enable_Available_Pool_Jobs", enableAvailablePoolJobs, SqlDbType.Bit, 1));

		var result = new List<EmergencyGetCompanyUserClientPoolTranscriptionJobRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionistCompanyID = reader.GetOrdinal("Transcriptionist_Company_ID");
			int ordTranscriptionistID = reader.GetOrdinal("Transcriptionist_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");

			do
			{
				result.Add(new EmergencyGetCompanyUserClientPoolTranscriptionJobRow
				{
					TranscriptionistCompanyID = GetFieldValue<Int32>(reader, ordTranscriptionistCompanyID),
					TranscriptionistID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionistID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetASRXSLStylesheetPathRow>> GetASRXSLStylesheetPathAsync(SqlConnection connection, Int32 clientID, Int32 documentID, Int32 userID, Int32 locationID) => GetASRXSLStylesheetPathAsync(connection, clientID, documentID, userID, locationID, CancellationToken.None);
	public static async Task<List<GetASRXSLStylesheetPathRow>> GetASRXSLStylesheetPathAsync(SqlConnection connection, Int32 clientID, Int32 documentID, Int32 userID, Int32 locationID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_ASR_XSLStylesheet_Path");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));

		var result = new List<GetASRXSLStylesheetPathRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordXSLStyleSheetPath = reader.GetOrdinal("XSLStyleSheetPath");
			int ordIsCDSOnly = reader.GetOrdinal("Is_CDS_Only");
			int ordSortPath = reader.GetOrdinal("SortPath");

			do
			{
				result.Add(new GetASRXSLStylesheetPathRow
				{
					XSLStyleSheetPath = GetField<String>(reader, ordXSLStyleSheetPath),
					IsCDSOnly = GetFieldValue<Boolean>(reader, ordIsCDSOnly),
					SortPath = GetField<String>(reader, ordSortPath),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetAttestationTemplateRow>> GetAttestationTemplateAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 templateID) => GetAttestationTemplateAsync(connection, clientID, userID, templateID, CancellationToken.None);
	public static async Task<List<GetAttestationTemplateRow>> GetAttestationTemplateAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 templateID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Attestation_Template");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Template_ID", templateID, SqlDbType.Int, 4));

		var result = new List<GetAttestationTemplateRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTemplateID = reader.GetOrdinal("Template_ID");
			int ordDictationCode = reader.GetOrdinal("Dictation_Code");
			int ordTemplateFilePath = reader.GetOrdinal("Template_FilePath");

			do
			{
				result.Add(new GetAttestationTemplateRow
				{
					TemplateID = GetNonNullFieldValue<Int32>(reader, ordTemplateID),
					DictationCode = GetNonNullField<String>(reader, ordDictationCode),
					TemplateFilePath = GetField<String>(reader, ordTemplateFilePath),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCaseAttachmentsRow>> GetCaseAttachmentsAsync(SqlConnection connection, Guid caseID) => GetCaseAttachmentsAsync(connection, caseID, CancellationToken.None);
	public static async Task<List<GetCaseAttachmentsRow>> GetCaseAttachmentsAsync(SqlConnection connection, Guid caseID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Case_Attachments");

		cmd.Parameters.Add(CreateParameter("@Case_ID", caseID, SqlDbType.UniqueIdentifier, 16));

		var result = new List<GetCaseAttachmentsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCaseAttachmentID = reader.GetOrdinal("Case_Attachment_ID");
			int ordCaseID = reader.GetOrdinal("Case_ID");
			int ordFileName = reader.GetOrdinal("File_Name");
			int ordDateCreated = reader.GetOrdinal("Date_Created");
			int ordDateCompleted = reader.GetOrdinal("Date_Completed");
			int ordExternalID = reader.GetOrdinal("External_ID");

			do
			{
				result.Add(new GetCaseAttachmentsRow
				{
					CaseAttachmentID = GetNonNullFieldValue<Int32>(reader, ordCaseAttachmentID),
					CaseID = GetNonNullFieldValue<Guid>(reader, ordCaseID),
					FileName = GetField<String>(reader, ordFileName),
					DateCreated = GetNonNullFieldValue<DateTime>(reader, ordDateCreated),
					DateCompleted = GetFieldValue<DateTime>(reader, ordDateCompleted),
					ExternalID = GetField<String>(reader, ordExternalID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientRow>> GetClientAsync(SqlConnection connection, Int32 id) => GetClientAsync(connection, id, CancellationToken.None);
	public static async Task<List<GetClientRow>> GetClientAsync(SqlConnection connection, Int32 id, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client");

		cmd.Parameters.Add(CreateParameter("@Id", id, SqlDbType.Int, 4));

		var result = new List<GetClientRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordClientName = reader.GetOrdinal("Client_Name");
			int ordClientFullName = reader.GetOrdinal("Client_FullName");
			int ordClientActive = reader.GetOrdinal("Client_Active");
			int ordClientAddress1 = reader.GetOrdinal("Client_Address_1");
			int ordClientAddress2 = reader.GetOrdinal("Client_Address_2");
			int ordClientAddress3 = reader.GetOrdinal("Client_Address_3");
			int ordClientCity = reader.GetOrdinal("Client_City");
			int ordClientState = reader.GetOrdinal("Client_State");
			int ordClientZipCode = reader.GetOrdinal("Client_Zip_Code");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordTimeZoneIdentifier = reader.GetOrdinal("TimeZone_Identifier");

			do
			{
				result.Add(new GetClientRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					ClientName = GetNonNullField<String>(reader, ordClientName),
					ClientFullName = GetField<String>(reader, ordClientFullName),
					ClientActive = GetNonNullFieldValue<Boolean>(reader, ordClientActive),
					ClientAddress1 = GetField<String>(reader, ordClientAddress1),
					ClientAddress2 = GetField<String>(reader, ordClientAddress2),
					ClientAddress3 = GetField<String>(reader, ordClientAddress3),
					ClientCity = GetField<String>(reader, ordClientCity),
					ClientState = GetField<String>(reader, ordClientState),
					ClientZipCode = GetField<String>(reader, ordClientZipCode),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					TimeZoneIdentifier = GetField<String>(reader, ordTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientAddressConfigurationRow>> GetClientAddressConfigurationAsync(SqlConnection connection, Int32 clientID) => GetClientAddressConfigurationAsync(connection, clientID, CancellationToken.None);
	public static async Task<List<GetClientAddressConfigurationRow>> GetClientAddressConfigurationAsync(SqlConnection connection, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Address_Configuration");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetClientAddressConfigurationRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordAddress1_InUse = reader.GetOrdinal("Address_1_In_Use");
			int ordAddress1_Label = reader.GetOrdinal("Address_1_Label");
			int ordAddress2_InUse = reader.GetOrdinal("Address_2_In_Use");
			int ordAddress2_Label = reader.GetOrdinal("Address_2_Label");
			int ordAddress3_InUse = reader.GetOrdinal("Address_3_In_Use");
			int ordAddress3_Label = reader.GetOrdinal("Address_3_Label");
			int ordCityInUse = reader.GetOrdinal("City_In_Use");
			int ordCityLabel = reader.GetOrdinal("City_Label");
			int ordStateInUse = reader.GetOrdinal("State_In_Use");
			int ordStateLabel = reader.GetOrdinal("State_Label");
			int ordZipInUse = reader.GetOrdinal("Zip_In_Use");
			int ordZipLabel = reader.GetOrdinal("Zip_Label");
			int ordCompanyInUse = reader.GetOrdinal("Company_In_Use");
			int ordCompanyLabel = reader.GetOrdinal("Company_Label");
			int ordCountryInUse = reader.GetOrdinal("Country_In_Use");
			int ordCountryLabel = reader.GetOrdinal("Country_Label");

			do
			{
				result.Add(new GetClientAddressConfigurationRow
				{
					Address1_InUse = GetNonNullFieldValue<Boolean>(reader, ordAddress1_InUse),
					Address1_Label = GetField<String>(reader, ordAddress1_Label),
					Address2_InUse = GetNonNullFieldValue<Boolean>(reader, ordAddress2_InUse),
					Address2_Label = GetField<String>(reader, ordAddress2_Label),
					Address3_InUse = GetNonNullFieldValue<Boolean>(reader, ordAddress3_InUse),
					Address3_Label = GetField<String>(reader, ordAddress3_Label),
					CityInUse = GetNonNullFieldValue<Boolean>(reader, ordCityInUse),
					CityLabel = GetField<String>(reader, ordCityLabel),
					StateInUse = GetNonNullFieldValue<Boolean>(reader, ordStateInUse),
					StateLabel = GetField<String>(reader, ordStateLabel),
					ZipInUse = GetNonNullFieldValue<Boolean>(reader, ordZipInUse),
					ZipLabel = GetField<String>(reader, ordZipLabel),
					CompanyInUse = GetNonNullFieldValue<Boolean>(reader, ordCompanyInUse),
					CompanyLabel = GetField<String>(reader, ordCompanyLabel),
					CountryInUse = GetNonNullFieldValue<Boolean>(reader, ordCountryInUse),
					CountryLabel = GetField<String>(reader, ordCountryLabel),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientAppointmentDictationsRow>> GetClientAppointmentDictationsAsync(SqlConnection connection, Int32 clientID, Guid appointmentID) => GetClientAppointmentDictationsAsync(connection, clientID, appointmentID, CancellationToken.None);
	public static async Task<List<GetClientAppointmentDictationsRow>> GetClientAppointmentDictationsAsync(SqlConnection connection, Int32 clientID, Guid appointmentID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Appointment_Dictations");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Appointment_ID", appointmentID, SqlDbType.UniqueIdentifier, 16));

		var result = new List<GetClientAppointmentDictationsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordUserID = reader.GetOrdinal("User_ID");

			do
			{
				result.Add(new GetClientAppointmentDictationsRow
				{
					DictationID = GetNonNullFieldValue<Int32>(reader, ordDictationID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientArtifactSearchPatientOrdersRow>> GetClientArtifactSearchPatientOrdersAsync(SqlConnection connection, Int32 clientID, String nameLast, String nameFirst, DateTime birthdate, Int32 age, String gender, String patientID, String accountNumber, String orderNumber, DateTime appointmentDate, DateTime admissionDate, String nameFull, Int32 schedulingResourceUserID, DateTime patientAppointmentDate, DateTime appointmentAdmissionDate, String appointmentOrderNumber, String orderOrderNumber, String orderAccessionNumber, DateTime orderDateObserved, Int32 filterLocationID, Guid patientGUID, Guid patientVisitID, Guid orderID, Int32 patientsAppointmentsTypeID, DateTimeOffset appointmentAppointmentDateStart, DateTimeOffset appointmentAppointmentDateEnd) => GetClientArtifactSearchPatientOrdersAsync(connection, clientID, nameLast, nameFirst, birthdate, age, gender, patientID, accountNumber, orderNumber, appointmentDate, admissionDate, nameFull, schedulingResourceUserID, patientAppointmentDate, appointmentAdmissionDate, appointmentOrderNumber, orderOrderNumber, orderAccessionNumber, orderDateObserved, filterLocationID, patientGUID, patientVisitID, orderID, patientsAppointmentsTypeID, appointmentAppointmentDateStart, appointmentAppointmentDateEnd, CancellationToken.None);
	public static async Task<List<GetClientArtifactSearchPatientOrdersRow>> GetClientArtifactSearchPatientOrdersAsync(SqlConnection connection, Int32 clientID, String nameLast, String nameFirst, DateTime birthdate, Int32 age, String gender, String patientID, String accountNumber, String orderNumber, DateTime appointmentDate, DateTime admissionDate, String nameFull, Int32 schedulingResourceUserID, DateTime patientAppointmentDate, DateTime appointmentAdmissionDate, String appointmentOrderNumber, String orderOrderNumber, String orderAccessionNumber, DateTime orderDateObserved, Int32 filterLocationID, Guid patientGUID, Guid patientVisitID, Guid orderID, Int32 patientsAppointmentsTypeID, DateTimeOffset appointmentAppointmentDateStart, DateTimeOffset appointmentAppointmentDateEnd, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Artifact_Search_PatientOrders");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Name_Last", nameLast, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Name_First", nameFirst, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Birthdate", birthdate, SqlDbType.Date, 3));
		cmd.Parameters.Add(CreateParameter("@Age", age, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Gender", gender, SqlDbType.Char, 1));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Account_Number", accountNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Order_Number", orderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Appointment_Date", appointmentDate, SqlDbType.Date, 3));
		cmd.Parameters.Add(CreateParameter("@Admission_Date", admissionDate, SqlDbType.Date, 3));
		cmd.Parameters.Add(CreateParameter("@Name_Full", nameFull, SqlDbType.VarChar, 40));
		cmd.Parameters.Add(CreateParameter("@Scheduling_Resource_User_ID", schedulingResourceUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patient_Appointment_Date", patientAppointmentDate, SqlDbType.Date, 3));
		cmd.Parameters.Add(CreateParameter("@Appointment_Admission_Date", appointmentAdmissionDate, SqlDbType.Date, 3));
		cmd.Parameters.Add(CreateParameter("@Appointment_Order_Number", appointmentOrderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Order_Order_Number", orderOrderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Order_Accession_Number", orderAccessionNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Order_Date_Observed", orderDateObserved, SqlDbType.Date, 3));
		cmd.Parameters.Add(CreateParameter("@Filter_Location_ID", filterLocationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patient_GUID", patientGUID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Patient_Visit_ID", patientVisitID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Order_ID", orderID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Patients_Appointments_Type_ID", patientsAppointmentsTypeID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Appointment_Appointment_Date_Start", appointmentAppointmentDateStart, SqlDbType.DateTimeOffset, 10));
		cmd.Parameters.Add(CreateParameter("@Appointment_Appointment_Date_End", appointmentAppointmentDateEnd, SqlDbType.DateTimeOffset, 10));

		var result = new List<GetClientArtifactSearchPatientOrdersRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientNameFirst = reader.GetOrdinal("Patient_Name_First");
			int ordPatientNameMiddle = reader.GetOrdinal("Patient_Name_Middle");
			int ordPatientNameLast = reader.GetOrdinal("Patient_Name_Last");
			int ordPatientFullName = reader.GetOrdinal("Patient_Full_Name");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientAppointmentDate = reader.GetOrdinal("Patient_Appointment_Date");
			int ordPatientOrderNumber = reader.GetOrdinal("Patient_Order_Number");
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");
			int ordPatientModifiedDate = reader.GetOrdinal("Patient_Modified_Date");
			int ordPatientModifiedUser = reader.GetOrdinal("Patient_Modified_User");
			int ordAppointmentAppointmentDate = reader.GetOrdinal("Appointment_Appointment_Date");
			int ordAppointmentOrderNumber = reader.GetOrdinal("Appointment_Order_Number");
			int ordAppointmentAppointmentID = reader.GetOrdinal("Appointment_Appointment_ID");
			int ordAppointmentUserField1 = reader.GetOrdinal("Appointment_User_Field_1");
			int ordAppointmentUserField2 = reader.GetOrdinal("Appointment_User_Field_2");
			int ordAppointmentUserField3 = reader.GetOrdinal("Appointment_User_Field_3");
			int ordAppointmentUserField4 = reader.GetOrdinal("Appointment_User_Field_4");
			int ordAppointmentUserField5 = reader.GetOrdinal("Appointment_User_Field_5");
			int ordAppointmentDescription = reader.GetOrdinal("Appointment_Description");
			int ordAppointmentAccountNumber = reader.GetOrdinal("Appointment_Account_Number");
			int ordAppointmentAdmitDate = reader.GetOrdinal("Appointment_Admit_Date");
			int ordAppointmentDischargeDate = reader.GetOrdinal("Appointment_Discharge_Date");
			int ordAppointmentBed = reader.GetOrdinal("Appointment_Bed");
			int ordAppointmentFloor = reader.GetOrdinal("Appointment_Floor");
			int ordAppointmentPatientClass = reader.GetOrdinal("Appointment_Patient_Class");
			int ordAppointmentPatientType = reader.GetOrdinal("Appointment_Patient_Type");
			int ordPatientsAppointmentsTypeID = reader.GetOrdinal("Patients_Appointments_Type_ID");
			int ordAppointmentRoom = reader.GetOrdinal("Appointment_Room");
			int ordAppointmentFacility = reader.GetOrdinal("Appointment_Facility");
			int ordAppointmentAppointmentClientCode = reader.GetOrdinal("Appointment_Appointment_Client_Code");
			int ordAppointmentPatientsAppointmentsStatusID = reader.GetOrdinal("Appointment_Patients_Appointments_Status_ID");
			int ordAppointmentPatientLocation = reader.GetOrdinal("Appointment_Patient_Location");
			int ordAppointmentAttendingPhysicianName = reader.GetOrdinal("Appointment_Attending_Physician_Name");
			int ordAppointmentAdmittingPhysicianName = reader.GetOrdinal("Appointment_Admitting_Physician_Name");
			int ordAppointmentReferringPhysicianName = reader.GetOrdinal("Appointment_Referring_Physician_Name");
			int ordAppointmentConsultingPhysicianName = reader.GetOrdinal("Appointment_Consulting_Physician_Name");
			int ordAppointmentPrimaryCarePhysicianName = reader.GetOrdinal("Appointment_Primary_Care_Physician_Name");
			int ordAppointmentAttendingPhysicianNamePrefix = reader.GetOrdinal("Appointment_Attending_Physician_Name_Prefix");
			int ordAppointmentAttendingPhysicianNameFirst = reader.GetOrdinal("Appointment_Attending_Physician_Name_First");
			int ordAppointmentAttendingPhysicianNameMiddle = reader.GetOrdinal("Appointment_Attending_Physician_Name_Middle");
			int ordAppointmentAttendingPhysicianNameLast = reader.GetOrdinal("Appointment_Attending_Physician_Name_Last");
			int ordAppointmentAttendingPhysicianNameSuffix = reader.GetOrdinal("Appointment_Attending_Physician_Name_Suffix");
			int ordAppointmentAdmittingPhysicianNamePrefix = reader.GetOrdinal("Appointment_Admitting_Physician_Name_Prefix");
			int ordAppointmentAdmittingPhysicianNameFirst = reader.GetOrdinal("Appointment_Admitting_Physician_Name_First");
			int ordAppointmentAdmittingPhysicianNameMiddle = reader.GetOrdinal("Appointment_Admitting_Physician_Name_Middle");
			int ordAppointmentAdmittingPhysicianNameLast = reader.GetOrdinal("Appointment_Admitting_Physician_Name_Last");
			int ordAppointmentAdmittingPhysicianNameSuffix = reader.GetOrdinal("Appointment_Admitting_Physician_Name_Suffix");
			int ordAppointmentReferringPhysicianNamePrefix = reader.GetOrdinal("Appointment_Referring_Physician_Name_Prefix");
			int ordAppointmentReferringPhysicianNameFirst = reader.GetOrdinal("Appointment_Referring_Physician_Name_First");
			int ordAppointmentReferringPhysicianNameMiddle = reader.GetOrdinal("Appointment_Referring_Physician_Name_Middle");
			int ordAppointmentReferringPhysicianNameLast = reader.GetOrdinal("Appointment_Referring_Physician_Name_Last");
			int ordAppointmentReferringPhysicianNameSuffix = reader.GetOrdinal("Appointment_Referring_Physician_Name_Suffix");
			int ordAppointmentConsultingPhysicianNamePrefix = reader.GetOrdinal("Appointment_Consulting_Physician_Name_Prefix");
			int ordAppointmentConsultingPhysicianNameFirst = reader.GetOrdinal("Appointment_Consulting_Physician_Name_First");
			int ordAppointmentConsultingPhysicianNameMiddle = reader.GetOrdinal("Appointment_Consulting_Physician_Name_Middle");
			int ordAppointmentConsultingPhysicianNameLast = reader.GetOrdinal("Appointment_Consulting_Physician_Name_Last");
			int ordAppointmentConsultingPhysicianNameSuffix = reader.GetOrdinal("Appointment_Consulting_Physician_Name_Suffix");
			int ordAppointmentPrimaryCarePhysicianNamePrefix = reader.GetOrdinal("Appointment_Primary_Care_Physician_Name_Prefix");
			int ordAppointmentPrimaryCarePhysicianNameFirst = reader.GetOrdinal("Appointment_Primary_Care_Physician_Name_First");
			int ordAppointmentPrimaryCarePhysicianNameMiddle = reader.GetOrdinal("Appointment_Primary_Care_Physician_Name_Middle");
			int ordAppointmentPrimaryCarePhysicianNameLast = reader.GetOrdinal("Appointment_Primary_Care_Physician_Name_Last");
			int ordAppointmentPrimaryCarePhysicianNameSuffix = reader.GetOrdinal("Appointment_Primary_Care_Physician_Name_Suffix");
			int ordAppointmentLocationID = reader.GetOrdinal("Appointment_Location_ID");
			int ordAppointmentLocationName = reader.GetOrdinal("Appointment_Location_Name");
			int ordAppointmentTypeID = reader.GetOrdinal("Appointment_Type_ID");
			int ordAppointmentModifiedDate = reader.GetOrdinal("Appointment_Modified_Date");
			int ordAppointmentModifiedUser = reader.GetOrdinal("Appointment_Modified_User");
			int ordAppointmentDictationCount = reader.GetOrdinal("Appointment_Dictation_Count");
			int ordAppointmentTranscriptionCount = reader.GetOrdinal("Appointment_Transcription_Count");
			int ordAppointmentSchedulingResourceID = reader.GetOrdinal("Appointment_Scheduling_Resource_ID");
			int ordOrderID = reader.GetOrdinal("Order_ID");
			int ordOrderOrderNumber = reader.GetOrdinal("Order_Order_Number");
			int ordOrderDescription = reader.GetOrdinal("Order_Description");
			int ordOrderOrderStatusCode = reader.GetOrdinal("Order_Order_Status_Code");
			int ordOrderOrderStatusName = reader.GetOrdinal("Order_Order_Status_Name");
			int ordOrderOrderStatus = reader.GetOrdinal("Order_Order_Status");
			int ordOrderOrderingPhysicianName = reader.GetOrdinal("Order_Ordering_Physician_Name");
			int ordOrderModifiedDate = reader.GetOrdinal("Order_Modified_Date");
			int ordOrderModifiedUser = reader.GetOrdinal("Order_Modified_User");
			int ordOrderAccessionNumber = reader.GetOrdinal("Order_Accession_Number");
			int ordOrderDateObserved = reader.GetOrdinal("Order_Date_Observed");

			do
			{
				result.Add(new GetClientArtifactSearchPatientOrdersRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					PatientID = GetNonNullField<String>(reader, ordPatientID),
					PatientNameFirst = GetField<String>(reader, ordPatientNameFirst),
					PatientNameMiddle = GetField<String>(reader, ordPatientNameMiddle),
					PatientNameLast = GetField<String>(reader, ordPatientNameLast),
					PatientFullName = GetField<String>(reader, ordPatientFullName),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientAppointmentDate = GetFieldValue<DateTime>(reader, ordPatientAppointmentDate),
					PatientOrderNumber = GetField<String>(reader, ordPatientOrderNumber),
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
					PatientModifiedDate = GetFieldValue<DateTime>(reader, ordPatientModifiedDate),
					PatientModifiedUser = GetField<String>(reader, ordPatientModifiedUser),
					AppointmentAppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentAppointmentDate),
					AppointmentOrderNumber = GetField<String>(reader, ordAppointmentOrderNumber),
					AppointmentAppointmentID = GetFieldValue<Guid>(reader, ordAppointmentAppointmentID),
					AppointmentUserField1 = GetField<String>(reader, ordAppointmentUserField1),
					AppointmentUserField2 = GetField<String>(reader, ordAppointmentUserField2),
					AppointmentUserField3 = GetField<String>(reader, ordAppointmentUserField3),
					AppointmentUserField4 = GetField<String>(reader, ordAppointmentUserField4),
					AppointmentUserField5 = GetField<String>(reader, ordAppointmentUserField5),
					AppointmentDescription = GetField<String>(reader, ordAppointmentDescription),
					AppointmentAccountNumber = GetField<String>(reader, ordAppointmentAccountNumber),
					AppointmentAdmitDate = GetFieldValue<DateTime>(reader, ordAppointmentAdmitDate),
					AppointmentDischargeDate = GetFieldValue<DateTime>(reader, ordAppointmentDischargeDate),
					AppointmentBed = GetField<String>(reader, ordAppointmentBed),
					AppointmentFloor = GetField<String>(reader, ordAppointmentFloor),
					AppointmentPatientClass = GetField<String>(reader, ordAppointmentPatientClass),
					AppointmentPatientType = GetField<String>(reader, ordAppointmentPatientType),
					PatientsAppointmentsTypeID = GetFieldValue<Int32>(reader, ordPatientsAppointmentsTypeID),
					AppointmentRoom = GetField<String>(reader, ordAppointmentRoom),
					AppointmentFacility = GetField<String>(reader, ordAppointmentFacility),
					AppointmentAppointmentClientCode = GetField<String>(reader, ordAppointmentAppointmentClientCode),
					AppointmentPatientsAppointmentsStatusID = GetField<String>(reader, ordAppointmentPatientsAppointmentsStatusID),
					AppointmentPatientLocation = GetField<String>(reader, ordAppointmentPatientLocation),
					AppointmentAttendingPhysicianName = GetField<String>(reader, ordAppointmentAttendingPhysicianName),
					AppointmentAdmittingPhysicianName = GetField<String>(reader, ordAppointmentAdmittingPhysicianName),
					AppointmentReferringPhysicianName = GetField<String>(reader, ordAppointmentReferringPhysicianName),
					AppointmentConsultingPhysicianName = GetField<String>(reader, ordAppointmentConsultingPhysicianName),
					AppointmentPrimaryCarePhysicianName = GetField<String>(reader, ordAppointmentPrimaryCarePhysicianName),
					AppointmentAttendingPhysicianNamePrefix = GetField<String>(reader, ordAppointmentAttendingPhysicianNamePrefix),
					AppointmentAttendingPhysicianNameFirst = GetField<String>(reader, ordAppointmentAttendingPhysicianNameFirst),
					AppointmentAttendingPhysicianNameMiddle = GetField<String>(reader, ordAppointmentAttendingPhysicianNameMiddle),
					AppointmentAttendingPhysicianNameLast = GetField<String>(reader, ordAppointmentAttendingPhysicianNameLast),
					AppointmentAttendingPhysicianNameSuffix = GetField<String>(reader, ordAppointmentAttendingPhysicianNameSuffix),
					AppointmentAdmittingPhysicianNamePrefix = GetField<String>(reader, ordAppointmentAdmittingPhysicianNamePrefix),
					AppointmentAdmittingPhysicianNameFirst = GetField<String>(reader, ordAppointmentAdmittingPhysicianNameFirst),
					AppointmentAdmittingPhysicianNameMiddle = GetField<String>(reader, ordAppointmentAdmittingPhysicianNameMiddle),
					AppointmentAdmittingPhysicianNameLast = GetField<String>(reader, ordAppointmentAdmittingPhysicianNameLast),
					AppointmentAdmittingPhysicianNameSuffix = GetField<String>(reader, ordAppointmentAdmittingPhysicianNameSuffix),
					AppointmentReferringPhysicianNamePrefix = GetField<String>(reader, ordAppointmentReferringPhysicianNamePrefix),
					AppointmentReferringPhysicianNameFirst = GetField<String>(reader, ordAppointmentReferringPhysicianNameFirst),
					AppointmentReferringPhysicianNameMiddle = GetField<String>(reader, ordAppointmentReferringPhysicianNameMiddle),
					AppointmentReferringPhysicianNameLast = GetField<String>(reader, ordAppointmentReferringPhysicianNameLast),
					AppointmentReferringPhysicianNameSuffix = GetField<String>(reader, ordAppointmentReferringPhysicianNameSuffix),
					AppointmentConsultingPhysicianNamePrefix = GetField<String>(reader, ordAppointmentConsultingPhysicianNamePrefix),
					AppointmentConsultingPhysicianNameFirst = GetField<String>(reader, ordAppointmentConsultingPhysicianNameFirst),
					AppointmentConsultingPhysicianNameMiddle = GetField<String>(reader, ordAppointmentConsultingPhysicianNameMiddle),
					AppointmentConsultingPhysicianNameLast = GetField<String>(reader, ordAppointmentConsultingPhysicianNameLast),
					AppointmentConsultingPhysicianNameSuffix = GetField<String>(reader, ordAppointmentConsultingPhysicianNameSuffix),
					AppointmentPrimaryCarePhysicianNamePrefix = GetField<String>(reader, ordAppointmentPrimaryCarePhysicianNamePrefix),
					AppointmentPrimaryCarePhysicianNameFirst = GetField<String>(reader, ordAppointmentPrimaryCarePhysicianNameFirst),
					AppointmentPrimaryCarePhysicianNameMiddle = GetField<String>(reader, ordAppointmentPrimaryCarePhysicianNameMiddle),
					AppointmentPrimaryCarePhysicianNameLast = GetField<String>(reader, ordAppointmentPrimaryCarePhysicianNameLast),
					AppointmentPrimaryCarePhysicianNameSuffix = GetField<String>(reader, ordAppointmentPrimaryCarePhysicianNameSuffix),
					AppointmentLocationID = GetFieldValue<Int32>(reader, ordAppointmentLocationID),
					AppointmentLocationName = GetField<String>(reader, ordAppointmentLocationName),
					AppointmentTypeID = GetFieldValue<Int32>(reader, ordAppointmentTypeID),
					AppointmentModifiedDate = GetFieldValue<DateTime>(reader, ordAppointmentModifiedDate),
					AppointmentModifiedUser = GetField<String>(reader, ordAppointmentModifiedUser),
					AppointmentDictationCount = GetFieldValue<Int32>(reader, ordAppointmentDictationCount),
					AppointmentTranscriptionCount = GetFieldValue<Int32>(reader, ordAppointmentTranscriptionCount),
					AppointmentSchedulingResourceID = GetFieldValue<Int32>(reader, ordAppointmentSchedulingResourceID),
					OrderID = GetNonNullFieldValue<Guid>(reader, ordOrderID),
					OrderOrderNumber = GetNonNullField<String>(reader, ordOrderOrderNumber),
					OrderDescription = GetField<String>(reader, ordOrderDescription),
					OrderOrderStatusCode = GetField<String>(reader, ordOrderOrderStatusCode),
					OrderOrderStatusName = GetField<String>(reader, ordOrderOrderStatusName),
					OrderOrderStatus = GetField<String>(reader, ordOrderOrderStatus),
					OrderOrderingPhysicianName = GetField<String>(reader, ordOrderOrderingPhysicianName),
					OrderModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordOrderModifiedDate),
					OrderModifiedUser = GetNonNullField<String>(reader, ordOrderModifiedUser),
					OrderAccessionNumber = GetField<String>(reader, ordOrderAccessionNumber),
					OrderDateObserved = GetFieldValue<DateTime>(reader, ordOrderDateObserved),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientArtifactSearchPatientsRow>> GetClientArtifactSearchPatientsAsync(SqlConnection connection, Int32 clientID, String nameLast, String nameFirst, DateTime birthdate, Int32 age, String gender, String patientID, String accountNumber, String orderNumber, DateTime appointmentDate, DateTime admissionDate, String nameFull, DateTime appointmentAdmissionDate, DateTime appointmentAppointmentDate, String appointmentOrderNumber, String orderOrderNumber, String orderAccessionNumber, DateTime orderDateObserved, Int32 filterLocationID, Guid patientGUID, Guid patientVisitID, Guid orderID, Int32 patientsAppointmentsTypeID, DateTimeOffset appointmentAppointmentDateStart, DateTimeOffset appointmentAppointmentDateEnd) => GetClientArtifactSearchPatientsAsync(connection, clientID, nameLast, nameFirst, birthdate, age, gender, patientID, accountNumber, orderNumber, appointmentDate, admissionDate, nameFull, appointmentAdmissionDate, appointmentAppointmentDate, appointmentOrderNumber, orderOrderNumber, orderAccessionNumber, orderDateObserved, filterLocationID, patientGUID, patientVisitID, orderID, patientsAppointmentsTypeID, appointmentAppointmentDateStart, appointmentAppointmentDateEnd, CancellationToken.None);
	public static async Task<List<GetClientArtifactSearchPatientsRow>> GetClientArtifactSearchPatientsAsync(SqlConnection connection, Int32 clientID, String nameLast, String nameFirst, DateTime birthdate, Int32 age, String gender, String patientID, String accountNumber, String orderNumber, DateTime appointmentDate, DateTime admissionDate, String nameFull, DateTime appointmentAdmissionDate, DateTime appointmentAppointmentDate, String appointmentOrderNumber, String orderOrderNumber, String orderAccessionNumber, DateTime orderDateObserved, Int32 filterLocationID, Guid patientGUID, Guid patientVisitID, Guid orderID, Int32 patientsAppointmentsTypeID, DateTimeOffset appointmentAppointmentDateStart, DateTimeOffset appointmentAppointmentDateEnd, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Artifact_Search_Patients");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Name_Last", nameLast, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Name_First", nameFirst, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Birthdate", birthdate, SqlDbType.Date, 3));
		cmd.Parameters.Add(CreateParameter("@Age", age, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Gender", gender, SqlDbType.Char, 1));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Account_Number", accountNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Order_Number", orderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Appointment_Date", appointmentDate, SqlDbType.Date, 3));
		cmd.Parameters.Add(CreateParameter("@Admission_Date", admissionDate, SqlDbType.Date, 3));
		cmd.Parameters.Add(CreateParameter("@Name_Full", nameFull, SqlDbType.VarChar, 350));
		cmd.Parameters.Add(CreateParameter("@Appointment_Admission_Date", appointmentAdmissionDate, SqlDbType.Date, 3));
		cmd.Parameters.Add(CreateParameter("@Appointment_Appointment_Date", appointmentAppointmentDate, SqlDbType.Date, 3));
		cmd.Parameters.Add(CreateParameter("@Appointment_Order_Number", appointmentOrderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Order_Order_Number", orderOrderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Order_Accession_Number", orderAccessionNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Order_Date_Observed", orderDateObserved, SqlDbType.Date, 3));
		cmd.Parameters.Add(CreateParameter("@Filter_Location_ID", filterLocationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patient_GUID", patientGUID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Patient_Visit_ID", patientVisitID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Order_ID", orderID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Patients_Appointments_Type_ID", patientsAppointmentsTypeID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Appointment_Appointment_Date_Start", appointmentAppointmentDateStart, SqlDbType.DateTimeOffset, 10));
		cmd.Parameters.Add(CreateParameter("@Appointment_Appointment_Date_End", appointmentAppointmentDateEnd, SqlDbType.DateTimeOffset, 10));

		var result = new List<GetClientArtifactSearchPatientsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientNameFirst = reader.GetOrdinal("Patient_Name_First");
			int ordPatientNameMiddle = reader.GetOrdinal("Patient_Name_Middle");
			int ordPatientNameLast = reader.GetOrdinal("Patient_Name_Last");
			int ordPatientFullName = reader.GetOrdinal("Patient_Full_Name");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientAppointmentDate = reader.GetOrdinal("Patient_Appointment_Date");
			int ordPatientOrderNumber = reader.GetOrdinal("Patient_Order_Number");
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");
			int ordPatientModifiedDate = reader.GetOrdinal("Patient_Modified_Date");
			int ordPatientModifiedUser = reader.GetOrdinal("Patient_Modified_User");

			do
			{
				result.Add(new GetClientArtifactSearchPatientsRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					PatientID = GetNonNullField<String>(reader, ordPatientID),
					PatientNameFirst = GetField<String>(reader, ordPatientNameFirst),
					PatientNameMiddle = GetField<String>(reader, ordPatientNameMiddle),
					PatientNameLast = GetField<String>(reader, ordPatientNameLast),
					PatientFullName = GetField<String>(reader, ordPatientFullName),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientAppointmentDate = GetFieldValue<DateTime>(reader, ordPatientAppointmentDate),
					PatientOrderNumber = GetField<String>(reader, ordPatientOrderNumber),
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
					PatientModifiedDate = GetFieldValue<DateTime>(reader, ordPatientModifiedDate),
					PatientModifiedUser = GetField<String>(reader, ordPatientModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientArtifactSearchPatientVisitsRow>> GetClientArtifactSearchPatientVisitsAsync(SqlConnection connection, Int32 clientID, String nameLast, String nameFirst, DateTime birthdate, Int32 age, String gender, String patientID, String accountNumber, String orderNumber, DateTime appointmentDate, DateTime admissionDate, String nameFull, Int32 schedulingResourceUserID, DateTime patientAppointmentDate, DateTime appointmentAdmissionDate, String appointmentOrderNumber, String orderOrderNumber, String orderAccessionNumber, DateTime orderDateObserved, Int32 filterLocationID, Guid patientGUID, Guid patientVisitID, Guid orderID, Int32 patientsAppointmentsTypeID, DateTimeOffset appointmentAppointmentDateStart, DateTimeOffset appointmentAppointmentDateEnd) => GetClientArtifactSearchPatientVisitsAsync(connection, clientID, nameLast, nameFirst, birthdate, age, gender, patientID, accountNumber, orderNumber, appointmentDate, admissionDate, nameFull, schedulingResourceUserID, patientAppointmentDate, appointmentAdmissionDate, appointmentOrderNumber, orderOrderNumber, orderAccessionNumber, orderDateObserved, filterLocationID, patientGUID, patientVisitID, orderID, patientsAppointmentsTypeID, appointmentAppointmentDateStart, appointmentAppointmentDateEnd, CancellationToken.None);
	public static async Task<List<GetClientArtifactSearchPatientVisitsRow>> GetClientArtifactSearchPatientVisitsAsync(SqlConnection connection, Int32 clientID, String nameLast, String nameFirst, DateTime birthdate, Int32 age, String gender, String patientID, String accountNumber, String orderNumber, DateTime appointmentDate, DateTime admissionDate, String nameFull, Int32 schedulingResourceUserID, DateTime patientAppointmentDate, DateTime appointmentAdmissionDate, String appointmentOrderNumber, String orderOrderNumber, String orderAccessionNumber, DateTime orderDateObserved, Int32 filterLocationID, Guid patientGUID, Guid patientVisitID, Guid orderID, Int32 patientsAppointmentsTypeID, DateTimeOffset appointmentAppointmentDateStart, DateTimeOffset appointmentAppointmentDateEnd, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Artifact_Search_PatientVisits");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Name_Last", nameLast, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Name_First", nameFirst, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Birthdate", birthdate, SqlDbType.Date, 3));
		cmd.Parameters.Add(CreateParameter("@Age", age, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Gender", gender, SqlDbType.Char, 1));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Account_Number", accountNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Order_Number", orderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Appointment_Date", appointmentDate, SqlDbType.Date, 3));
		cmd.Parameters.Add(CreateParameter("@Admission_Date", admissionDate, SqlDbType.Date, 3));
		cmd.Parameters.Add(CreateParameter("@Name_Full", nameFull, SqlDbType.VarChar, 40));
		cmd.Parameters.Add(CreateParameter("@Scheduling_Resource_User_ID", schedulingResourceUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patient_Appointment_Date", patientAppointmentDate, SqlDbType.Date, 3));
		cmd.Parameters.Add(CreateParameter("@Appointment_Admission_Date", appointmentAdmissionDate, SqlDbType.Date, 3));
		cmd.Parameters.Add(CreateParameter("@Appointment_Order_Number", appointmentOrderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Order_Order_Number", orderOrderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Order_Accession_Number", orderAccessionNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Order_Date_Observed", orderDateObserved, SqlDbType.Date, 3));
		cmd.Parameters.Add(CreateParameter("@Filter_Location_ID", filterLocationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patient_GUID", patientGUID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Patient_Visit_ID", patientVisitID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Order_ID", orderID, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Patients_Appointments_Type_ID", patientsAppointmentsTypeID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Appointment_Appointment_Date_Start", appointmentAppointmentDateStart, SqlDbType.DateTimeOffset, 10));
		cmd.Parameters.Add(CreateParameter("@Appointment_Appointment_Date_End", appointmentAppointmentDateEnd, SqlDbType.DateTimeOffset, 10));

		var result = new List<GetClientArtifactSearchPatientVisitsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientNameFirst = reader.GetOrdinal("Patient_Name_First");
			int ordPatientNameMiddle = reader.GetOrdinal("Patient_Name_Middle");
			int ordPatientNameLast = reader.GetOrdinal("Patient_Name_Last");
			int ordPatientFullName = reader.GetOrdinal("Patient_Full_Name");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientAppointmentDate = reader.GetOrdinal("Patient_Appointment_Date");
			int ordPatientOrderNumber = reader.GetOrdinal("Patient_Order_Number");
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");
			int ordPatientModifiedDate = reader.GetOrdinal("Patient_Modified_Date");
			int ordPatientModifiedUser = reader.GetOrdinal("Patient_Modified_User");
			int ordAppointmentAppointmentDate = reader.GetOrdinal("Appointment_Appointment_Date");
			int ordAppointmentOrderNumber = reader.GetOrdinal("Appointment_Order_Number");
			int ordAppointmentAppointmentID = reader.GetOrdinal("Appointment_Appointment_ID");
			int ordAppointmentUserField1 = reader.GetOrdinal("Appointment_User_Field_1");
			int ordAppointmentUserField2 = reader.GetOrdinal("Appointment_User_Field_2");
			int ordAppointmentUserField3 = reader.GetOrdinal("Appointment_User_Field_3");
			int ordAppointmentUserField4 = reader.GetOrdinal("Appointment_User_Field_4");
			int ordAppointmentUserField5 = reader.GetOrdinal("Appointment_User_Field_5");
			int ordAppointmentDescription = reader.GetOrdinal("Appointment_Description");
			int ordAppointmentAccountNumber = reader.GetOrdinal("Appointment_Account_Number");
			int ordAppointmentAdmitDate = reader.GetOrdinal("Appointment_Admit_Date");
			int ordAppointmentDischargeDate = reader.GetOrdinal("Appointment_Discharge_Date");
			int ordAppointmentBed = reader.GetOrdinal("Appointment_Bed");
			int ordAppointmentFloor = reader.GetOrdinal("Appointment_Floor");
			int ordAppointmentPatientClass = reader.GetOrdinal("Appointment_Patient_Class");
			int ordAppointmentPatientType = reader.GetOrdinal("Appointment_Patient_Type");
			int ordPatientsAppointmentsTypeID = reader.GetOrdinal("Patients_Appointments_Type_ID");
			int ordAppointmentRoom = reader.GetOrdinal("Appointment_Room");
			int ordAppointmentFacility = reader.GetOrdinal("Appointment_Facility");
			int ordAppointmentAppointmentClientCode = reader.GetOrdinal("Appointment_Appointment_Client_Code");
			int ordAppointmentPatientsAppointmentsStatusID = reader.GetOrdinal("Appointment_Patients_Appointments_Status_ID");
			int ordAppointmentPatientLocation = reader.GetOrdinal("Appointment_Patient_Location");
			int ordAppointmentAttendingPhysicianName = reader.GetOrdinal("Appointment_Attending_Physician_Name");
			int ordAppointmentAdmittingPhysicianName = reader.GetOrdinal("Appointment_Admitting_Physician_Name");
			int ordAppointmentReferringPhysicianName = reader.GetOrdinal("Appointment_Referring_Physician_Name");
			int ordAppointmentConsultingPhysicianName = reader.GetOrdinal("Appointment_Consulting_Physician_Name");
			int ordAppointmentPrimaryCarePhysicianName = reader.GetOrdinal("Appointment_Primary_Care_Physician_Name");
			int ordAppointmentAttendingPhysicianNamePrefix = reader.GetOrdinal("Appointment_Attending_Physician_Name_Prefix");
			int ordAppointmentAttendingPhysicianNameFirst = reader.GetOrdinal("Appointment_Attending_Physician_Name_First");
			int ordAppointmentAttendingPhysicianNameMiddle = reader.GetOrdinal("Appointment_Attending_Physician_Name_Middle");
			int ordAppointmentAttendingPhysicianNameLast = reader.GetOrdinal("Appointment_Attending_Physician_Name_Last");
			int ordAppointmentAttendingPhysicianNameSuffix = reader.GetOrdinal("Appointment_Attending_Physician_Name_Suffix");
			int ordAppointmentAdmittingPhysicianNamePrefix = reader.GetOrdinal("Appointment_Admitting_Physician_Name_Prefix");
			int ordAppointmentAdmittingPhysicianNameFirst = reader.GetOrdinal("Appointment_Admitting_Physician_Name_First");
			int ordAppointmentAdmittingPhysicianNameMiddle = reader.GetOrdinal("Appointment_Admitting_Physician_Name_Middle");
			int ordAppointmentAdmittingPhysicianNameLast = reader.GetOrdinal("Appointment_Admitting_Physician_Name_Last");
			int ordAppointmentAdmittingPhysicianNameSuffix = reader.GetOrdinal("Appointment_Admitting_Physician_Name_Suffix");
			int ordAppointmentReferringPhysicianNamePrefix = reader.GetOrdinal("Appointment_Referring_Physician_Name_Prefix");
			int ordAppointmentReferringPhysicianNameFirst = reader.GetOrdinal("Appointment_Referring_Physician_Name_First");
			int ordAppointmentReferringPhysicianNameMiddle = reader.GetOrdinal("Appointment_Referring_Physician_Name_Middle");
			int ordAppointmentReferringPhysicianNameLast = reader.GetOrdinal("Appointment_Referring_Physician_Name_Last");
			int ordAppointmentReferringPhysicianNameSuffix = reader.GetOrdinal("Appointment_Referring_Physician_Name_Suffix");
			int ordAppointmentConsultingPhysicianNamePrefix = reader.GetOrdinal("Appointment_Consulting_Physician_Name_Prefix");
			int ordAppointmentConsultingPhysicianNameFirst = reader.GetOrdinal("Appointment_Consulting_Physician_Name_First");
			int ordAppointmentConsultingPhysicianNameMiddle = reader.GetOrdinal("Appointment_Consulting_Physician_Name_Middle");
			int ordAppointmentConsultingPhysicianNameLast = reader.GetOrdinal("Appointment_Consulting_Physician_Name_Last");
			int ordAppointmentConsultingPhysicianNameSuffix = reader.GetOrdinal("Appointment_Consulting_Physician_Name_Suffix");
			int ordAppointmentPrimaryCarePhysicianNamePrefix = reader.GetOrdinal("Appointment_Primary_Care_Physician_Name_Prefix");
			int ordAppointmentPrimaryCarePhysicianNameFirst = reader.GetOrdinal("Appointment_Primary_Care_Physician_Name_First");
			int ordAppointmentPrimaryCarePhysicianNameMiddle = reader.GetOrdinal("Appointment_Primary_Care_Physician_Name_Middle");
			int ordAppointmentPrimaryCarePhysicianNameLast = reader.GetOrdinal("Appointment_Primary_Care_Physician_Name_Last");
			int ordAppointmentPrimaryCarePhysicianNameSuffix = reader.GetOrdinal("Appointment_Primary_Care_Physician_Name_Suffix");
			int ordAppointmentLocationID = reader.GetOrdinal("Appointment_Location_ID");
			int ordAppointmentLocationName = reader.GetOrdinal("Appointment_Location_Name");
			int ordAppointmentTypeID = reader.GetOrdinal("Appointment_Type_ID");
			int ordAppointmentModifiedDate = reader.GetOrdinal("Appointment_Modified_Date");
			int ordAppointmentModifiedUser = reader.GetOrdinal("Appointment_Modified_User");
			int ordAppointmentDictationCount = reader.GetOrdinal("Appointment_Dictation_Count");
			int ordAppointmentTranscriptionCount = reader.GetOrdinal("Appointment_Transcription_Count");
			int ordAppointmentSchedulingResourceID = reader.GetOrdinal("Appointment_Scheduling_Resource_ID");

			do
			{
				result.Add(new GetClientArtifactSearchPatientVisitsRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					PatientID = GetNonNullField<String>(reader, ordPatientID),
					PatientNameFirst = GetField<String>(reader, ordPatientNameFirst),
					PatientNameMiddle = GetField<String>(reader, ordPatientNameMiddle),
					PatientNameLast = GetField<String>(reader, ordPatientNameLast),
					PatientFullName = GetField<String>(reader, ordPatientFullName),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientAppointmentDate = GetFieldValue<DateTime>(reader, ordPatientAppointmentDate),
					PatientOrderNumber = GetField<String>(reader, ordPatientOrderNumber),
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
					PatientModifiedDate = GetFieldValue<DateTime>(reader, ordPatientModifiedDate),
					PatientModifiedUser = GetField<String>(reader, ordPatientModifiedUser),
					AppointmentAppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentAppointmentDate),
					AppointmentOrderNumber = GetField<String>(reader, ordAppointmentOrderNumber),
					AppointmentAppointmentID = GetNonNullFieldValue<Guid>(reader, ordAppointmentAppointmentID),
					AppointmentUserField1 = GetField<String>(reader, ordAppointmentUserField1),
					AppointmentUserField2 = GetField<String>(reader, ordAppointmentUserField2),
					AppointmentUserField3 = GetField<String>(reader, ordAppointmentUserField3),
					AppointmentUserField4 = GetField<String>(reader, ordAppointmentUserField4),
					AppointmentUserField5 = GetField<String>(reader, ordAppointmentUserField5),
					AppointmentDescription = GetNonNullField<String>(reader, ordAppointmentDescription),
					AppointmentAccountNumber = GetField<String>(reader, ordAppointmentAccountNumber),
					AppointmentAdmitDate = GetFieldValue<DateTime>(reader, ordAppointmentAdmitDate),
					AppointmentDischargeDate = GetFieldValue<DateTime>(reader, ordAppointmentDischargeDate),
					AppointmentBed = GetField<String>(reader, ordAppointmentBed),
					AppointmentFloor = GetField<String>(reader, ordAppointmentFloor),
					AppointmentPatientClass = GetField<String>(reader, ordAppointmentPatientClass),
					AppointmentPatientType = GetField<String>(reader, ordAppointmentPatientType),
					PatientsAppointmentsTypeID = GetFieldValue<Int32>(reader, ordPatientsAppointmentsTypeID),
					AppointmentRoom = GetField<String>(reader, ordAppointmentRoom),
					AppointmentFacility = GetField<String>(reader, ordAppointmentFacility),
					AppointmentAppointmentClientCode = GetField<String>(reader, ordAppointmentAppointmentClientCode),
					AppointmentPatientsAppointmentsStatusID = GetField<String>(reader, ordAppointmentPatientsAppointmentsStatusID),
					AppointmentPatientLocation = GetField<String>(reader, ordAppointmentPatientLocation),
					AppointmentAttendingPhysicianName = GetField<String>(reader, ordAppointmentAttendingPhysicianName),
					AppointmentAdmittingPhysicianName = GetField<String>(reader, ordAppointmentAdmittingPhysicianName),
					AppointmentReferringPhysicianName = GetField<String>(reader, ordAppointmentReferringPhysicianName),
					AppointmentConsultingPhysicianName = GetField<String>(reader, ordAppointmentConsultingPhysicianName),
					AppointmentPrimaryCarePhysicianName = GetField<String>(reader, ordAppointmentPrimaryCarePhysicianName),
					AppointmentAttendingPhysicianNamePrefix = GetField<String>(reader, ordAppointmentAttendingPhysicianNamePrefix),
					AppointmentAttendingPhysicianNameFirst = GetField<String>(reader, ordAppointmentAttendingPhysicianNameFirst),
					AppointmentAttendingPhysicianNameMiddle = GetField<String>(reader, ordAppointmentAttendingPhysicianNameMiddle),
					AppointmentAttendingPhysicianNameLast = GetField<String>(reader, ordAppointmentAttendingPhysicianNameLast),
					AppointmentAttendingPhysicianNameSuffix = GetField<String>(reader, ordAppointmentAttendingPhysicianNameSuffix),
					AppointmentAdmittingPhysicianNamePrefix = GetField<String>(reader, ordAppointmentAdmittingPhysicianNamePrefix),
					AppointmentAdmittingPhysicianNameFirst = GetField<String>(reader, ordAppointmentAdmittingPhysicianNameFirst),
					AppointmentAdmittingPhysicianNameMiddle = GetField<String>(reader, ordAppointmentAdmittingPhysicianNameMiddle),
					AppointmentAdmittingPhysicianNameLast = GetField<String>(reader, ordAppointmentAdmittingPhysicianNameLast),
					AppointmentAdmittingPhysicianNameSuffix = GetField<String>(reader, ordAppointmentAdmittingPhysicianNameSuffix),
					AppointmentReferringPhysicianNamePrefix = GetField<String>(reader, ordAppointmentReferringPhysicianNamePrefix),
					AppointmentReferringPhysicianNameFirst = GetField<String>(reader, ordAppointmentReferringPhysicianNameFirst),
					AppointmentReferringPhysicianNameMiddle = GetField<String>(reader, ordAppointmentReferringPhysicianNameMiddle),
					AppointmentReferringPhysicianNameLast = GetField<String>(reader, ordAppointmentReferringPhysicianNameLast),
					AppointmentReferringPhysicianNameSuffix = GetField<String>(reader, ordAppointmentReferringPhysicianNameSuffix),
					AppointmentConsultingPhysicianNamePrefix = GetField<String>(reader, ordAppointmentConsultingPhysicianNamePrefix),
					AppointmentConsultingPhysicianNameFirst = GetField<String>(reader, ordAppointmentConsultingPhysicianNameFirst),
					AppointmentConsultingPhysicianNameMiddle = GetField<String>(reader, ordAppointmentConsultingPhysicianNameMiddle),
					AppointmentConsultingPhysicianNameLast = GetField<String>(reader, ordAppointmentConsultingPhysicianNameLast),
					AppointmentConsultingPhysicianNameSuffix = GetField<String>(reader, ordAppointmentConsultingPhysicianNameSuffix),
					AppointmentPrimaryCarePhysicianNamePrefix = GetField<String>(reader, ordAppointmentPrimaryCarePhysicianNamePrefix),
					AppointmentPrimaryCarePhysicianNameFirst = GetField<String>(reader, ordAppointmentPrimaryCarePhysicianNameFirst),
					AppointmentPrimaryCarePhysicianNameMiddle = GetField<String>(reader, ordAppointmentPrimaryCarePhysicianNameMiddle),
					AppointmentPrimaryCarePhysicianNameLast = GetField<String>(reader, ordAppointmentPrimaryCarePhysicianNameLast),
					AppointmentPrimaryCarePhysicianNameSuffix = GetField<String>(reader, ordAppointmentPrimaryCarePhysicianNameSuffix),
					AppointmentLocationID = GetFieldValue<Int32>(reader, ordAppointmentLocationID),
					AppointmentLocationName = GetField<String>(reader, ordAppointmentLocationName),
					AppointmentTypeID = GetFieldValue<Int32>(reader, ordAppointmentTypeID),
					AppointmentModifiedDate = GetFieldValue<DateTime>(reader, ordAppointmentModifiedDate),
					AppointmentModifiedUser = GetField<String>(reader, ordAppointmentModifiedUser),
					AppointmentDictationCount = GetFieldValue<Int32>(reader, ordAppointmentDictationCount),
					AppointmentTranscriptionCount = GetFieldValue<Int32>(reader, ordAppointmentTranscriptionCount),
					AppointmentSchedulingResourceID = GetFieldValue<Int32>(reader, ordAppointmentSchedulingResourceID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientAssociateTypesRow>> GetClientAssociateTypesAsync(SqlConnection connection, Int32 clientID) => GetClientAssociateTypesAsync(connection, clientID, CancellationToken.None);
	public static async Task<List<GetClientAssociateTypesRow>> GetClientAssociateTypesAsync(SqlConnection connection, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_AssociateTypes");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetClientAssociateTypesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordAssociateTypeID = reader.GetOrdinal("Associate_Type_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordClientCode = reader.GetOrdinal("Client_Code");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetClientAssociateTypesRow
				{
					AssociateTypeID = GetNonNullFieldValue<Int32>(reader, ordAssociateTypeID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					Name = GetField<String>(reader, ordName),
					ClientCode = GetField<String>(reader, ordClientCode),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientAuthorGroupRow>> GetClientAuthorGroupAsync(SqlConnection connection, Int32 clientID, Int32 authorGroupID) => GetClientAuthorGroupAsync(connection, clientID, authorGroupID, CancellationToken.None);
	public static async Task<List<GetClientAuthorGroupRow>> GetClientAuthorGroupAsync(SqlConnection connection, Int32 clientID, Int32 authorGroupID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_AuthorGroup");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Author_Group_ID", authorGroupID, SqlDbType.Int, 4));

		var result = new List<GetClientAuthorGroupRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordAuthorGroupID = reader.GetOrdinal("Author_Group_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordDescription = reader.GetOrdinal("Description");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");

			do
			{
				result.Add(new GetClientAuthorGroupRow
				{
					AuthorGroupID = GetNonNullFieldValue<Int32>(reader, ordAuthorGroupID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					Name = GetNonNullField<String>(reader, ordName),
					Description = GetField<String>(reader, ordDescription),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientAuthorGroupEncountersRow>> GetClientAuthorGroupEncountersAsync(SqlConnection connection, Int32 clientID, Int32 authorGroupID) => GetClientAuthorGroupEncountersAsync(connection, clientID, authorGroupID, CancellationToken.None);
	public static async Task<List<GetClientAuthorGroupEncountersRow>> GetClientAuthorGroupEncountersAsync(SqlConnection connection, Int32 clientID, Int32 authorGroupID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_AuthorGroup_Encounters");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Author_Group_ID", authorGroupID, SqlDbType.Int, 4));

		var result = new List<GetClientAuthorGroupEncountersRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordPhysician = reader.GetOrdinal("Physician");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordApptUserField1 = reader.GetOrdinal("Appt_User_Field_1");
			int ordApptUserField2 = reader.GetOrdinal("Appt_User_Field_2");
			int ordApptUserField3 = reader.GetOrdinal("Appt_User_Field_3");
			int ordApptUserField4 = reader.GetOrdinal("Appt_User_Field_4");
			int ordApptUserField5 = reader.GetOrdinal("Appt_User_Field_5");
			int ordAppointmentClientCode = reader.GetOrdinal("Appointment_Client_Code");
			int ordPatientsAppointmentsTypeID = reader.GetOrdinal("Patients_Appointments_Type_ID");
			int ordAdmitDate = reader.GetOrdinal("Admit_Date");
			int ordDischargeDate = reader.GetOrdinal("Discharge_Date");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordAppointmentID = reader.GetOrdinal("Appointment_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordPatientFullName = reader.GetOrdinal("Patient_Full_Name");
			int ordPatientNameFirst = reader.GetOrdinal("Patient_Name_First");
			int ordPatientNameLast = reader.GetOrdinal("Patient_Name_Last");
			int ordPatientNameMiddle = reader.GetOrdinal("Patient_Name_Middle");
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");

			do
			{
				result.Add(new GetClientAuthorGroupEncountersRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					PatientID = GetNonNullField<String>(reader, ordPatientID),
					LocationID = GetNonNullFieldValue<Int32>(reader, ordLocationID),
					Physician = GetNonNullField<String>(reader, ordPhysician),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					DictationID = GetField<String>(reader, ordDictationID),
					ApptUserField1 = GetField<String>(reader, ordApptUserField1),
					ApptUserField2 = GetField<String>(reader, ordApptUserField2),
					ApptUserField3 = GetField<String>(reader, ordApptUserField3),
					ApptUserField4 = GetField<String>(reader, ordApptUserField4),
					ApptUserField5 = GetField<String>(reader, ordApptUserField5),
					AppointmentClientCode = GetField<String>(reader, ordAppointmentClientCode),
					PatientsAppointmentsTypeID = GetFieldValue<Int32>(reader, ordPatientsAppointmentsTypeID),
					AdmitDate = GetFieldValue<DateTime>(reader, ordAdmitDate),
					DischargeDate = GetFieldValue<DateTime>(reader, ordDischargeDate),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					AppointmentID = GetNonNullFieldValue<Guid>(reader, ordAppointmentID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					PatientFullName = GetField<String>(reader, ordPatientFullName),
					PatientNameFirst = GetField<String>(reader, ordPatientNameFirst),
					PatientNameLast = GetField<String>(reader, ordPatientNameLast),
					PatientNameMiddle = GetField<String>(reader, ordPatientNameMiddle),
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientAuthorGroupInpatientVisitsRow>> GetClientAuthorGroupInpatientVisitsAsync(SqlConnection connection, Int32 clientID, Int32 authorGroupID) => GetClientAuthorGroupInpatientVisitsAsync(connection, clientID, authorGroupID, CancellationToken.None);
	public static async Task<List<GetClientAuthorGroupInpatientVisitsRow>> GetClientAuthorGroupInpatientVisitsAsync(SqlConnection connection, Int32 clientID, Int32 authorGroupID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_AuthorGroup_InpatientVisits");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Author_Group_ID", authorGroupID, SqlDbType.Int, 4));

		var result = new List<GetClientAuthorGroupInpatientVisitsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDescription = reader.GetOrdinal("Description");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordAppointmentID = reader.GetOrdinal("Appointment_ID");
			int ordApptUserField1 = reader.GetOrdinal("Appt_User_Field_1");
			int ordApptUserField2 = reader.GetOrdinal("Appt_User_Field_2");
			int ordApptUserField3 = reader.GetOrdinal("Appt_User_Field_3");
			int ordApptUserField4 = reader.GetOrdinal("Appt_User_Field_4");
			int ordApptUserField5 = reader.GetOrdinal("Appt_User_Field_5");
			int ordAdmitDate = reader.GetOrdinal("Admit_Date");
			int ordDischargeDate = reader.GetOrdinal("Discharge_Date");
			int ordAccountNumber = reader.GetOrdinal("Account_Number");
			int ordLocation = reader.GetOrdinal("Location");
			int ordRoom = reader.GetOrdinal("Room");
			int ordBed = reader.GetOrdinal("Bed");
			int ordFloor = reader.GetOrdinal("Floor");
			int ordFacility = reader.GetOrdinal("Facility");
			int ordPatientsAppointmentsStatusID = reader.GetOrdinal("Patients_Appointments_Status_ID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordPatientsAppointmentsTypeID = reader.GetOrdinal("Patients_Appointments_Type_ID");
			int ordPatientLocation = reader.GetOrdinal("Patient_Location");
			int ordPatientClass = reader.GetOrdinal("Patient_Class");
			int ordPatientType = reader.GetOrdinal("Patient_Type");
			int ordAppointmentClientCode = reader.GetOrdinal("Appointment_Client_Code");
			int ordAttendingPhysicianName = reader.GetOrdinal("Attending_Physician_Name");
			int ordAdmittingPhysicianName = reader.GetOrdinal("Admitting_Physician_Name");
			int ordReferringPhysicianName = reader.GetOrdinal("Referring_Physician_Name");
			int ordConsultingPhysicianName = reader.GetOrdinal("Consulting_Physician_Name");
			int ordPrimaryCarePhysicianName = reader.GetOrdinal("Primary_Care_Physician_Name");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordAppointmentDictationCount = reader.GetOrdinal("Appointment_Dictation_Count");
			int ordAppointmentTranscriptionCount = reader.GetOrdinal("Appointment_Transcription_Count");
			int ordAppointmentSchedulingResourceID = reader.GetOrdinal("Appointment_Scheduling_Resource_ID");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientFullName = reader.GetOrdinal("Patient_Full_Name");
			int ordPatientNameFirst = reader.GetOrdinal("Patient_Name_First");
			int ordPatientNameLast = reader.GetOrdinal("Patient_Name_Last");
			int ordPatientNameMiddle = reader.GetOrdinal("Patient_Name_Middle");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");

			do
			{
				result.Add(new GetClientAuthorGroupInpatientVisitsRow
				{
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					Description = GetNonNullField<String>(reader, ordDescription),
					LocationID = GetNonNullFieldValue<Int32>(reader, ordLocationID),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					AppointmentID = GetNonNullFieldValue<Guid>(reader, ordAppointmentID),
					ApptUserField1 = GetField<String>(reader, ordApptUserField1),
					ApptUserField2 = GetField<String>(reader, ordApptUserField2),
					ApptUserField3 = GetField<String>(reader, ordApptUserField3),
					ApptUserField4 = GetField<String>(reader, ordApptUserField4),
					ApptUserField5 = GetField<String>(reader, ordApptUserField5),
					AdmitDate = GetFieldValue<DateTime>(reader, ordAdmitDate),
					DischargeDate = GetFieldValue<DateTime>(reader, ordDischargeDate),
					AccountNumber = GetField<String>(reader, ordAccountNumber),
					Location = GetField<String>(reader, ordLocation),
					Room = GetField<String>(reader, ordRoom),
					Bed = GetField<String>(reader, ordBed),
					Floor = GetField<String>(reader, ordFloor),
					Facility = GetField<String>(reader, ordFacility),
					PatientsAppointmentsStatusID = GetField<String>(reader, ordPatientsAppointmentsStatusID),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					PatientsAppointmentsTypeID = GetFieldValue<Int32>(reader, ordPatientsAppointmentsTypeID),
					PatientLocation = GetField<String>(reader, ordPatientLocation),
					PatientClass = GetField<String>(reader, ordPatientClass),
					PatientType = GetField<String>(reader, ordPatientType),
					AppointmentClientCode = GetField<String>(reader, ordAppointmentClientCode),
					AttendingPhysicianName = GetField<String>(reader, ordAttendingPhysicianName),
					AdmittingPhysicianName = GetField<String>(reader, ordAdmittingPhysicianName),
					ReferringPhysicianName = GetField<String>(reader, ordReferringPhysicianName),
					ConsultingPhysicianName = GetField<String>(reader, ordConsultingPhysicianName),
					PrimaryCarePhysicianName = GetField<String>(reader, ordPrimaryCarePhysicianName),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					AppointmentDictationCount = GetFieldValue<Int32>(reader, ordAppointmentDictationCount),
					AppointmentTranscriptionCount = GetFieldValue<Int32>(reader, ordAppointmentTranscriptionCount),
					AppointmentSchedulingResourceID = GetFieldValue<Int32>(reader, ordAppointmentSchedulingResourceID),
					PatientID = GetNonNullField<String>(reader, ordPatientID),
					PatientFullName = GetField<String>(reader, ordPatientFullName),
					PatientNameFirst = GetField<String>(reader, ordPatientNameFirst),
					PatientNameLast = GetField<String>(reader, ordPatientNameLast),
					PatientNameMiddle = GetField<String>(reader, ordPatientNameMiddle),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					PatientGender = GetField<String>(reader, ordPatientGender),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientAuthorGroupUsersRow>> GetClientAuthorGroupUsersAsync(SqlConnection connection, Int32 clientID, Int32 authorGroupID) => GetClientAuthorGroupUsersAsync(connection, clientID, authorGroupID, CancellationToken.None);
	public static async Task<List<GetClientAuthorGroupUsersRow>> GetClientAuthorGroupUsersAsync(SqlConnection connection, Int32 clientID, Int32 authorGroupID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_AuthorGroup_Users");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Author_Group_ID", authorGroupID, SqlDbType.Int, 4));

		var result = new List<GetClientAuthorGroupUsersRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordAuthorGroupID = reader.GetOrdinal("Author_Group_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");

			do
			{
				result.Add(new GetClientAuthorGroupUsersRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					AuthorGroupID = GetNonNullFieldValue<Int32>(reader, ordAuthorGroupID),
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientAuthorGroupsRow>> GetClientAuthorGroupsAsync(SqlConnection connection, Int32 clientID) => GetClientAuthorGroupsAsync(connection, clientID, CancellationToken.None);
	public static async Task<List<GetClientAuthorGroupsRow>> GetClientAuthorGroupsAsync(SqlConnection connection, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_AuthorGroups");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetClientAuthorGroupsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordAuthorGroupID = reader.GetOrdinal("Author_Group_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordDescription = reader.GetOrdinal("Description");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");

			do
			{
				result.Add(new GetClientAuthorGroupsRow
				{
					AuthorGroupID = GetNonNullFieldValue<Int32>(reader, ordAuthorGroupID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					Name = GetNonNullField<String>(reader, ordName),
					Description = GetField<String>(reader, ordDescription),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientAuthorizationByCompanyInTouchServerIDRow>> GetClientAuthorizationByCompanyInTouchServerIDAsync(SqlConnection connection, Int32 companyID, Int32 serverID, Int32 clientID) => GetClientAuthorizationByCompanyInTouchServerIDAsync(connection, companyID, serverID, clientID, CancellationToken.None);
	public static async Task<List<GetClientAuthorizationByCompanyInTouchServerIDRow>> GetClientAuthorizationByCompanyInTouchServerIDAsync(SqlConnection connection, Int32 companyID, Int32 serverID, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Authorization_ByCompanyInTouchServerID");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Server_ID", serverID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetClientAuthorizationByCompanyInTouchServerIDRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordIsAuthorized = reader.GetOrdinal("Is_Authorized");

			do
			{
				result.Add(new GetClientAuthorizationByCompanyInTouchServerIDRow
				{
					IsAuthorized = GetFieldValue<Boolean>(reader, ordIsAuthorized),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientAuthorizationByCompanyUserIDRow>> GetClientAuthorizationByCompanyUserIDAsync(SqlConnection connection, Int32 companyID, Int32 userID, String machineCode, Int32 clientID) => GetClientAuthorizationByCompanyUserIDAsync(connection, companyID, userID, machineCode, clientID, CancellationToken.None);
	public static async Task<List<GetClientAuthorizationByCompanyUserIDRow>> GetClientAuthorizationByCompanyUserIDAsync(SqlConnection connection, Int32 companyID, Int32 userID, String machineCode, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Authorization_ByCompanyUserID");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Machine_Code", machineCode, SqlDbType.Char, 25));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetClientAuthorizationByCompanyUserIDRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordIsAuthorized = reader.GetOrdinal("Is_Authorized");

			do
			{
				result.Add(new GetClientAuthorizationByCompanyUserIDRow
				{
					IsAuthorized = GetNonNullFieldValue<Boolean>(reader, ordIsAuthorized),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientDefaultPasswordHashAlgorithmRow>> GetClientDefaultPasswordHashAlgorithmAsync(SqlConnection connection, Int32 clientID) => GetClientDefaultPasswordHashAlgorithmAsync(connection, clientID, CancellationToken.None);
	public static async Task<List<GetClientDefaultPasswordHashAlgorithmRow>> GetClientDefaultPasswordHashAlgorithmAsync(SqlConnection connection, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Default_Password_Hash_Algorithm");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetClientDefaultPasswordHashAlgorithmRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordPasswordHashAlgorithmID = reader.GetOrdinal("Password_Hash_Algorithm_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordDescription = reader.GetOrdinal("Description");
			int ordCaseSensitive = reader.GetOrdinal("Case_Sensitive");
			int ordPRF = reader.GetOrdinal("PRF");
			int ordSaltLength = reader.GetOrdinal("Salt_Length");
			int ordHashLength = reader.GetOrdinal("Hash_Length");
			int ordIterations = reader.GetOrdinal("Iterations");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetClientDefaultPasswordHashAlgorithmRow
				{
					PasswordHashAlgorithmID = GetNonNullFieldValue<Int32>(reader, ordPasswordHashAlgorithmID),
					Name = GetNonNullField<String>(reader, ordName),
					Description = GetField<String>(reader, ordDescription),
					CaseSensitive = GetNonNullFieldValue<Boolean>(reader, ordCaseSensitive),
					PRF = GetField<String>(reader, ordPRF),
					SaltLength = GetFieldValue<Int32>(reader, ordSaltLength),
					HashLength = GetFieldValue<Int32>(reader, ordHashLength),
					Iterations = GetFieldValue<Int32>(reader, ordIterations),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientDictationFilePathRow>> GetClientDictationFilePathAsync(SqlConnection connection, Int32 clientID, Int32 dictationID, Int32 userId, String userType) => GetClientDictationFilePathAsync(connection, clientID, dictationID, userId, userType, CancellationToken.None);
	public static async Task<List<GetClientDictationFilePathRow>> GetClientDictationFilePathAsync(SqlConnection connection, Int32 clientID, Int32 dictationID, Int32 userId, String userType, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Dictation_FilePath");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictation_ID", dictationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_Id", userId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_Type", userType, SqlDbType.Char, 1));

		var result = new List<GetClientDictationFilePathRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordDictationPath = reader.GetOrdinal("DictationPath");

			do
			{
				result.Add(new GetClientDictationFilePathRow
				{
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					TranscriptionID = GetFieldValue<Int32>(reader, ordTranscriptionID),
					DictationID = GetFieldValue<Int32>(reader, ordDictationID),
					DictationPath = GetField<String>(reader, ordDictationPath),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientDictationPathsRow>> GetClientDictationPathsAsync(SqlConnection connection, Int32 clientID, Int32 dictationID) => GetClientDictationPathsAsync(connection, clientID, dictationID, CancellationToken.None);
	public static async Task<List<GetClientDictationPathsRow>> GetClientDictationPathsAsync(SqlConnection connection, Int32 clientID, Int32 dictationID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Dictation_Paths");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictation_ID", dictationID, SqlDbType.Int, 4));

		var result = new List<GetClientDictationPathsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordDictationFileTypeID = reader.GetOrdinal("Dictation_File_Type_ID");
			int ordPath = reader.GetOrdinal("Path");
			int ordIsOriginal = reader.GetOrdinal("Is_Original");
			int ordIsEncrypted = reader.GetOrdinal("Is_Encrypted");

			do
			{
				result.Add(new GetClientDictationPathsRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					DictationID = GetNonNullFieldValue<Int32>(reader, ordDictationID),
					DictationFileTypeID = GetNonNullFieldValue<Int32>(reader, ordDictationFileTypeID),
					Path = GetNonNullField<String>(reader, ordPath),
					IsOriginal = GetNonNullFieldValue<Int32>(reader, ordIsOriginal),
					IsEncrypted = GetNonNullFieldValue<Boolean>(reader, ordIsEncrypted),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientDictationRecordsRow>> GetClientDictationRecordsAsync(SqlConnection connection, Int32 clientID, Int32 dictationID) => GetClientDictationRecordsAsync(connection, clientID, dictationID, CancellationToken.None);
	public static async Task<List<GetClientDictationRecordsRow>> GetClientDictationRecordsAsync(SqlConnection connection, Int32 clientID, Int32 dictationID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Dictation_Records");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictation_ID", dictationID, SqlDbType.Int, 4));

		var result = new List<GetClientDictationRecordsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordDictationFileTypeID = reader.GetOrdinal("Dictation_File_Type_ID");
			int ordPath = reader.GetOrdinal("Path");
			int ordIsOriginal = reader.GetOrdinal("Is_Original");
			int ordIsEncrypted = reader.GetOrdinal("Is_Encrypted");

			do
			{
				result.Add(new GetClientDictationRecordsRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					DictationID = GetNonNullFieldValue<Int32>(reader, ordDictationID),
					DictationFileTypeID = GetNonNullFieldValue<Int32>(reader, ordDictationFileTypeID),
					Path = GetNonNullField<String>(reader, ordPath),
					IsOriginal = GetNonNullFieldValue<Int32>(reader, ordIsOriginal),
					IsEncrypted = GetNonNullFieldValue<Boolean>(reader, ordIsEncrypted),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientDictationTemplateRow>> GetClientDictationTemplateAsync(SqlConnection connection, Int32 clientID, Int32 templateID, Boolean includeStructuredBody) => GetClientDictationTemplateAsync(connection, clientID, templateID, includeStructuredBody, CancellationToken.None);
	public static async Task<List<GetClientDictationTemplateRow>> GetClientDictationTemplateAsync(SqlConnection connection, Int32 clientID, Int32 templateID, Boolean includeStructuredBody, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Dictation_Template");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Template_ID", templateID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Include_Structured_Body", includeStructuredBody, SqlDbType.Bit, 1));

		var result = new List<GetClientDictationTemplateRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTemplateFilePath = reader.GetOrdinal("Template_FilePath");
			int ordIsVR = reader.GetOrdinal("IsVR");
			int ordStructuredBody = reader.GetOrdinal("Structured_Body");

			do
			{
				result.Add(new GetClientDictationTemplateRow
				{
					TemplateFilePath = GetField<String>(reader, ordTemplateFilePath),
					IsVR = GetNonNullFieldValue<Int32>(reader, ordIsVR),
					StructuredBody = GetField<String>(reader, ordStructuredBody),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientDictationTemplateContentRow>> GetClientDictationTemplateContentAsync(SqlConnection connection, Int32 clientID, Int32 templateID) => GetClientDictationTemplateContentAsync(connection, clientID, templateID, CancellationToken.None);
	public static async Task<List<GetClientDictationTemplateContentRow>> GetClientDictationTemplateContentAsync(SqlConnection connection, Int32 clientID, Int32 templateID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Dictation_Template_Content");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Template_ID", templateID, SqlDbType.Int, 4));

		var result = new List<GetClientDictationTemplateContentRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTemplateContentType = reader.GetOrdinal("Template_Content_Type");
			int ordTemplateContent = reader.GetOrdinal("Template_Content");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");

			do
			{
				result.Add(new GetClientDictationTemplateContentRow
				{
					TemplateContentType = GetNonNullField<String>(reader, ordTemplateContentType),
					TemplateContent = GetNonNullField<Byte[]>(reader, ordTemplateContent),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientDictationTemplateInfoRow>> GetClientDictationTemplateInfoAsync(SqlConnection connection, Int32 clientID, Int32 templateId) => GetClientDictationTemplateInfoAsync(connection, clientID, templateId, CancellationToken.None);
	public static async Task<List<GetClientDictationTemplateInfoRow>> GetClientDictationTemplateInfoAsync(SqlConnection connection, Int32 clientID, Int32 templateId, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_DictationTemplateInfo");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Template_Id", templateId, SqlDbType.Int, 4));

		var result = new List<GetClientDictationTemplateInfoRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTemplateID = reader.GetOrdinal("Template_ID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordDictationCode = reader.GetOrdinal("Dictation_Code");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordMTNotes = reader.GetOrdinal("MT_Notes");
			int ordCanDismiss = reader.GetOrdinal("Can_Dismiss");
			int ordVisibleCharacters = reader.GetOrdinal("Visible_Characters");
			int ordNonVisibleCharacters = reader.GetOrdinal("NonVisible_Characters");
			int ordTemplateVisibleCharacters = reader.GetOrdinal("Template_Visible_Characters");
			int ordTemplateNonVisibleCharacters = reader.GetOrdinal("Template_NonVisible_Characters");

			do
			{
				result.Add(new GetClientDictationTemplateInfoRow
				{
					TemplateID = GetNonNullFieldValue<Int32>(reader, ordTemplateID),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					DictationCode = GetNonNullField<String>(reader, ordDictationCode),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
					DocumentID = GetNonNullFieldValue<Int32>(reader, ordDocumentID),
					LocationID = GetNonNullFieldValue<Int32>(reader, ordLocationID),
					MTNotes = GetField<String>(reader, ordMTNotes),
					CanDismiss = GetNonNullFieldValue<Boolean>(reader, ordCanDismiss),
					VisibleCharacters = GetFieldValue<Int32>(reader, ordVisibleCharacters),
					NonVisibleCharacters = GetFieldValue<Int32>(reader, ordNonVisibleCharacters),
					TemplateVisibleCharacters = GetFieldValue<Int32>(reader, ordTemplateVisibleCharacters),
					TemplateNonVisibleCharacters = GetFieldValue<Int32>(reader, ordTemplateNonVisibleCharacters),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientDocumentTemplateRow>> GetClientDocumentTemplateAsync(SqlConnection connection, Int32 clientID, Int32 documentTemplateID, Boolean includeStructuredBody) => GetClientDocumentTemplateAsync(connection, clientID, documentTemplateID, includeStructuredBody, CancellationToken.None);
	public static async Task<List<GetClientDocumentTemplateRow>> GetClientDocumentTemplateAsync(SqlConnection connection, Int32 clientID, Int32 documentTemplateID, Boolean includeStructuredBody, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Document_Template");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_Template_ID", documentTemplateID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Include_Structured_Body", includeStructuredBody, SqlDbType.Bit, 1));

		var result = new List<GetClientDocumentTemplateRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTemplateFilepath = reader.GetOrdinal("Template_Filepath");
			int ordIsVR = reader.GetOrdinal("IsVR");
			int ordStructuredBody = reader.GetOrdinal("Structured_Body");

			do
			{
				result.Add(new GetClientDocumentTemplateRow
				{
					TemplateFilepath = GetField<String>(reader, ordTemplateFilepath),
					IsVR = GetNonNullFieldValue<Boolean>(reader, ordIsVR),
					StructuredBody = GetField<String>(reader, ordStructuredBody),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientDocumentTemplateContentRow>> GetClientDocumentTemplateContentAsync(SqlConnection connection, Int32 clientID, Int32 documentTemplateID) => GetClientDocumentTemplateContentAsync(connection, clientID, documentTemplateID, CancellationToken.None);
	public static async Task<List<GetClientDocumentTemplateContentRow>> GetClientDocumentTemplateContentAsync(SqlConnection connection, Int32 clientID, Int32 documentTemplateID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Document_Template_Content");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_Template_ID", documentTemplateID, SqlDbType.Int, 4));

		var result = new List<GetClientDocumentTemplateContentRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTemplateContentType = reader.GetOrdinal("Template_Content_Type");
			int ordTemplateContent = reader.GetOrdinal("Template_Content");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");

			do
			{
				result.Add(new GetClientDocumentTemplateContentRow
				{
					TemplateContentType = GetNonNullField<String>(reader, ordTemplateContentType),
					TemplateContent = GetNonNullField<Byte[]>(reader, ordTemplateContent),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientDocumentTypeRow>> GetClientDocumentTypeAsync(SqlConnection connection, Int32 clientID, Int32 documentTypeID) => GetClientDocumentTypeAsync(connection, clientID, documentTypeID, CancellationToken.None);
	public static async Task<List<GetClientDocumentTypeRow>> GetClientDocumentTypeAsync(SqlConnection connection, Int32 clientID, Int32 documentTypeID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Document_Type");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_Type_ID", documentTypeID, SqlDbType.Int, 4));

		var result = new List<GetClientDocumentTypeRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientId = reader.GetOrdinal("Client_Id");
			int ordDocumentId = reader.GetOrdinal("Document_Id");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordDocumentDescription = reader.GetOrdinal("Document_Description");
			int ordDocumentTypeGroupMask = reader.GetOrdinal("DocumentTypeGroup_Mask");
			int ordDocumentActive = reader.GetOrdinal("Document_Active");
			int ordDictationId = reader.GetOrdinal("Dictation_Id");
			int ordClientCode = reader.GetOrdinal("Client_Code");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordRequiredLocationId = reader.GetOrdinal("Required_Location_Id");
			int ordDictationEmulationPromptTypeID = reader.GetOrdinal("Dictation_Emulation_Prompt_Type_ID");
			int ordInTouchID = reader.GetOrdinal("InTouch_ID");

			do
			{
				result.Add(new GetClientDocumentTypeRow
				{
					ClientId = GetNonNullFieldValue<Int32>(reader, ordClientId),
					DocumentId = GetNonNullFieldValue<Int32>(reader, ordDocumentId),
					DocumentType = GetField<String>(reader, ordDocumentType),
					DocumentDescription = GetField<String>(reader, ordDocumentDescription),
					DocumentTypeGroupMask = GetFieldValue<Int32>(reader, ordDocumentTypeGroupMask),
					DocumentActive = GetNonNullFieldValue<Boolean>(reader, ordDocumentActive),
					DictationId = GetField<String>(reader, ordDictationId),
					ClientCode = GetField<String>(reader, ordClientCode),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					RequiredLocationId = GetFieldValue<Int32>(reader, ordRequiredLocationId),
					DictationEmulationPromptTypeID = GetFieldValue<Int32>(reader, ordDictationEmulationPromptTypeID),
					InTouchID = GetField<String>(reader, ordInTouchID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientDocumentTemplateASRStylesheetRow>> GetClientDocumentTemplateASRStylesheetAsync(SqlConnection connection, Int32 clientID, Int32 documentTemplateID) => GetClientDocumentTemplateASRStylesheetAsync(connection, clientID, documentTemplateID, CancellationToken.None);
	public static async Task<List<GetClientDocumentTemplateASRStylesheetRow>> GetClientDocumentTemplateASRStylesheetAsync(SqlConnection connection, Int32 clientID, Int32 documentTemplateID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_DocumentTemplate_ASRStylesheet");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_Template_ID", documentTemplateID, SqlDbType.Int, 4));

		var result = new List<GetClientDocumentTemplateASRStylesheetRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordXSLStyleSheetPath = reader.GetOrdinal("XSLStyleSheetPath");
			int ordIsCDSOnly = reader.GetOrdinal("Is_CDS_Only");

			do
			{
				result.Add(new GetClientDocumentTemplateASRStylesheetRow
				{
					XSLStyleSheetPath = GetField<String>(reader, ordXSLStyleSheetPath),
					IsCDSOnly = GetFieldValue<Boolean>(reader, ordIsCDSOnly),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientDocumentTemplateCDAOptionsRow>> GetClientDocumentTemplateCDAOptionsAsync(SqlConnection connection, Int32 clientID, Int32 documentTemplateID) => GetClientDocumentTemplateCDAOptionsAsync(connection, clientID, documentTemplateID, CancellationToken.None);
	public static async Task<List<GetClientDocumentTemplateCDAOptionsRow>> GetClientDocumentTemplateCDAOptionsAsync(SqlConnection connection, Int32 clientID, Int32 documentTemplateID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_DocumentTemplate_CDAOptions");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_Template_ID", documentTemplateID, SqlDbType.Int, 4));

		var result = new List<GetClientDocumentTemplateCDAOptionsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordDocumentTemplateID = reader.GetOrdinal("Document_Template_ID");
			int ordVersion = reader.GetOrdinal("Version");
			int ordMaximumSectionDepth = reader.GetOrdinal("MaximumSectionDepth");

			do
			{
				result.Add(new GetClientDocumentTemplateCDAOptionsRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					DocumentTemplateID = GetNonNullFieldValue<Int32>(reader, ordDocumentTemplateID),
					Version = GetNonNullFieldValue<Int32>(reader, ordVersion),
					MaximumSectionDepth = GetNonNullFieldValue<Int32>(reader, ordMaximumSectionDepth),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientDocumentTemplateCDASectionsRow>> GetClientDocumentTemplateCDASectionsAsync(SqlConnection connection, Int32 clientID, Int32 documentTemplateID) => GetClientDocumentTemplateCDASectionsAsync(connection, clientID, documentTemplateID, CancellationToken.None);
	public static async Task<List<GetClientDocumentTemplateCDASectionsRow>> GetClientDocumentTemplateCDASectionsAsync(SqlConnection connection, Int32 clientID, Int32 documentTemplateID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_DocumentTemplate_CDASections");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_Template_ID", documentTemplateID, SqlDbType.Int, 4));

		var result = new List<GetClientDocumentTemplateCDASectionsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordDocumentTemplateID = reader.GetOrdinal("Document_Template_ID");
			int ordTitle = reader.GetOrdinal("Title");
			int ordCode = reader.GetOrdinal("Code");
			int ordCodeSystem = reader.GetOrdinal("CodeSystem");
			int ordCodeSystemName = reader.GetOrdinal("CodeSystemName");
			int ordSectionId = reader.GetOrdinal("SectionId");
			int ordParentSectionId = reader.GetOrdinal("ParentSectionId");

			do
			{
				result.Add(new GetClientDocumentTemplateCDASectionsRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					DocumentTemplateID = GetNonNullFieldValue<Int32>(reader, ordDocumentTemplateID),
					Title = GetField<String>(reader, ordTitle),
					Code = GetField<String>(reader, ordCode),
					CodeSystem = GetField<String>(reader, ordCodeSystem),
					CodeSystemName = GetField<String>(reader, ordCodeSystemName),
					SectionId = GetNonNullFieldValue<Int32>(reader, ordSectionId),
					ParentSectionId = GetFieldValue<Int32>(reader, ordParentSectionId),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientDocumentTemplateInfoRow>> GetClientDocumentTemplateInfoAsync(SqlConnection connection, Int32 clientID, Int32 templateId) => GetClientDocumentTemplateInfoAsync(connection, clientID, templateId, CancellationToken.None);
	public static async Task<List<GetClientDocumentTemplateInfoRow>> GetClientDocumentTemplateInfoAsync(SqlConnection connection, Int32 clientID, Int32 templateId, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_DocumentTemplateInfo");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Template_Id", templateId, SqlDbType.Int, 4));

		var result = new List<GetClientDocumentTemplateInfoRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDocumentTemplateID = reader.GetOrdinal("Document_Template_ID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordDescription = reader.GetOrdinal("Description");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordMTNotes = reader.GetOrdinal("MT_Notes");
			int ordCanDismiss = reader.GetOrdinal("Can_Dismiss");
			int ordVisibleCharacters = reader.GetOrdinal("Visible_Characters");
			int ordNonVisibleCharacters = reader.GetOrdinal("NonVisible_Characters");
			int ordTemplateVisibleCharacters = reader.GetOrdinal("Template_Visible_Characters");
			int ordTemplateNonVisibleCharacters = reader.GetOrdinal("Template_NonVisible_Characters");

			do
			{
				result.Add(new GetClientDocumentTemplateInfoRow
				{
					DocumentTemplateID = GetNonNullFieldValue<Int32>(reader, ordDocumentTemplateID),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					Description = GetField<String>(reader, ordDescription),
					DocumentID = GetNonNullFieldValue<Int32>(reader, ordDocumentID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
					LocationID = GetNonNullFieldValue<Int32>(reader, ordLocationID),
					MTNotes = GetField<String>(reader, ordMTNotes),
					CanDismiss = GetNonNullFieldValue<Boolean>(reader, ordCanDismiss),
					VisibleCharacters = GetFieldValue<Int32>(reader, ordVisibleCharacters),
					NonVisibleCharacters = GetFieldValue<Int32>(reader, ordNonVisibleCharacters),
					TemplateVisibleCharacters = GetFieldValue<Int32>(reader, ordTemplateVisibleCharacters),
					TemplateNonVisibleCharacters = GetFieldValue<Int32>(reader, ordTemplateNonVisibleCharacters),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientDocumentTypeLocationRow>> GetClientDocumentTypeLocationAsync(SqlConnection connection, Int32 clientID, Int32 documentId) => GetClientDocumentTypeLocationAsync(connection, clientID, documentId, CancellationToken.None);
	public static async Task<List<GetClientDocumentTypeLocationRow>> GetClientDocumentTypeLocationAsync(SqlConnection connection, Int32 clientID, Int32 documentId, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_DocumentType_Location");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_Id", documentId, SqlDbType.Int, 4));

		var result = new List<GetClientDocumentTypeLocationRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDocumentId = reader.GetOrdinal("Document_Id");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordLocationId = reader.GetOrdinal("Location_Id");
			int ordLocationName = reader.GetOrdinal("Location_Name");

			do
			{
				result.Add(new GetClientDocumentTypeLocationRow
				{
					DocumentId = GetNonNullFieldValue<Int32>(reader, ordDocumentId),
					DocumentType = GetField<String>(reader, ordDocumentType),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					LocationId = GetNonNullFieldValue<Int32>(reader, ordLocationId),
					LocationName = GetField<String>(reader, ordLocationName),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientDocumentTypeLocationsRow>> GetClientDocumentTypeLocationsAsync(SqlConnection connection, Int32 clientID) => GetClientDocumentTypeLocationsAsync(connection, clientID, CancellationToken.None);
	public static async Task<List<GetClientDocumentTypeLocationsRow>> GetClientDocumentTypeLocationsAsync(SqlConnection connection, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_DocumentType_Locations");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetClientDocumentTypeLocationsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDocumentId = reader.GetOrdinal("Document_Id");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordLocationId = reader.GetOrdinal("Location_Id");
			int ordLocationName = reader.GetOrdinal("Location_Name");

			do
			{
				result.Add(new GetClientDocumentTypeLocationsRow
				{
					DocumentId = GetNonNullFieldValue<Int32>(reader, ordDocumentId),
					DocumentType = GetField<String>(reader, ordDocumentType),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					LocationId = GetNonNullFieldValue<Int32>(reader, ordLocationId),
					LocationName = GetField<String>(reader, ordLocationName),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientDocumentTypeSettingsRow>> GetClientDocumentTypeSettingsAsync(SqlConnection connection, Int32 clientID, Int32 documentTypeID) => GetClientDocumentTypeSettingsAsync(connection, clientID, documentTypeID, CancellationToken.None);
	public static async Task<List<GetClientDocumentTypeSettingsRow>> GetClientDocumentTypeSettingsAsync(SqlConnection connection, Int32 clientID, Int32 documentTypeID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_DocumentType_Settings");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@DocumentType_ID", documentTypeID, SqlDbType.Int, 4));

		var result = new List<GetClientDocumentTypeSettingsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordDocumentId = reader.GetOrdinal("Document_Id");
			int ordPreferredContentTypeID = reader.GetOrdinal("Preferred_Content_Type_ID");
			int ordRequiresAdditionalSignature = reader.GetOrdinal("Requires_Additional_Signature");
			int ordArtifactFieldsMergeOptionID = reader.GetOrdinal("Artifact_Fields_Merge_Option_ID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetClientDocumentTypeSettingsRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					DocumentId = GetNonNullFieldValue<Int32>(reader, ordDocumentId),
					PreferredContentTypeID = GetFieldValue<Int32>(reader, ordPreferredContentTypeID),
					RequiresAdditionalSignature = GetFieldValue<Boolean>(reader, ordRequiresAdditionalSignature),
					ArtifactFieldsMergeOptionID = GetNonNullFieldValue<Int32>(reader, ordArtifactFieldsMergeOptionID),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientDocumentTypeGroupsRow>> GetClientDocumentTypeGroupsAsync(SqlConnection connection, Int32 clientID) => GetClientDocumentTypeGroupsAsync(connection, clientID, CancellationToken.None);
	public static async Task<List<GetClientDocumentTypeGroupsRow>> GetClientDocumentTypeGroupsAsync(SqlConnection connection, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_DocumentTypeGroups");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetClientDocumentTypeGroupsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordName = reader.GetOrdinal("Name");
			int ordMask = reader.GetOrdinal("Mask");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");

			do
			{
				result.Add(new GetClientDocumentTypeGroupsRow
				{
					Name = GetField<String>(reader, ordName),
					Mask = GetNonNullFieldValue<Int32>(reader, ordMask),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientDocumentTypesRow>> GetClientDocumentTypesAsync(SqlConnection connection, Int32 clientID, Boolean includeInactive) => GetClientDocumentTypesAsync(connection, clientID, includeInactive, CancellationToken.None);
	public static async Task<List<GetClientDocumentTypesRow>> GetClientDocumentTypesAsync(SqlConnection connection, Int32 clientID, Boolean includeInactive, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_DocumentTypes");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@IncludeInactive", includeInactive, SqlDbType.Bit, 1));

		var result = new List<GetClientDocumentTypesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientId = reader.GetOrdinal("Client_Id");
			int ordDocumentId = reader.GetOrdinal("Document_Id");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordDocumentDescription = reader.GetOrdinal("Document_Description");
			int ordDocumentTypeGroupMask = reader.GetOrdinal("DocumentTypeGroup_Mask");
			int ordDictationId = reader.GetOrdinal("Dictation_Id");
			int ordClientCode = reader.GetOrdinal("Client_Code");
			int ordInTouchID = reader.GetOrdinal("InTouch_ID");
			int ordDictationEmulationPromptTypeID = reader.GetOrdinal("Dictation_Emulation_Prompt_Type_ID");
			int ordRequiredLocationId = reader.GetOrdinal("Required_Location_Id");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetClientDocumentTypesRow
				{
					ClientId = GetNonNullFieldValue<Int32>(reader, ordClientId),
					DocumentId = GetNonNullFieldValue<Int32>(reader, ordDocumentId),
					DocumentType = GetField<String>(reader, ordDocumentType),
					DocumentDescription = GetField<String>(reader, ordDocumentDescription),
					DocumentTypeGroupMask = GetFieldValue<Int32>(reader, ordDocumentTypeGroupMask),
					DictationId = GetField<String>(reader, ordDictationId),
					ClientCode = GetField<String>(reader, ordClientCode),
					InTouchID = GetField<String>(reader, ordInTouchID),
					DictationEmulationPromptTypeID = GetFieldValue<Int32>(reader, ordDictationEmulationPromptTypeID),
					RequiredLocationId = GetFieldValue<Int32>(reader, ordRequiredLocationId),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientDocumentTypesPatientLettersRow>> GetClientDocumentTypesPatientLettersAsync(SqlConnection connection, Int32 clientID) => GetClientDocumentTypesPatientLettersAsync(connection, clientID, CancellationToken.None);
	public static async Task<List<GetClientDocumentTypesPatientLettersRow>> GetClientDocumentTypesPatientLettersAsync(SqlConnection connection, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_DocumentTypes_PatientLetters");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetClientDocumentTypesPatientLettersRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordPatientLetterID = reader.GetOrdinal("Patient_Letter_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordDescription = reader.GetOrdinal("Description");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordDocumentID = reader.GetOrdinal("Document_ID");

			do
			{
				result.Add(new GetClientDocumentTypesPatientLettersRow
				{
					PatientLetterID = GetNonNullFieldValue<Int32>(reader, ordPatientLetterID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					Description = GetField<String>(reader, ordDescription),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					DocumentID = GetNonNullFieldValue<Int32>(reader, ordDocumentID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientFoldersRow>> GetClientFoldersAsync(SqlConnection connection, Int32 clientID) => GetClientFoldersAsync(connection, clientID, CancellationToken.None);
	public static async Task<List<GetClientFoldersRow>> GetClientFoldersAsync(SqlConnection connection, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Folders");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetClientFoldersRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordFolderID = reader.GetOrdinal("FolderID");
			int ordFolderName = reader.GetOrdinal("FolderName");

			do
			{
				result.Add(new GetClientFoldersRow
				{
					FolderID = GetNonNullFieldValue<Int32>(reader, ordFolderID),
					FolderName = GetNonNullField<String>(reader, ordFolderName),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientHeaderConfigurationRow>> GetClientHeaderConfigurationAsync(SqlConnection connection, Int32 clientID, Int32 headerConfigurationID) => GetClientHeaderConfigurationAsync(connection, clientID, headerConfigurationID, CancellationToken.None);
	public static async Task<List<GetClientHeaderConfigurationRow>> GetClientHeaderConfigurationAsync(SqlConnection connection, Int32 clientID, Int32 headerConfigurationID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Header_Configuration");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Header_Configuration_ID", headerConfigurationID, SqlDbType.Int, 4));

		var result = new List<GetClientHeaderConfigurationRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordHeaderConfigurationID = reader.GetOrdinal("Header_Configuration_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordDescription = reader.GetOrdinal("Description");
			int ordDemographicConfiguration = reader.GetOrdinal("Demographic_Configuration");
			int ordPatientSearchConfiguration = reader.GetOrdinal("Patient_Search_Configuration");
			int ordSearchConfiguration = reader.GetOrdinal("Search_Configuration");
			int ordArtifactSearchConfiguration = reader.GetOrdinal("Artifact_Search_Configuration");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordRemovedPatientTranscriptionTagCompanyID = reader.GetOrdinal("Removed_Patient_Transcription_Tag_Company_ID");
			int ordRemovedPatientTranscriptionTagID = reader.GetOrdinal("Removed_Patient_Transcription_Tag_ID");
			int ordRemovedArtifactsTranscriptionTagCompanyID = reader.GetOrdinal("Removed_Artifacts_Transcription_Tag_Company_ID");
			int ordRemovedArtifactsTranscriptionTagID = reader.GetOrdinal("Removed_Artifacts_Transcription_Tag_ID");

			do
			{
				result.Add(new GetClientHeaderConfigurationRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					HeaderConfigurationID = GetNonNullFieldValue<Int32>(reader, ordHeaderConfigurationID),
					Name = GetNonNullField<String>(reader, ordName),
					Description = GetField<String>(reader, ordDescription),
					DemographicConfiguration = GetField<String>(reader, ordDemographicConfiguration),
					PatientSearchConfiguration = GetField<String>(reader, ordPatientSearchConfiguration),
					SearchConfiguration = GetField<String>(reader, ordSearchConfiguration),
					ArtifactSearchConfiguration = GetField<String>(reader, ordArtifactSearchConfiguration),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
					RemovedPatientTranscriptionTagCompanyID = GetFieldValue<Int32>(reader, ordRemovedPatientTranscriptionTagCompanyID),
					RemovedPatientTranscriptionTagID = GetFieldValue<Int32>(reader, ordRemovedPatientTranscriptionTagID),
					RemovedArtifactsTranscriptionTagCompanyID = GetFieldValue<Int32>(reader, ordRemovedArtifactsTranscriptionTagCompanyID),
					RemovedArtifactsTranscriptionTagID = GetFieldValue<Int32>(reader, ordRemovedArtifactsTranscriptionTagID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientHeaderConfigurationByDocumentIDRow>> GetClientHeaderConfigurationByDocumentIDAsync(SqlConnection connection, Int32 clientID, Int32 documentID) => GetClientHeaderConfigurationByDocumentIDAsync(connection, clientID, documentID, CancellationToken.None);
	public static async Task<List<GetClientHeaderConfigurationByDocumentIDRow>> GetClientHeaderConfigurationByDocumentIDAsync(SqlConnection connection, Int32 clientID, Int32 documentID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Header_Configuration_ByDocumentID");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));

		var result = new List<GetClientHeaderConfigurationByDocumentIDRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordHeaderConfigurationID = reader.GetOrdinal("Header_Configuration_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordDescription = reader.GetOrdinal("Description");
			int ordDemographicConfiguration = reader.GetOrdinal("Demographic_Configuration");
			int ordPatientSearchConfiguration = reader.GetOrdinal("Patient_Search_Configuration");
			int ordSearchConfiguration = reader.GetOrdinal("Search_Configuration");
			int ordArtifactSearchConfiguration = reader.GetOrdinal("Artifact_Search_Configuration");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordRemovedPatientTranscriptionTagCompanyID = reader.GetOrdinal("Removed_Patient_Transcription_Tag_Company_ID");
			int ordRemovedPatientTranscriptionTagID = reader.GetOrdinal("Removed_Patient_Transcription_Tag_ID");
			int ordRemovedArtifactsTranscriptionTagCompanyID = reader.GetOrdinal("Removed_Artifacts_Transcription_Tag_Company_ID");
			int ordRemovedArtifactsTranscriptionTagID = reader.GetOrdinal("Removed_Artifacts_Transcription_Tag_ID");

			do
			{
				result.Add(new GetClientHeaderConfigurationByDocumentIDRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					HeaderConfigurationID = GetNonNullFieldValue<Int32>(reader, ordHeaderConfigurationID),
					Name = GetNonNullField<String>(reader, ordName),
					Description = GetField<String>(reader, ordDescription),
					DemographicConfiguration = GetField<String>(reader, ordDemographicConfiguration),
					PatientSearchConfiguration = GetField<String>(reader, ordPatientSearchConfiguration),
					SearchConfiguration = GetField<String>(reader, ordSearchConfiguration),
					ArtifactSearchConfiguration = GetField<String>(reader, ordArtifactSearchConfiguration),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
					RemovedPatientTranscriptionTagCompanyID = GetFieldValue<Int32>(reader, ordRemovedPatientTranscriptionTagCompanyID),
					RemovedPatientTranscriptionTagID = GetFieldValue<Int32>(reader, ordRemovedPatientTranscriptionTagID),
					RemovedArtifactsTranscriptionTagCompanyID = GetFieldValue<Int32>(reader, ordRemovedArtifactsTranscriptionTagCompanyID),
					RemovedArtifactsTranscriptionTagID = GetFieldValue<Int32>(reader, ordRemovedArtifactsTranscriptionTagID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientHeaderConfigurationsRow>> GetClientHeaderConfigurationsAsync(SqlConnection connection, Int32 clientID) => GetClientHeaderConfigurationsAsync(connection, clientID, CancellationToken.None);
	public static async Task<List<GetClientHeaderConfigurationsRow>> GetClientHeaderConfigurationsAsync(SqlConnection connection, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Header_Configurations");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetClientHeaderConfigurationsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordHeaderConfigurationID = reader.GetOrdinal("Header_Configuration_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordDescription = reader.GetOrdinal("Description");
			int ordDemographicConfiguration = reader.GetOrdinal("Demographic_Configuration");
			int ordPatientSearchConfiguration = reader.GetOrdinal("Patient_Search_Configuration");
			int ordSearchConfiguration = reader.GetOrdinal("Search_Configuration");
			int ordArtifactSearchConfiguration = reader.GetOrdinal("Artifact_Search_Configuration");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordRemovedPatientTranscriptionTagCompanyID = reader.GetOrdinal("Removed_Patient_Transcription_Tag_Company_ID");
			int ordRemovedPatientTranscriptionTagID = reader.GetOrdinal("Removed_Patient_Transcription_Tag_ID");
			int ordRemovedArtifactsTranscriptionTagCompanyID = reader.GetOrdinal("Removed_Artifacts_Transcription_Tag_Company_ID");
			int ordRemovedArtifactsTranscriptionTagID = reader.GetOrdinal("Removed_Artifacts_Transcription_Tag_ID");

			do
			{
				result.Add(new GetClientHeaderConfigurationsRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					HeaderConfigurationID = GetNonNullFieldValue<Int32>(reader, ordHeaderConfigurationID),
					Name = GetNonNullField<String>(reader, ordName),
					Description = GetField<String>(reader, ordDescription),
					DemographicConfiguration = GetField<String>(reader, ordDemographicConfiguration),
					PatientSearchConfiguration = GetField<String>(reader, ordPatientSearchConfiguration),
					SearchConfiguration = GetField<String>(reader, ordSearchConfiguration),
					ArtifactSearchConfiguration = GetField<String>(reader, ordArtifactSearchConfiguration),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
					RemovedPatientTranscriptionTagCompanyID = GetFieldValue<Int32>(reader, ordRemovedPatientTranscriptionTagCompanyID),
					RemovedPatientTranscriptionTagID = GetFieldValue<Int32>(reader, ordRemovedPatientTranscriptionTagID),
					RemovedArtifactsTranscriptionTagCompanyID = GetFieldValue<Int32>(reader, ordRemovedArtifactsTranscriptionTagCompanyID),
					RemovedArtifactsTranscriptionTagID = GetFieldValue<Int32>(reader, ordRemovedArtifactsTranscriptionTagID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientLocationRow>> GetClientLocationAsync(SqlConnection connection, Int32 clientID, Int32 locationID) => GetClientLocationAsync(connection, clientID, locationID, CancellationToken.None);
	public static async Task<List<GetClientLocationRow>> GetClientLocationAsync(SqlConnection connection, Int32 clientID, Int32 locationID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Location");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));

		var result = new List<GetClientLocationRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordLocationName = reader.GetOrdinal("Location_Name");
			int ordLocationActive = reader.GetOrdinal("Location_Active");
			int ordClientCode = reader.GetOrdinal("Client_Code");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetClientLocationRow
				{
					LocationID = GetNonNullFieldValue<Int32>(reader, ordLocationID),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					LocationName = GetField<String>(reader, ordLocationName),
					LocationActive = GetNonNullFieldValue<Boolean>(reader, ordLocationActive),
					ClientCode = GetField<String>(reader, ordClientCode),
					DictationID = GetField<String>(reader, ordDictationID),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientLocationByClientCodeRow>> GetClientLocationByClientCodeAsync(SqlConnection connection, Int32 clientID, String clientLocationID) => GetClientLocationByClientCodeAsync(connection, clientID, clientLocationID, CancellationToken.None);
	public static async Task<List<GetClientLocationByClientCodeRow>> GetClientLocationByClientCodeAsync(SqlConnection connection, Int32 clientID, String clientLocationID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Location_ByClientCode");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_Location_ID", clientLocationID, SqlDbType.VarChar, 12));

		var result = new List<GetClientLocationByClientCodeRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordLocationActive = reader.GetOrdinal("Location_Active");

			do
			{
				result.Add(new GetClientLocationByClientCodeRow
				{
					LocationID = GetNonNullFieldValue<Int32>(reader, ordLocationID),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					LocationActive = GetNonNullFieldValue<Boolean>(reader, ordLocationActive),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientLocationResourceRow>> GetClientLocationResourceAsync(SqlConnection connection, Int32 clientID, Int32 locationResourceID) => GetClientLocationResourceAsync(connection, clientID, locationResourceID, CancellationToken.None);
	public static async Task<List<GetClientLocationResourceRow>> GetClientLocationResourceAsync(SqlConnection connection, Int32 clientID, Int32 locationResourceID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Location_Resource");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_Resource_ID", locationResourceID, SqlDbType.Int, 4));

		var result = new List<GetClientLocationResourceRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordLocationResourceID = reader.GetOrdinal("Location_Resource_ID");
			int ordCode = reader.GetOrdinal("Code");
			int ordName = reader.GetOrdinal("Name");
			int ordDescription = reader.GetOrdinal("Description");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");

			do
			{
				result.Add(new GetClientLocationResourceRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					LocationResourceID = GetNonNullFieldValue<Int32>(reader, ordLocationResourceID),
					Code = GetNonNullField<String>(reader, ordCode),
					Name = GetNonNullField<String>(reader, ordName),
					Description = GetField<String>(reader, ordDescription),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientLocationResourceEncountersRow>> GetClientLocationResourceEncountersAsync(SqlConnection connection, Int32 clientID, Int32 locationResourceID) => GetClientLocationResourceEncountersAsync(connection, clientID, locationResourceID, CancellationToken.None);
	public static async Task<List<GetClientLocationResourceEncountersRow>> GetClientLocationResourceEncountersAsync(SqlConnection connection, Int32 clientID, Int32 locationResourceID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Location_Resource_Encounters");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_Resource_ID", locationResourceID, SqlDbType.Int, 4));

		var result = new List<GetClientLocationResourceEncountersRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordPhysician = reader.GetOrdinal("Physician");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordApptUserField1 = reader.GetOrdinal("Appt_User_Field_1");
			int ordApptUserField2 = reader.GetOrdinal("Appt_User_Field_2");
			int ordApptUserField3 = reader.GetOrdinal("Appt_User_Field_3");
			int ordApptUserField4 = reader.GetOrdinal("Appt_User_Field_4");
			int ordApptUserField5 = reader.GetOrdinal("Appt_User_Field_5");
			int ordAppointmentClientCode = reader.GetOrdinal("Appointment_Client_Code");
			int ordPatientsAppointmentsTypeID = reader.GetOrdinal("Patients_Appointments_Type_ID");
			int ordAdmitDate = reader.GetOrdinal("Admit_Date");
			int ordDischargeDate = reader.GetOrdinal("Discharge_Date");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordAppointmentID = reader.GetOrdinal("Appointment_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordPatientFullName = reader.GetOrdinal("Patient_Full_Name");
			int ordPatientNameFirst = reader.GetOrdinal("Patient_Name_First");
			int ordPatientNameLast = reader.GetOrdinal("Patient_Name_Last");
			int ordPatientNameMiddle = reader.GetOrdinal("Patient_Name_Middle");
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");

			do
			{
				result.Add(new GetClientLocationResourceEncountersRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					PatientID = GetNonNullField<String>(reader, ordPatientID),
					LocationID = GetNonNullFieldValue<Int32>(reader, ordLocationID),
					Physician = GetNonNullField<String>(reader, ordPhysician),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					DictationID = GetField<String>(reader, ordDictationID),
					ApptUserField1 = GetField<String>(reader, ordApptUserField1),
					ApptUserField2 = GetField<String>(reader, ordApptUserField2),
					ApptUserField3 = GetField<String>(reader, ordApptUserField3),
					ApptUserField4 = GetField<String>(reader, ordApptUserField4),
					ApptUserField5 = GetField<String>(reader, ordApptUserField5),
					AppointmentClientCode = GetField<String>(reader, ordAppointmentClientCode),
					PatientsAppointmentsTypeID = GetFieldValue<Int32>(reader, ordPatientsAppointmentsTypeID),
					AdmitDate = GetFieldValue<DateTime>(reader, ordAdmitDate),
					DischargeDate = GetFieldValue<DateTime>(reader, ordDischargeDate),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					AppointmentID = GetNonNullFieldValue<Guid>(reader, ordAppointmentID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					PatientFullName = GetField<String>(reader, ordPatientFullName),
					PatientNameFirst = GetField<String>(reader, ordPatientNameFirst),
					PatientNameLast = GetField<String>(reader, ordPatientNameLast),
					PatientNameMiddle = GetField<String>(reader, ordPatientNameMiddle),
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientLocationResourceInpatientVisitsRow>> GetClientLocationResourceInpatientVisitsAsync(SqlConnection connection, Int32 clientID, Int32 locationResourceID) => GetClientLocationResourceInpatientVisitsAsync(connection, clientID, locationResourceID, CancellationToken.None);
	public static async Task<List<GetClientLocationResourceInpatientVisitsRow>> GetClientLocationResourceInpatientVisitsAsync(SqlConnection connection, Int32 clientID, Int32 locationResourceID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Location_Resource_InpatientVisits");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_Resource_ID", locationResourceID, SqlDbType.Int, 4));

		var result = new List<GetClientLocationResourceInpatientVisitsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDescription = reader.GetOrdinal("Description");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordAppointmentID = reader.GetOrdinal("Appointment_ID");
			int ordApptUserField1 = reader.GetOrdinal("Appt_User_Field_1");
			int ordApptUserField2 = reader.GetOrdinal("Appt_User_Field_2");
			int ordApptUserField3 = reader.GetOrdinal("Appt_User_Field_3");
			int ordApptUserField4 = reader.GetOrdinal("Appt_User_Field_4");
			int ordApptUserField5 = reader.GetOrdinal("Appt_User_Field_5");
			int ordAdmitDate = reader.GetOrdinal("Admit_Date");
			int ordDischargeDate = reader.GetOrdinal("Discharge_Date");
			int ordAccountNumber = reader.GetOrdinal("Account_Number");
			int ordLocation = reader.GetOrdinal("Location");
			int ordRoom = reader.GetOrdinal("Room");
			int ordBed = reader.GetOrdinal("Bed");
			int ordFloor = reader.GetOrdinal("Floor");
			int ordFacility = reader.GetOrdinal("Facility");
			int ordPatientsAppointmentsStatusID = reader.GetOrdinal("Patients_Appointments_Status_ID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordPatientsAppointmentsTypeID = reader.GetOrdinal("Patients_Appointments_Type_ID");
			int ordPatientLocation = reader.GetOrdinal("Patient_Location");
			int ordPatientClass = reader.GetOrdinal("Patient_Class");
			int ordPatientType = reader.GetOrdinal("Patient_Type");
			int ordAppointmentClientCode = reader.GetOrdinal("Appointment_Client_Code");
			int ordAttendingPhysicianName = reader.GetOrdinal("Attending_Physician_Name");
			int ordAdmittingPhysicianName = reader.GetOrdinal("Admitting_Physician_Name");
			int ordReferringPhysicianName = reader.GetOrdinal("Referring_Physician_Name");
			int ordConsultingPhysicianName = reader.GetOrdinal("Consulting_Physician_Name");
			int ordPrimaryCarePhysicianName = reader.GetOrdinal("Primary_Care_Physician_Name");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordAppointmentDictationCount = reader.GetOrdinal("Appointment_Dictation_Count");
			int ordAppointmentTranscriptionCount = reader.GetOrdinal("Appointment_Transcription_Count");
			int ordAppointmentSchedulingResourceID = reader.GetOrdinal("Appointment_Scheduling_Resource_ID");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientFullName = reader.GetOrdinal("Patient_Full_Name");
			int ordPatientNameFirst = reader.GetOrdinal("Patient_Name_First");
			int ordPatientNameLast = reader.GetOrdinal("Patient_Name_Last");
			int ordPatientNameMiddle = reader.GetOrdinal("Patient_Name_Middle");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");

			do
			{
				result.Add(new GetClientLocationResourceInpatientVisitsRow
				{
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					Description = GetNonNullField<String>(reader, ordDescription),
					LocationID = GetNonNullFieldValue<Int32>(reader, ordLocationID),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					AppointmentID = GetNonNullFieldValue<Guid>(reader, ordAppointmentID),
					ApptUserField1 = GetField<String>(reader, ordApptUserField1),
					ApptUserField2 = GetField<String>(reader, ordApptUserField2),
					ApptUserField3 = GetField<String>(reader, ordApptUserField3),
					ApptUserField4 = GetField<String>(reader, ordApptUserField4),
					ApptUserField5 = GetField<String>(reader, ordApptUserField5),
					AdmitDate = GetFieldValue<DateTime>(reader, ordAdmitDate),
					DischargeDate = GetFieldValue<DateTime>(reader, ordDischargeDate),
					AccountNumber = GetField<String>(reader, ordAccountNumber),
					Location = GetField<String>(reader, ordLocation),
					Room = GetField<String>(reader, ordRoom),
					Bed = GetField<String>(reader, ordBed),
					Floor = GetField<String>(reader, ordFloor),
					Facility = GetField<String>(reader, ordFacility),
					PatientsAppointmentsStatusID = GetField<String>(reader, ordPatientsAppointmentsStatusID),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					PatientsAppointmentsTypeID = GetFieldValue<Int32>(reader, ordPatientsAppointmentsTypeID),
					PatientLocation = GetField<String>(reader, ordPatientLocation),
					PatientClass = GetField<String>(reader, ordPatientClass),
					PatientType = GetField<String>(reader, ordPatientType),
					AppointmentClientCode = GetField<String>(reader, ordAppointmentClientCode),
					AttendingPhysicianName = GetField<String>(reader, ordAttendingPhysicianName),
					AdmittingPhysicianName = GetField<String>(reader, ordAdmittingPhysicianName),
					ReferringPhysicianName = GetField<String>(reader, ordReferringPhysicianName),
					ConsultingPhysicianName = GetField<String>(reader, ordConsultingPhysicianName),
					PrimaryCarePhysicianName = GetField<String>(reader, ordPrimaryCarePhysicianName),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					AppointmentDictationCount = GetFieldValue<Int32>(reader, ordAppointmentDictationCount),
					AppointmentTranscriptionCount = GetFieldValue<Int32>(reader, ordAppointmentTranscriptionCount),
					AppointmentSchedulingResourceID = GetFieldValue<Int32>(reader, ordAppointmentSchedulingResourceID),
					PatientID = GetNonNullField<String>(reader, ordPatientID),
					PatientFullName = GetField<String>(reader, ordPatientFullName),
					PatientNameFirst = GetField<String>(reader, ordPatientNameFirst),
					PatientNameLast = GetField<String>(reader, ordPatientNameLast),
					PatientNameMiddle = GetField<String>(reader, ordPatientNameMiddle),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					PatientGender = GetField<String>(reader, ordPatientGender),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientLocationsRow>> GetClientLocationsAsync(SqlConnection connection, Int32 clientID, Boolean includeInactive) => GetClientLocationsAsync(connection, clientID, includeInactive, CancellationToken.None);
	public static async Task<List<GetClientLocationsRow>> GetClientLocationsAsync(SqlConnection connection, Int32 clientID, Boolean includeInactive, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Locations");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@IncludeInactive", includeInactive, SqlDbType.Bit, 1));

		var result = new List<GetClientLocationsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordLocationName = reader.GetOrdinal("Location_Name");
			int ordLocationActive = reader.GetOrdinal("Location_Active");
			int ordClientCode = reader.GetOrdinal("Client_Code");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordInTouchID = reader.GetOrdinal("InTouch_ID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordPatientIDPrefix = reader.GetOrdinal("Patient_ID_Prefix");
			int ordPatientIDSuffix = reader.GetOrdinal("Patient_ID_Suffix");
			int ordPatientIDPaddedLength = reader.GetOrdinal("Patient_ID_Padded_Length");
			int ordAccountNumberPrefix = reader.GetOrdinal("Account_Number_Prefix");
			int ordAccountNumberSuffix = reader.GetOrdinal("Account_Number_Suffix");
			int ordAccountNumberPaddedLength = reader.GetOrdinal("Account_Number_Padded_Length");
			int ordOrderNumberPrefix = reader.GetOrdinal("Order_Number_Prefix");
			int ordOrderNumberSuffix = reader.GetOrdinal("Order_Number_Suffix");
			int ordOrderNumberPaddedLength = reader.GetOrdinal("Order_Number_Padded_Length");

			do
			{
				result.Add(new GetClientLocationsRow
				{
					LocationID = GetNonNullFieldValue<Int32>(reader, ordLocationID),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					LocationName = GetField<String>(reader, ordLocationName),
					LocationActive = GetNonNullFieldValue<Boolean>(reader, ordLocationActive),
					ClientCode = GetField<String>(reader, ordClientCode),
					DictationID = GetField<String>(reader, ordDictationID),
					InTouchID = GetField<String>(reader, ordInTouchID),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					PatientIDPrefix = GetField<String>(reader, ordPatientIDPrefix),
					PatientIDSuffix = GetField<String>(reader, ordPatientIDSuffix),
					PatientIDPaddedLength = GetFieldValue<Int32>(reader, ordPatientIDPaddedLength),
					AccountNumberPrefix = GetField<String>(reader, ordAccountNumberPrefix),
					AccountNumberSuffix = GetField<String>(reader, ordAccountNumberSuffix),
					AccountNumberPaddedLength = GetFieldValue<Int32>(reader, ordAccountNumberPaddedLength),
					OrderNumberPrefix = GetField<String>(reader, ordOrderNumberPrefix),
					OrderNumberSuffix = GetField<String>(reader, ordOrderNumberSuffix),
					OrderNumberPaddedLength = GetFieldValue<Int32>(reader, ordOrderNumberPaddedLength),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientPasswordComplexitySettingsRow>> GetClientPasswordComplexitySettingsAsync(SqlConnection connection, Int32 clientID) => GetClientPasswordComplexitySettingsAsync(connection, clientID, CancellationToken.None);
	public static async Task<List<GetClientPasswordComplexitySettingsRow>> GetClientPasswordComplexitySettingsAsync(SqlConnection connection, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Password_Complexity_Settings");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetClientPasswordComplexitySettingsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordPasswordHistoryCount = reader.GetOrdinal("PasswordHistoryCount");
			int ordPasswordMinimumLength = reader.GetOrdinal("PasswordMinimumLength");
			int ordPasswordPatternLength = reader.GetOrdinal("PasswordPatternLength");
			int ordPasswordCaseSensitive = reader.GetOrdinal("Password_Case_Sensitive");
			int ordPasswordRequireUpperCase = reader.GetOrdinal("Password_Require_Upper_Case");
			int ordPasswordRequireLowerCase = reader.GetOrdinal("Password_Require_Lower_Case");
			int ordPasswordRequireNumerical = reader.GetOrdinal("Password_Require_Numerical");
			int ordPasswordRequireSpecial = reader.GetOrdinal("Password_Require_Special");
			int ordPasswordUsernamePatternLength = reader.GetOrdinal("Password_Username_Pattern_Length");
			int ordPasswordMinimumDays = reader.GetOrdinal("PasswordMinimumDays");

			do
			{
				result.Add(new GetClientPasswordComplexitySettingsRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					PasswordHistoryCount = GetNonNullFieldValue<Int32>(reader, ordPasswordHistoryCount),
					PasswordMinimumLength = GetNonNullFieldValue<Int32>(reader, ordPasswordMinimumLength),
					PasswordPatternLength = GetNonNullFieldValue<Int32>(reader, ordPasswordPatternLength),
					PasswordCaseSensitive = GetNonNullFieldValue<Boolean>(reader, ordPasswordCaseSensitive),
					PasswordRequireUpperCase = GetNonNullFieldValue<Boolean>(reader, ordPasswordRequireUpperCase),
					PasswordRequireLowerCase = GetNonNullFieldValue<Boolean>(reader, ordPasswordRequireLowerCase),
					PasswordRequireNumerical = GetNonNullFieldValue<Boolean>(reader, ordPasswordRequireNumerical),
					PasswordRequireSpecial = GetNonNullFieldValue<Boolean>(reader, ordPasswordRequireSpecial),
					PasswordUsernamePatternLength = GetNonNullFieldValue<Int32>(reader, ordPasswordUsernamePatternLength),
					PasswordMinimumDays = GetNonNullFieldValue<Int32>(reader, ordPasswordMinimumDays),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientPatientDictationsRow>> GetClientPatientDictationsAsync(SqlConnection connection, Int32 clientId, Guid patientGuid) => GetClientPatientDictationsAsync(connection, clientId, patientGuid, CancellationToken.None);
	public static async Task<List<GetClientPatientDictationsRow>> GetClientPatientDictationsAsync(SqlConnection connection, Int32 clientId, Guid patientGuid, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Patient_Dictations");

		cmd.Parameters.Add(CreateParameter("@Client_Id", clientId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@patient_Guid", patientGuid, SqlDbType.UniqueIdentifier, 16));

		var result = new List<GetClientPatientDictationsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordIsStat = reader.GetOrdinal("Is_Stat");
			int ordSourceMachineName = reader.GetOrdinal("Source_Machine_Name");
			int ordLength = reader.GetOrdinal("Length");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordReceiptCode = reader.GetOrdinal("Receipt_Code");

			do
			{
				result.Add(new GetClientPatientDictationsRow
				{
					DictationID = GetNonNullFieldValue<Int32>(reader, ordDictationID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					IsStat = GetNonNullFieldValue<Boolean>(reader, ordIsStat),
					SourceMachineName = GetField<String>(reader, ordSourceMachineName),
					Length = GetFieldValue<Int32>(reader, ordLength),
					DateDictated = GetFieldValue<DateTimeOffset>(reader, ordDateDictated),
					PatientID = GetField<String>(reader, ordPatientID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					ReceiptCode = GetField<String>(reader, ordReceiptCode),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientPatientProblemListCategoriesRow>> GetClientPatientProblemListCategoriesAsync(SqlConnection connection, Int32 clientId, Guid patientGuid) => GetClientPatientProblemListCategoriesAsync(connection, clientId, patientGuid, CancellationToken.None);
	public static async Task<List<GetClientPatientProblemListCategoriesRow>> GetClientPatientProblemListCategoriesAsync(SqlConnection connection, Int32 clientId, Guid patientGuid, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Patient_ProblemList_Categories");

		cmd.Parameters.Add(CreateParameter("@Client_Id", clientId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@patient_Guid", patientGuid, SqlDbType.UniqueIdentifier, 16));

		var result = new List<GetClientPatientProblemListCategoriesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");
			int ordCategoryID = reader.GetOrdinal("Category_ID");
			int ordDescription = reader.GetOrdinal("Description");
			int ordCategoryOrder = reader.GetOrdinal("Category_Order");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetClientPatientProblemListCategoriesRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
					CategoryID = GetNonNullFieldValue<Int32>(reader, ordCategoryID),
					Description = GetField<String>(reader, ordDescription),
					CategoryOrder = GetFieldValue<Int32>(reader, ordCategoryOrder),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientPatientProblemListCategoryRow>> GetClientPatientProblemListCategoryAsync(SqlConnection connection, Int32 clientId, Guid patientGuid, Int32 categoryId) => GetClientPatientProblemListCategoryAsync(connection, clientId, patientGuid, categoryId, CancellationToken.None);
	public static async Task<List<GetClientPatientProblemListCategoryRow>> GetClientPatientProblemListCategoryAsync(SqlConnection connection, Int32 clientId, Guid patientGuid, Int32 categoryId, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Patient_ProblemList_Category");

		cmd.Parameters.Add(CreateParameter("@Client_Id", clientId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@patient_Guid", patientGuid, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Category_Id", categoryId, SqlDbType.Int, 4));

		var result = new List<GetClientPatientProblemListCategoryRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");
			int ordCategoryID = reader.GetOrdinal("Category_ID");
			int ordDescription = reader.GetOrdinal("Description");
			int ordCategoryOrder = reader.GetOrdinal("Category_Order");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetClientPatientProblemListCategoryRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
					CategoryID = GetNonNullFieldValue<Int32>(reader, ordCategoryID),
					Description = GetField<String>(reader, ordDescription),
					CategoryOrder = GetFieldValue<Int32>(reader, ordCategoryOrder),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientPatientProblemListCategoryContentRow>> GetClientPatientProblemListCategoryContentAsync(SqlConnection connection, Int32 clientId, Guid patientGuid, Int32 categoryId) => GetClientPatientProblemListCategoryContentAsync(connection, clientId, patientGuid, categoryId, CancellationToken.None);
	public static async Task<List<GetClientPatientProblemListCategoryContentRow>> GetClientPatientProblemListCategoryContentAsync(SqlConnection connection, Int32 clientId, Guid patientGuid, Int32 categoryId, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Patient_ProblemList_Category_Content");

		cmd.Parameters.Add(CreateParameter("@Client_Id", clientId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@patient_Guid", patientGuid, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Category_Id", categoryId, SqlDbType.Int, 4));

		var result = new List<GetClientPatientProblemListCategoryContentRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordProblem = reader.GetOrdinal("Problem");

			do
			{
				result.Add(new GetClientPatientProblemListCategoryContentRow
				{
					Problem = GetField<String>(reader, ordProblem),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientPatientTranscriptionDictationsRow>> GetClientPatientTranscriptionDictationsAsync(SqlConnection connection, Int32 clientId, Guid patientGuid) => GetClientPatientTranscriptionDictationsAsync(connection, clientId, patientGuid, CancellationToken.None);
	public static async Task<List<GetClientPatientTranscriptionDictationsRow>> GetClientPatientTranscriptionDictationsAsync(SqlConnection connection, Int32 clientId, Guid patientGuid, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Patient_Transcription_Dictations");

		cmd.Parameters.Add(CreateParameter("@Client_Id", clientId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@patient_Guid", patientGuid, SqlDbType.UniqueIdentifier, 16));

		var result = new List<GetClientPatientTranscriptionDictationsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordIsStat = reader.GetOrdinal("Is_Stat");
			int ordSourceMachineName = reader.GetOrdinal("Source_Machine_Name");
			int ordLength = reader.GetOrdinal("Length");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordPatientId = reader.GetOrdinal("Patient_Id");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordTranscriptionDocumentID = reader.GetOrdinal("Transcription Document ID");
			int ordTranscriptionLocationID = reader.GetOrdinal("Transcription Location ID");
			int ordReceiptCode = reader.GetOrdinal("Receipt_Code");

			do
			{
				result.Add(new GetClientPatientTranscriptionDictationsRow
				{
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					DictationID = GetFieldValue<Int32>(reader, ordDictationID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					IsStat = GetFieldValue<Boolean>(reader, ordIsStat),
					SourceMachineName = GetField<String>(reader, ordSourceMachineName),
					Length = GetFieldValue<Int32>(reader, ordLength),
					DateDictated = GetFieldValue<DateTimeOffset>(reader, ordDateDictated),
					PatientId = GetField<String>(reader, ordPatientId),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					TranscriptionDocumentID = GetFieldValue<Int32>(reader, ordTranscriptionDocumentID),
					TranscriptionLocationID = GetFieldValue<Int32>(reader, ordTranscriptionLocationID),
					ReceiptCode = GetField<String>(reader, ordReceiptCode),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientPatientLetterRow>> GetClientPatientLetterAsync(SqlConnection connection, Int32 clientID, Int32 patientLetterID) => GetClientPatientLetterAsync(connection, clientID, patientLetterID, CancellationToken.None);
	public static async Task<List<GetClientPatientLetterRow>> GetClientPatientLetterAsync(SqlConnection connection, Int32 clientID, Int32 patientLetterID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_PatientLetter");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patient_Letter_ID", patientLetterID, SqlDbType.Int, 4));

		var result = new List<GetClientPatientLetterRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordPatientLetterID = reader.GetOrdinal("Patient_Letter_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordDescription = reader.GetOrdinal("Description");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordDocumentID = reader.GetOrdinal("Document_ID");

			do
			{
				result.Add(new GetClientPatientLetterRow
				{
					PatientLetterID = GetNonNullFieldValue<Int32>(reader, ordPatientLetterID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					Description = GetField<String>(reader, ordDescription),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					DocumentID = GetNonNullFieldValue<Int32>(reader, ordDocumentID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientPatientLettersRow>> GetClientPatientLettersAsync(SqlConnection connection, Int32 clientID) => GetClientPatientLettersAsync(connection, clientID, CancellationToken.None);
	public static async Task<List<GetClientPatientLettersRow>> GetClientPatientLettersAsync(SqlConnection connection, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_PatientLetters");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetClientPatientLettersRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordPatientLetterID = reader.GetOrdinal("Patient_Letter_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordDescription = reader.GetOrdinal("Description");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordDocumentID = reader.GetOrdinal("Document_ID");

			do
			{
				result.Add(new GetClientPatientLettersRow
				{
					PatientLetterID = GetNonNullFieldValue<Int32>(reader, ordPatientLetterID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					Description = GetField<String>(reader, ordDescription),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					DocumentID = GetNonNullFieldValue<Int32>(reader, ordDocumentID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientPatientVisitRow>> GetClientPatientVisitAsync(SqlConnection connection, Int32 clientID, Guid appointmentID) => GetClientPatientVisitAsync(connection, clientID, appointmentID, CancellationToken.None);
	public static async Task<List<GetClientPatientVisitRow>> GetClientPatientVisitAsync(SqlConnection connection, Int32 clientID, Guid appointmentID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_PatientVisit");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Appointment_ID", appointmentID, SqlDbType.UniqueIdentifier, 16));

		var result = new List<GetClientPatientVisitRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDescription = reader.GetOrdinal("Description");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordAppointmentID = reader.GetOrdinal("Appointment_ID");
			int ordApptUserField1 = reader.GetOrdinal("Appt_User_Field_1");
			int ordApptUserField2 = reader.GetOrdinal("Appt_User_Field_2");
			int ordApptUserField3 = reader.GetOrdinal("Appt_User_Field_3");
			int ordApptUserField4 = reader.GetOrdinal("Appt_User_Field_4");
			int ordApptUserField5 = reader.GetOrdinal("Appt_User_Field_5");
			int ordAdmitDate = reader.GetOrdinal("Admit_Date");
			int ordDischargeDate = reader.GetOrdinal("Discharge_Date");
			int ordAccountNumber = reader.GetOrdinal("Account_Number");
			int ordLocation = reader.GetOrdinal("Location");
			int ordRoom = reader.GetOrdinal("Room");
			int ordBed = reader.GetOrdinal("Bed");
			int ordFloor = reader.GetOrdinal("Floor");
			int ordFacility = reader.GetOrdinal("Facility");
			int ordPatientsAppointmentsStatusID = reader.GetOrdinal("Patients_Appointments_Status_ID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordPatientsAppointmentsTypeID = reader.GetOrdinal("Patients_Appointments_Type_ID");
			int ordPatientLocation = reader.GetOrdinal("Patient_Location");
			int ordPatientClass = reader.GetOrdinal("Patient_Class");
			int ordPatientType = reader.GetOrdinal("Patient_Type");
			int ordAppointmentClientCode = reader.GetOrdinal("Appointment_Client_Code");
			int ordAttendingPhysicianName = reader.GetOrdinal("Attending_Physician_Name");
			int ordAdmittingPhysicianName = reader.GetOrdinal("Admitting_Physician_Name");
			int ordReferringPhysicianName = reader.GetOrdinal("Referring_Physician_Name");
			int ordConsultingPhysicianName = reader.GetOrdinal("Consulting_Physician_Name");
			int ordPrimaryCarePhysicianName = reader.GetOrdinal("Primary_Care_Physician_Name");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordAppointmentDictationCount = reader.GetOrdinal("Appointment_Dictation_Count");
			int ordAppointmentTranscriptionCount = reader.GetOrdinal("Appointment_Transcription_Count");
			int ordAppointmentSchedulingResourceID = reader.GetOrdinal("Appointment_Scheduling_Resource_ID");

			do
			{
				result.Add(new GetClientPatientVisitRow
				{
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					Description = GetNonNullField<String>(reader, ordDescription),
					LocationID = GetNonNullFieldValue<Int32>(reader, ordLocationID),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					AppointmentID = GetNonNullFieldValue<Guid>(reader, ordAppointmentID),
					ApptUserField1 = GetField<String>(reader, ordApptUserField1),
					ApptUserField2 = GetField<String>(reader, ordApptUserField2),
					ApptUserField3 = GetField<String>(reader, ordApptUserField3),
					ApptUserField4 = GetField<String>(reader, ordApptUserField4),
					ApptUserField5 = GetField<String>(reader, ordApptUserField5),
					AdmitDate = GetFieldValue<DateTime>(reader, ordAdmitDate),
					DischargeDate = GetFieldValue<DateTime>(reader, ordDischargeDate),
					AccountNumber = GetField<String>(reader, ordAccountNumber),
					Location = GetField<String>(reader, ordLocation),
					Room = GetField<String>(reader, ordRoom),
					Bed = GetField<String>(reader, ordBed),
					Floor = GetField<String>(reader, ordFloor),
					Facility = GetField<String>(reader, ordFacility),
					PatientsAppointmentsStatusID = GetField<String>(reader, ordPatientsAppointmentsStatusID),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					PatientsAppointmentsTypeID = GetFieldValue<Int32>(reader, ordPatientsAppointmentsTypeID),
					PatientLocation = GetField<String>(reader, ordPatientLocation),
					PatientClass = GetField<String>(reader, ordPatientClass),
					PatientType = GetField<String>(reader, ordPatientType),
					AppointmentClientCode = GetField<String>(reader, ordAppointmentClientCode),
					AttendingPhysicianName = GetField<String>(reader, ordAttendingPhysicianName),
					AdmittingPhysicianName = GetField<String>(reader, ordAdmittingPhysicianName),
					ReferringPhysicianName = GetField<String>(reader, ordReferringPhysicianName),
					ConsultingPhysicianName = GetField<String>(reader, ordConsultingPhysicianName),
					PrimaryCarePhysicianName = GetField<String>(reader, ordPrimaryCarePhysicianName),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					AppointmentDictationCount = GetFieldValue<Int32>(reader, ordAppointmentDictationCount),
					AppointmentTranscriptionCount = GetFieldValue<Int32>(reader, ordAppointmentTranscriptionCount),
					AppointmentSchedulingResourceID = GetFieldValue<Int32>(reader, ordAppointmentSchedulingResourceID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientPatientVisitDictationsRow>> GetClientPatientVisitDictationsAsync(SqlConnection connection, Int32 clientID, Guid appointmentID) => GetClientPatientVisitDictationsAsync(connection, clientID, appointmentID, CancellationToken.None);
	public static async Task<List<GetClientPatientVisitDictationsRow>> GetClientPatientVisitDictationsAsync(SqlConnection connection, Int32 clientID, Guid appointmentID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_PatientVisit_Dictations");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Appointment_ID", appointmentID, SqlDbType.UniqueIdentifier, 16));

		var result = new List<GetClientPatientVisitDictationsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordAccountNumber = reader.GetOrdinal("Account_Number");
			int ordAppointmentID = reader.GetOrdinal("Appointment_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordSourceFilePath = reader.GetOrdinal("Source_File_Path");
			int ordSourceMachineName = reader.GetOrdinal("Source_Machine_Name");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordLength = reader.GetOrdinal("Length");
			int ordDictationSourceID = reader.GetOrdinal("Dictation_Source_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordIsStat = reader.GetOrdinal("Is_Stat");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordComment = reader.GetOrdinal("Comment");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_TimeZone_Identifier");

			do
			{
				result.Add(new GetClientPatientVisitDictationsRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					DictationID = GetNonNullFieldValue<Int32>(reader, ordDictationID),
					AccountNumber = GetField<String>(reader, ordAccountNumber),
					AppointmentID = GetFieldValue<Guid>(reader, ordAppointmentID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					DateDictated = GetFieldValue<DateTimeOffset>(reader, ordDateDictated),
					SourceFilePath = GetField<String>(reader, ordSourceFilePath),
					SourceMachineName = GetField<String>(reader, ordSourceMachineName),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					Length = GetFieldValue<Int32>(reader, ordLength),
					DictationSourceID = GetFieldValue<Int32>(reader, ordDictationSourceID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					IsStat = GetNonNullFieldValue<Boolean>(reader, ordIsStat),
					PatientID = GetField<String>(reader, ordPatientID),
					Comment = GetField<String>(reader, ordComment),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetField<String>(reader, ordServerTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientPatientVisitTranscriptionsRow>> GetClientPatientVisitTranscriptionsAsync(SqlConnection connection, Int32 clientID, Guid appointmentID) => GetClientPatientVisitTranscriptionsAsync(connection, clientID, appointmentID, CancellationToken.None);
	public static async Task<List<GetClientPatientVisitTranscriptionsRow>> GetClientPatientVisitTranscriptionsAsync(SqlConnection connection, Int32 clientID, Guid appointmentID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_PatientVisit_Transcriptions");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Appointment_ID", appointmentID, SqlDbType.UniqueIdentifier, 16));

		var result = new List<GetClientPatientVisitTranscriptionsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordComment = reader.GetOrdinal("Comment");
			int ordDateArchived = reader.GetOrdinal("Date_Archived");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordDateDictatedCST = reader.GetOrdinal("Date_Dictated_CST");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordDocumentDescription = reader.GetOrdinal("Document_Description");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordLocationName = reader.GetOrdinal("Location_Name");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordReceiptCode = reader.GetOrdinal("Receipt_Code");
			int ordTranscriptionStat = reader.GetOrdinal("Transcription_Stat");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordUserUsername = reader.GetOrdinal("User_Username");
			int ordUserNameFirst = reader.GetOrdinal("User_Name_First");
			int ordUserNameLast = reader.GetOrdinal("User_Name_Last");
			int ordUserNameMiddle = reader.GetOrdinal("User_Name_Middle");
			int ordUserNamePrefix = reader.GetOrdinal("User_Name_Prefix");
			int ordUserNameSuffix = reader.GetOrdinal("User_Name_Suffix");
			int ordAppointmentID = reader.GetOrdinal("Appointment_ID");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_TimeZone_Identifier");

			do
			{
				result.Add(new GetClientPatientVisitTranscriptionsRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					Comment = GetField<String>(reader, ordComment),
					DateArchived = GetFieldValue<DateTime>(reader, ordDateArchived),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					DateDictatedCST = GetFieldValue<DateTime>(reader, ordDateDictatedCST),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					DocumentType = GetField<String>(reader, ordDocumentType),
					DocumentDescription = GetField<String>(reader, ordDocumentDescription),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					LocationName = GetField<String>(reader, ordLocationName),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					ReceiptCode = GetField<String>(reader, ordReceiptCode),
					TranscriptionStat = GetNonNullFieldValue<Boolean>(reader, ordTranscriptionStat),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					UserFullname = GetField<String>(reader, ordUserFullname),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					UserUsername = GetField<String>(reader, ordUserUsername),
					UserNameFirst = GetField<String>(reader, ordUserNameFirst),
					UserNameLast = GetField<String>(reader, ordUserNameLast),
					UserNameMiddle = GetField<String>(reader, ordUserNameMiddle),
					UserNamePrefix = GetField<String>(reader, ordUserNamePrefix),
					UserNameSuffix = GetField<String>(reader, ordUserNameSuffix),
					AppointmentID = GetFieldValue<Guid>(reader, ordAppointmentID),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetField<String>(reader, ordServerTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientProblemListCategoriesRow>> GetClientProblemListCategoriesAsync(SqlConnection connection, Int32 clientId) => GetClientProblemListCategoriesAsync(connection, clientId, CancellationToken.None);
	public static async Task<List<GetClientProblemListCategoriesRow>> GetClientProblemListCategoriesAsync(SqlConnection connection, Int32 clientId, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_ProblemList_Categories");

		cmd.Parameters.Add(CreateParameter("@Client_Id", clientId, SqlDbType.Int, 4));

		var result = new List<GetClientProblemListCategoriesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordCategoryID = reader.GetOrdinal("Category_ID");
			int ordCategoryOrder = reader.GetOrdinal("Category_Order");
			int ordDescription = reader.GetOrdinal("Description");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetClientProblemListCategoriesRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					CategoryID = GetNonNullFieldValue<Int32>(reader, ordCategoryID),
					CategoryOrder = GetFieldValue<Int32>(reader, ordCategoryOrder),
					Description = GetField<String>(reader, ordDescription),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientProblemListCategoryRow>> GetClientProblemListCategoryAsync(SqlConnection connection, Int32 clientId, Int32 categoryId) => GetClientProblemListCategoryAsync(connection, clientId, categoryId, CancellationToken.None);
	public static async Task<List<GetClientProblemListCategoryRow>> GetClientProblemListCategoryAsync(SqlConnection connection, Int32 clientId, Int32 categoryId, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_ProblemList_Category");

		cmd.Parameters.Add(CreateParameter("@Client_Id", clientId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Category_Id", categoryId, SqlDbType.Int, 4));

		var result = new List<GetClientProblemListCategoryRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordCategoryID = reader.GetOrdinal("Category_ID");
			int ordCategoryOrder = reader.GetOrdinal("Category_Order");
			int ordDescription = reader.GetOrdinal("Description");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetClientProblemListCategoryRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					CategoryID = GetNonNullFieldValue<Int32>(reader, ordCategoryID),
					CategoryOrder = GetFieldValue<Int32>(reader, ordCategoryOrder),
					Description = GetField<String>(reader, ordDescription),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientReferralsRow>> GetClientReferralsAsync(SqlConnection connection, Int32 clientID, Boolean includeMasterClient) => GetClientReferralsAsync(connection, clientID, includeMasterClient, CancellationToken.None);
	public static async Task<List<GetClientReferralsRow>> GetClientReferralsAsync(SqlConnection connection, Int32 clientID, Boolean includeMasterClient, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Referrals");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Include_Master_Client", includeMasterClient, SqlDbType.Bit, 1));

		var result = new List<GetClientReferralsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordAllowedClientID = reader.GetOrdinal("Allowed_Client_ID");
			int ordClientName = reader.GetOrdinal("Client_Name");
			int ordClientFullName = reader.GetOrdinal("Client_FullName");

			do
			{
				result.Add(new GetClientReferralsRow
				{
					AllowedClientID = GetNonNullFieldValue<Int32>(reader, ordAllowedClientID),
					ClientName = GetNonNullField<String>(reader, ordClientName),
					ClientFullName = GetField<String>(reader, ordClientFullName),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientServiceAccountRow>> GetClientServiceAccountAsync(SqlConnection connection, Int32 clientID, Int32 serviceAccountID) => GetClientServiceAccountAsync(connection, clientID, serviceAccountID, CancellationToken.None);
	public static async Task<List<GetClientServiceAccountRow>> GetClientServiceAccountAsync(SqlConnection connection, Int32 clientID, Int32 serviceAccountID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_ServiceAccount");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Service_Account_ID", serviceAccountID, SqlDbType.Int, 4));

		var result = new List<GetClientServiceAccountRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordServiceAccountID = reader.GetOrdinal("Service_Account_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordLoginCode = reader.GetOrdinal("Login_Code");
			int ordPassword = reader.GetOrdinal("Password");
			int ordMachineCode = reader.GetOrdinal("Machine_Code");
			int ordIsActive = reader.GetOrdinal("Is_Active");
			int ordLocalIPAddress = reader.GetOrdinal("Local_IP_Address");
			int ordSendingFilepath = reader.GetOrdinal("Sending_Filepath");
			int ordOSVersion = reader.GetOrdinal("OS_Version");
			int ordServiceVersion = reader.GetOrdinal("Service_Version");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");

			do
			{
				result.Add(new GetClientServiceAccountRow
				{
					ServiceAccountID = GetNonNullFieldValue<Int32>(reader, ordServiceAccountID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					LoginCode = GetNonNullField<String>(reader, ordLoginCode),
					Password = GetNonNullField<String>(reader, ordPassword),
					MachineCode = GetField<String>(reader, ordMachineCode),
					IsActive = GetNonNullFieldValue<Boolean>(reader, ordIsActive),
					LocalIPAddress = GetField<String>(reader, ordLocalIPAddress),
					SendingFilepath = GetField<String>(reader, ordSendingFilepath),
					OSVersion = GetField<String>(reader, ordOSVersion),
					ServiceVersion = GetField<String>(reader, ordServiceVersion),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientSettingsRow>> GetClientSettingsAsync(SqlConnection connection, Int32 clientID) => GetClientSettingsAsync(connection, clientID, CancellationToken.None);
	public static async Task<List<GetClientSettingsRow>> GetClientSettingsAsync(SqlConnection connection, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Settings");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetClientSettingsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordLabelPatientID = reader.GetOrdinal("Label_Patient_ID");
			int ordLabelPatientName = reader.GetOrdinal("Label_Patient_Name");
			int ordLabelGender = reader.GetOrdinal("Label_Gender");
			int ordLabelBirthdate = reader.GetOrdinal("Label_Birthdate");
			int ordLabelAppointmentDate = reader.GetOrdinal("Label_Appointment_Date");
			int ordLabelOrderNumber = reader.GetOrdinal("Label_Order_Number");
			int ordLabelUserField1 = reader.GetOrdinal("Label_User_Field_1");
			int ordLabelUserField2 = reader.GetOrdinal("Label_User_Field_2");
			int ordLabelUserField3 = reader.GetOrdinal("Label_User_Field_3");
			int ordLabelUserField4 = reader.GetOrdinal("Label_User_Field_4");
			int ordLabelUserField5 = reader.GetOrdinal("Label_User_Field_5");
			int ordLabelPatientLetter = reader.GetOrdinal("Label_Patient_Letter");
			int ordLabelDictator = reader.GetOrdinal("Label_Dictator");
			int ordLabelPreliminary = reader.GetOrdinal("Label_Preliminary");
			int ordCompleteLabelFinal = reader.GetOrdinal("Complete_Label_Final");
			int ordCompleteLabelFinal2 = reader.GetOrdinal("Complete_Label_Final_2");
			int ordCompleteLabelPreliminary = reader.GetOrdinal("Complete_Label_Preliminary");
			int ordCompleteLabelReferral = reader.GetOrdinal("Complete_Label_Referral");
			int ordCompleteLabelReview = reader.GetOrdinal("Complete_Label_Review");
			int ordCompleteLabelReview2 = reader.GetOrdinal("Complete_Label_Review_2");
			int ordCompleteLabelPreliminaryNoESign = reader.GetOrdinal("Complete_Label_Preliminary_NoESign");
			int ordCanSaveMobilePassword = reader.GetOrdinal("Can_Save_Mobile_Password");
			int ordCanSaveInSyncPassword = reader.GetOrdinal("Can_Save_InSync_Password");
			int ordPreferredContentTypeID = reader.GetOrdinal("Preferred_Content_Type_ID");
			int ordIsBenchmarkKBEnabled = reader.GetOrdinal("Is_BenchmarkKB_Enabled");
			int ordSetPatientsProperCase = reader.GetOrdinal("Set_Patients_Proper_Case");
			int ordMapLocations = reader.GetOrdinal("Map_Locations");
			int ordTruncateZeroFields = reader.GetOrdinal("Truncate_Zero_Fields");
			int ordPatientNameFormat = reader.GetOrdinal("Patient_Name_Format");
			int ordDictationFilepath = reader.GetOrdinal("Dictation_Filepath");
			int ordClientName = reader.GetOrdinal("Client_Name");
			int ordDictationFilepathBackup = reader.GetOrdinal("Dictation_Filepath_Backup");
			int ordUseProblemList = reader.GetOrdinal("Use_Problem_List");
			int ordLabelPatient = reader.GetOrdinal("Label_Patient");
			int ordLabelPatients = reader.GetOrdinal("Label_Patients");
			int ordClientWorkflowTypeID = reader.GetOrdinal("Client_Workflow_Type_ID");
			int ordShowCommentOnCopy = reader.GetOrdinal("Show_Comment_On_Copy");
			int ordLabelAccountNumber = reader.GetOrdinal("Label_Account_Number");
			int ordLabelAdmitDate = reader.GetOrdinal("Label_Admit_Date");
			int ordLabelDischargeDate = reader.GetOrdinal("Label_Discharge_Date");
			int ordLabelPatientClass = reader.GetOrdinal("Label_Patient_Class");
			int ordLabelPatientType = reader.GetOrdinal("Label_Patient_Type");
			int ordLabelFloor = reader.GetOrdinal("Label_Floor");
			int ordLabelBed = reader.GetOrdinal("Label_Bed");
			int ordLabelOrders = reader.GetOrdinal("Label_Orders");
			int ordLabelOrdersOrderNumber = reader.GetOrdinal("Label_Orders_Order_Number");
			int ordLabelOrderDescription = reader.GetOrdinal("Label_Order_Description");
			int ordLabelAppointments = reader.GetOrdinal("Label_Appointments");
			int ordLabelAppointment = reader.GetOrdinal("Label_Appointment");
			int ordLabelOrder = reader.GetOrdinal("Label_Order");
			int ordCanSaveInSyncDictations = reader.GetOrdinal("Can_Save_InSync_Dictations");
			int ordDefaultDocumentTypeID = reader.GetOrdinal("Default_Document_Type_ID");
			int ordDefaultLocationID = reader.GetOrdinal("Default_Location_ID");
			int ordEmailTokenExpirationMinutes = reader.GetOrdinal("Email_Token_Expiration_Minutes");
			int ordMatchDocumentTypeOnAppend = reader.GetOrdinal("Match_Document_Type_On_Append");
			int ordFolderSearch = reader.GetOrdinal("Folder_Search");
			int ordCanAccessCodingMessages = reader.GetOrdinal("Can_Access_Coding_Messages");

			do
			{
				result.Add(new GetClientSettingsRow
				{
					LabelPatientID = GetField<String>(reader, ordLabelPatientID),
					LabelPatientName = GetField<String>(reader, ordLabelPatientName),
					LabelGender = GetField<String>(reader, ordLabelGender),
					LabelBirthdate = GetField<String>(reader, ordLabelBirthdate),
					LabelAppointmentDate = GetField<String>(reader, ordLabelAppointmentDate),
					LabelOrderNumber = GetField<String>(reader, ordLabelOrderNumber),
					LabelUserField1 = GetField<String>(reader, ordLabelUserField1),
					LabelUserField2 = GetField<String>(reader, ordLabelUserField2),
					LabelUserField3 = GetField<String>(reader, ordLabelUserField3),
					LabelUserField4 = GetField<String>(reader, ordLabelUserField4),
					LabelUserField5 = GetField<String>(reader, ordLabelUserField5),
					LabelPatientLetter = GetField<String>(reader, ordLabelPatientLetter),
					LabelDictator = GetField<String>(reader, ordLabelDictator),
					LabelPreliminary = GetNonNullField<String>(reader, ordLabelPreliminary),
					CompleteLabelFinal = GetNonNullField<String>(reader, ordCompleteLabelFinal),
					CompleteLabelFinal2 = GetNonNullField<String>(reader, ordCompleteLabelFinal2),
					CompleteLabelPreliminary = GetNonNullField<String>(reader, ordCompleteLabelPreliminary),
					CompleteLabelReferral = GetNonNullField<String>(reader, ordCompleteLabelReferral),
					CompleteLabelReview = GetNonNullField<String>(reader, ordCompleteLabelReview),
					CompleteLabelReview2 = GetNonNullField<String>(reader, ordCompleteLabelReview2),
					CompleteLabelPreliminaryNoESign = GetNonNullField<String>(reader, ordCompleteLabelPreliminaryNoESign),
					CanSaveMobilePassword = GetNonNullFieldValue<Boolean>(reader, ordCanSaveMobilePassword),
					CanSaveInSyncPassword = GetNonNullFieldValue<Boolean>(reader, ordCanSaveInSyncPassword),
					PreferredContentTypeID = GetFieldValue<Int32>(reader, ordPreferredContentTypeID),
					IsBenchmarkKBEnabled = GetFieldValue<Boolean>(reader, ordIsBenchmarkKBEnabled),
					SetPatientsProperCase = GetNonNullFieldValue<Boolean>(reader, ordSetPatientsProperCase),
					MapLocations = GetNonNullFieldValue<Boolean>(reader, ordMapLocations),
					TruncateZeroFields = GetNonNullFieldValue<Int32>(reader, ordTruncateZeroFields),
					PatientNameFormat = GetFieldValue<Int32>(reader, ordPatientNameFormat),
					DictationFilepath = GetField<String>(reader, ordDictationFilepath),
					ClientName = GetNonNullField<String>(reader, ordClientName),
					DictationFilepathBackup = GetField<String>(reader, ordDictationFilepathBackup),
					UseProblemList = GetNonNullFieldValue<Boolean>(reader, ordUseProblemList),
					LabelPatient = GetField<String>(reader, ordLabelPatient),
					LabelPatients = GetField<String>(reader, ordLabelPatients),
					ClientWorkflowTypeID = GetNonNullFieldValue<Int32>(reader, ordClientWorkflowTypeID),
					ShowCommentOnCopy = GetNonNullFieldValue<Boolean>(reader, ordShowCommentOnCopy),
					LabelAccountNumber = GetField<String>(reader, ordLabelAccountNumber),
					LabelAdmitDate = GetField<String>(reader, ordLabelAdmitDate),
					LabelDischargeDate = GetField<String>(reader, ordLabelDischargeDate),
					LabelPatientClass = GetField<String>(reader, ordLabelPatientClass),
					LabelPatientType = GetField<String>(reader, ordLabelPatientType),
					LabelFloor = GetField<String>(reader, ordLabelFloor),
					LabelBed = GetField<String>(reader, ordLabelBed),
					LabelOrders = GetField<String>(reader, ordLabelOrders),
					LabelOrdersOrderNumber = GetField<String>(reader, ordLabelOrdersOrderNumber),
					LabelOrderDescription = GetField<String>(reader, ordLabelOrderDescription),
					LabelAppointments = GetField<String>(reader, ordLabelAppointments),
					LabelAppointment = GetField<String>(reader, ordLabelAppointment),
					LabelOrder = GetField<String>(reader, ordLabelOrder),
					CanSaveInSyncDictations = GetNonNullFieldValue<Boolean>(reader, ordCanSaveInSyncDictations),
					DefaultDocumentTypeID = GetNonNullFieldValue<Int32>(reader, ordDefaultDocumentTypeID),
					DefaultLocationID = GetFieldValue<Int32>(reader, ordDefaultLocationID),
					EmailTokenExpirationMinutes = GetNonNullFieldValue<Int32>(reader, ordEmailTokenExpirationMinutes),
					MatchDocumentTypeOnAppend = GetNonNullFieldValue<Boolean>(reader, ordMatchDocumentTypeOnAppend),
					FolderSearch = GetNonNullField<String>(reader, ordFolderSearch),
					CanAccessCodingMessages = GetNonNullFieldValue<Boolean>(reader, ordCanAccessCodingMessages),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientSupportInformationRow>> GetClientSupportInformationAsync(SqlConnection connection, Int32 clientID) => GetClientSupportInformationAsync(connection, clientID, CancellationToken.None);
	public static async Task<List<GetClientSupportInformationRow>> GetClientSupportInformationAsync(SqlConnection connection, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_SupportInformation");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetClientSupportInformationRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordClientName = reader.GetOrdinal("Client_Name");
			int ordLicenseID = reader.GetOrdinal("License_ID");
			int ordLicenseDescription = reader.GetOrdinal("License_Description");
			int ordHelpDeskPhone = reader.GetOrdinal("Help_Desk_Phone");
			int ordHelpDeskEMail = reader.GetOrdinal("Help_Desk_EMail");
			int ordInQuiryLogo = reader.GetOrdinal("InQuiry_Logo");
			int ordSystemName = reader.GetOrdinal("System_Name");
			int ordInSyncLogo = reader.GetOrdinal("InSync_Logo");
			int ordInScribeLogo = reader.GetOrdinal("InScribe_Logo");
			int ordHelpDeskURL = reader.GetOrdinal("Help_Desk_URL");
			int ordCompanyEmail = reader.GetOrdinal("Company_Email");
			int ordCompanyURL = reader.GetOrdinal("Company_URL");
			int ordInQuiryURL = reader.GetOrdinal("InQuiry_URL");
			int ordInQuiryHelpURL = reader.GetOrdinal("InQuiry_Help_URL");
			int ordInSyncHelpURL = reader.GetOrdinal("InSync_Help_URL");
			int ordInScribeHelpURL = reader.GetOrdinal("InScribe_Help_URL");
			int ordWelcomeURL = reader.GetOrdinal("Welcome_URL");
			int ordSoftwareURL = reader.GetOrdinal("Software_URL");
			int ordReportStyleOptions = reader.GetOrdinal("Report_Style_Options");
			int ordMobileInstructions = reader.GetOrdinal("Mobile_Instructions");
			int ordWebSiteURL = reader.GetOrdinal("Web_Site_URL");
			int ordEmailVerificationSubject = reader.GetOrdinal("Email_Verification_Subject");
			int ordEmailVerificationBodyTemplate = reader.GetOrdinal("Email_Verification_Body_Template");
			int ordEmailVerificationBodyFormat = reader.GetOrdinal("Email_Verification_Body_Format");
			int ordEmailResetSubject = reader.GetOrdinal("Email_Reset_Subject");
			int ordEmailResetBody = reader.GetOrdinal("Email_Reset_Body");
			int ordEmailResetBodyFormat = reader.GetOrdinal("Email_Reset_Body_Format");
			int ordEmailResetURLTemplate = reader.GetOrdinal("Email_Reset_URL_Template");
			int ordLicenseLogoURL = reader.GetOrdinal("License_Logo_URL");

			do
			{
				result.Add(new GetClientSupportInformationRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					ClientName = GetNonNullField<String>(reader, ordClientName),
					LicenseID = GetNonNullFieldValue<Int32>(reader, ordLicenseID),
					LicenseDescription = GetField<String>(reader, ordLicenseDescription),
					HelpDeskPhone = GetField<String>(reader, ordHelpDeskPhone),
					HelpDeskEMail = GetField<String>(reader, ordHelpDeskEMail),
					InQuiryLogo = GetField<String>(reader, ordInQuiryLogo),
					SystemName = GetField<String>(reader, ordSystemName),
					InSyncLogo = GetField<String>(reader, ordInSyncLogo),
					InScribeLogo = GetField<String>(reader, ordInScribeLogo),
					HelpDeskURL = GetField<String>(reader, ordHelpDeskURL),
					CompanyEmail = GetField<String>(reader, ordCompanyEmail),
					CompanyURL = GetField<String>(reader, ordCompanyURL),
					InQuiryURL = GetField<String>(reader, ordInQuiryURL),
					InQuiryHelpURL = GetField<String>(reader, ordInQuiryHelpURL),
					InSyncHelpURL = GetField<String>(reader, ordInSyncHelpURL),
					InScribeHelpURL = GetField<String>(reader, ordInScribeHelpURL),
					WelcomeURL = GetField<String>(reader, ordWelcomeURL),
					SoftwareURL = GetField<String>(reader, ordSoftwareURL),
					ReportStyleOptions = GetField<String>(reader, ordReportStyleOptions),
					MobileInstructions = GetField<String>(reader, ordMobileInstructions),
					WebSiteURL = GetField<String>(reader, ordWebSiteURL),
					EmailVerificationSubject = GetField<String>(reader, ordEmailVerificationSubject),
					EmailVerificationBodyTemplate = GetField<String>(reader, ordEmailVerificationBodyTemplate),
					EmailVerificationBodyFormat = GetFieldValue<Int32>(reader, ordEmailVerificationBodyFormat),
					EmailResetSubject = GetField<String>(reader, ordEmailResetSubject),
					EmailResetBody = GetField<String>(reader, ordEmailResetBody),
					EmailResetBodyFormat = GetFieldValue<Int32>(reader, ordEmailResetBodyFormat),
					EmailResetURLTemplate = GetField<String>(reader, ordEmailResetURLTemplate),
					LicenseLogoURL = GetField<String>(reader, ordLicenseLogoURL),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientTagsRow>> GetClientTagsAsync(SqlConnection connection, Int32 clientID) => GetClientTagsAsync(connection, clientID, CancellationToken.None);
	public static async Task<List<GetClientTagsRow>> GetClientTagsAsync(SqlConnection connection, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Tags");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetClientTagsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordTranscriptionTagID = reader.GetOrdinal("Transcription_Tag_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordColor = reader.GetOrdinal("Color");
			int ordIsActive = reader.GetOrdinal("Is_Active");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetClientTagsRow
				{
					CompanyID = GetNonNullFieldValue<Int32>(reader, ordCompanyID),
					TranscriptionTagID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionTagID),
					Name = GetField<String>(reader, ordName),
					Color = GetField<String>(reader, ordColor),
					IsActive = GetNonNullFieldValue<Boolean>(reader, ordIsActive),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientTimeZoneIdentifierRow>> GetClientTimeZoneIdentifierAsync(SqlConnection connection, Int32 clientID) => GetClientTimeZoneIdentifierAsync(connection, clientID, CancellationToken.None);
	public static async Task<List<GetClientTimeZoneIdentifierRow>> GetClientTimeZoneIdentifierAsync(SqlConnection connection, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_TimeZone_Identifier");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetClientTimeZoneIdentifierRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordIdentifier = reader.GetOrdinal("Identifier");

			do
			{
				result.Add(new GetClientTimeZoneIdentifierRow
				{
					Identifier = GetField<String>(reader, ordIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientTranscriptionASRStylesheetRow>> GetClientTranscriptionASRStylesheetAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID) => GetClientTranscriptionASRStylesheetAsync(connection, clientID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetClientTranscriptionASRStylesheetRow>> GetClientTranscriptionASRStylesheetAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Transcription_ASRStylesheet");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetClientTranscriptionASRStylesheetRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordXSLStyleSheetPath = reader.GetOrdinal("XSLStyleSheetPath");
			int ordIsCDSOnly = reader.GetOrdinal("Is_CDS_Only");

			do
			{
				result.Add(new GetClientTranscriptionASRStylesheetRow
				{
					XSLStyleSheetPath = GetField<String>(reader, ordXSLStyleSheetPath),
					IsCDSOnly = GetFieldValue<Boolean>(reader, ordIsCDSOnly),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientTranscriptionDictationFilePathByTIDRow>> GetClientTranscriptionDictationFilePathByTIDAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID, Int32 userId, String userType) => GetClientTranscriptionDictationFilePathByTIDAsync(connection, clientID, transcriptionID, userId, userType, CancellationToken.None);
	public static async Task<List<GetClientTranscriptionDictationFilePathByTIDRow>> GetClientTranscriptionDictationFilePathByTIDAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID, Int32 userId, String userType, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Transcription_Dictation_FilePath_ByTID");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_Id", userId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_Type", userType, SqlDbType.Char, 1));

		var result = new List<GetClientTranscriptionDictationFilePathByTIDRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordDictationPath = reader.GetOrdinal("DictationPath");

			do
			{
				result.Add(new GetClientTranscriptionDictationFilePathByTIDRow
				{
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					TranscriptionID = GetFieldValue<Int32>(reader, ordTranscriptionID),
					DictationID = GetFieldValue<Int32>(reader, ordDictationID),
					DictationPath = GetField<String>(reader, ordDictationPath),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientTranscriptionDictationFiles2Row>> GetClientTranscriptionDictationFiles2Async(SqlConnection connection, Int32 clientID, Int32 transcriptionID) => GetClientTranscriptionDictationFiles2Async(connection, clientID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetClientTranscriptionDictationFiles2Row>> GetClientTranscriptionDictationFiles2Async(SqlConnection connection, Int32 clientID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Transcription_Dictation_Files2");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetClientTranscriptionDictationFiles2Row>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordOriginalTranscriptionID = reader.GetOrdinal("Original_Transcription_ID");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordDictationFileTypeID = reader.GetOrdinal("Dictation_File_Type_ID");
			int ordDictationFormatID = reader.GetOrdinal("Dictation_Format_ID");
			int ordUri = reader.GetOrdinal("Uri");
			int ordCloudStorageAccountID = reader.GetOrdinal("Cloud_Storage_Account_ID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordCloudDirectoryID = reader.GetOrdinal("Cloud_Directory_ID");
			int ordResource = reader.GetOrdinal("Resource");
			int ordIsEncrypted = reader.GetOrdinal("Is_Encrypted");

			do
			{
				result.Add(new GetClientTranscriptionDictationFiles2Row
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					OriginalTranscriptionID = GetNonNullFieldValue<Int32>(reader, ordOriginalTranscriptionID),
					DictationID = GetNonNullFieldValue<Int32>(reader, ordDictationID),
					DictationFileTypeID = GetNonNullFieldValue<Int32>(reader, ordDictationFileTypeID),
					DictationFormatID = GetFieldValue<Int32>(reader, ordDictationFormatID),
					Uri = GetNonNullField<String>(reader, ordUri),
					CloudStorageAccountID = GetNonNullFieldValue<Int32>(reader, ordCloudStorageAccountID),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					CloudDirectoryID = GetNonNullFieldValue<Int32>(reader, ordCloudDirectoryID),
					Resource = GetNonNullField<String>(reader, ordResource),
					IsEncrypted = GetNonNullFieldValue<Boolean>(reader, ordIsEncrypted),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientTranscriptionDictationPathsRow>> GetClientTranscriptionDictationPathsAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID) => GetClientTranscriptionDictationPathsAsync(connection, clientID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetClientTranscriptionDictationPathsRow>> GetClientTranscriptionDictationPathsAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Transcription_Dictation_Paths");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetClientTranscriptionDictationPathsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordDictationFileTypeID = reader.GetOrdinal("Dictation_File_Type_ID");
			int ordPath = reader.GetOrdinal("Path");
			int ordIsOriginal = reader.GetOrdinal("Is_Original");
			int ordIsEncrypted = reader.GetOrdinal("Is_Encrypted");

			do
			{
				result.Add(new GetClientTranscriptionDictationPathsRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					DictationID = GetNonNullFieldValue<Int32>(reader, ordDictationID),
					DictationFileTypeID = GetNonNullFieldValue<Int32>(reader, ordDictationFileTypeID),
					Path = GetNonNullField<String>(reader, ordPath),
					IsOriginal = GetNonNullFieldValue<Int32>(reader, ordIsOriginal),
					IsEncrypted = GetNonNullFieldValue<Boolean>(reader, ordIsEncrypted),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientTranscriptionDictationPaths2Row>> GetClientTranscriptionDictationPaths2Async(SqlConnection connection, Int32 clientID, Int32 transcriptionID) => GetClientTranscriptionDictationPaths2Async(connection, clientID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetClientTranscriptionDictationPaths2Row>> GetClientTranscriptionDictationPaths2Async(SqlConnection connection, Int32 clientID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Transcription_Dictation_Paths2");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetClientTranscriptionDictationPaths2Row>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordDictationFileTypeID = reader.GetOrdinal("Dictation_File_Type_ID");
			int ordDictationFormatID = reader.GetOrdinal("Dictation_Format_ID");
			int ordUri = reader.GetOrdinal("Uri");
			int ordCloudStorageAccountID = reader.GetOrdinal("Cloud_Storage_Account_ID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordCloudDirectoryID = reader.GetOrdinal("Cloud_Directory_ID");
			int ordResource = reader.GetOrdinal("Resource");
			int ordIsEncrypted = reader.GetOrdinal("Is_Encrypted");

			do
			{
				result.Add(new GetClientTranscriptionDictationPaths2Row
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					DictationID = GetNonNullFieldValue<Int32>(reader, ordDictationID),
					DictationFileTypeID = GetNonNullFieldValue<Int32>(reader, ordDictationFileTypeID),
					DictationFormatID = GetFieldValue<Int32>(reader, ordDictationFormatID),
					Uri = GetNonNullField<String>(reader, ordUri),
					CloudStorageAccountID = GetNonNullFieldValue<Int32>(reader, ordCloudStorageAccountID),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					CloudDirectoryID = GetNonNullFieldValue<Int32>(reader, ordCloudDirectoryID),
					Resource = GetNonNullField<String>(reader, ordResource),
					IsEncrypted = GetNonNullFieldValue<Boolean>(reader, ordIsEncrypted),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientTranscriptionDictationRecordsRow>> GetClientTranscriptionDictationRecordsAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID) => GetClientTranscriptionDictationRecordsAsync(connection, clientID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetClientTranscriptionDictationRecordsRow>> GetClientTranscriptionDictationRecordsAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Transcription_Dictation_Records");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetClientTranscriptionDictationRecordsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordDictationFileTypeID = reader.GetOrdinal("Dictation_File_Type_ID");
			int ordPath = reader.GetOrdinal("Path");
			int ordIsOriginal = reader.GetOrdinal("Is_Original");
			int ordIsEncrypted = reader.GetOrdinal("Is_Encrypted");

			do
			{
				result.Add(new GetClientTranscriptionDictationRecordsRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					DictationID = GetNonNullFieldValue<Int32>(reader, ordDictationID),
					DictationFileTypeID = GetNonNullFieldValue<Int32>(reader, ordDictationFileTypeID),
					Path = GetNonNullField<String>(reader, ordPath),
					IsOriginal = GetNonNullFieldValue<Int32>(reader, ordIsOriginal),
					IsEncrypted = GetNonNullFieldValue<Boolean>(reader, ordIsEncrypted),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientTranscriptionDictationFilePathRow>> GetClientTranscriptionDictationFilePathAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID) => GetClientTranscriptionDictationFilePathAsync(connection, clientID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetClientTranscriptionDictationFilePathRow>> GetClientTranscriptionDictationFilePathAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Transcription_DictationFilePath");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetClientTranscriptionDictationFilePathRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordTranscriptionDictationPath = reader.GetOrdinal("Transcription_DictationPath");

			do
			{
				result.Add(new GetClientTranscriptionDictationFilePathRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					TranscriptionDictationPath = GetField<String>(reader, ordTranscriptionDictationPath),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientTranscriptionDictationsByPatientIDRow>> GetClientTranscriptionDictationsByPatientIDAsync(SqlConnection connection, Int32 clientId, String patientID) => GetClientTranscriptionDictationsByPatientIDAsync(connection, clientId, patientID, CancellationToken.None);
	public static async Task<List<GetClientTranscriptionDictationsByPatientIDRow>> GetClientTranscriptionDictationsByPatientIDAsync(SqlConnection connection, Int32 clientId, String patientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Transcription_Dictations_ByPatientID");

		cmd.Parameters.Add(CreateParameter("@Client_Id", clientId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.Char, 20));

		var result = new List<GetClientTranscriptionDictationsByPatientIDRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordIsStat = reader.GetOrdinal("Is_Stat");
			int ordSourceMachineName = reader.GetOrdinal("Source_Machine_Name");
			int ordLength = reader.GetOrdinal("Length");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordPatientId = reader.GetOrdinal("Patient_Id");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordReceiptCode = reader.GetOrdinal("Receipt_Code");

			do
			{
				result.Add(new GetClientTranscriptionDictationsByPatientIDRow
				{
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					DictationID = GetFieldValue<Int32>(reader, ordDictationID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					IsStat = GetFieldValue<Boolean>(reader, ordIsStat),
					SourceMachineName = GetField<String>(reader, ordSourceMachineName),
					Length = GetFieldValue<Int32>(reader, ordLength),
					DateDictated = GetFieldValue<DateTimeOffset>(reader, ordDateDictated),
					PatientId = GetField<String>(reader, ordPatientId),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					ReceiptCode = GetField<String>(reader, ordReceiptCode),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientTranscriptionOptionalVariablesRow>> GetClientTranscriptionOptionalVariablesAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID) => GetClientTranscriptionOptionalVariablesAsync(connection, clientID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetClientTranscriptionOptionalVariablesRow>> GetClientTranscriptionOptionalVariablesAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Transcription_OptionalVariables");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetClientTranscriptionOptionalVariablesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordFieldName = reader.GetOrdinal("Field_Name");
			int ordFieldValue = reader.GetOrdinal("Field_Value");

			do
			{
				result.Add(new GetClientTranscriptionOptionalVariablesRow
				{
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					FieldName = GetNonNullField<String>(reader, ordFieldName),
					FieldValue = GetField<String>(reader, ordFieldValue),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientTranscriptionPatientOrdersRow>> GetClientTranscriptionPatientOrdersAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID) => GetClientTranscriptionPatientOrdersAsync(connection, clientID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetClientTranscriptionPatientOrdersRow>> GetClientTranscriptionPatientOrdersAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Transcription_PatientOrders");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetClientTranscriptionPatientOrdersRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionOrderID = reader.GetOrdinal("Transcription_Order_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordOrderID = reader.GetOrdinal("Order_ID");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordAppointmentID = reader.GetOrdinal("Appointment_ID");
			int ordAccountNumber = reader.GetOrdinal("Account_Number");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordAccessionNumber = reader.GetOrdinal("Accession_Number");
			int ordOrderStatusCode = reader.GetOrdinal("Order_Status_Code");
			int ordDateObserved = reader.GetOrdinal("Date_Observed");
			int ordDateRequested = reader.GetOrdinal("Date_Requested");
			int ordItemCode = reader.GetOrdinal("Item_Code");
			int ordDescription = reader.GetOrdinal("Description");
			int ordNotes = reader.GetOrdinal("Notes");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordOrderingPhysicianName = reader.GetOrdinal("Ordering_Physician_Name");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");

			do
			{
				result.Add(new GetClientTranscriptionPatientOrdersRow
				{
					TranscriptionOrderID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionOrderID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					OrderID = GetFieldValue<Guid>(reader, ordOrderID),
					PatientID = GetNonNullField<String>(reader, ordPatientID),
					AppointmentID = GetFieldValue<Guid>(reader, ordAppointmentID),
					AccountNumber = GetField<String>(reader, ordAccountNumber),
					OrderNumber = GetNonNullField<String>(reader, ordOrderNumber),
					AccessionNumber = GetField<String>(reader, ordAccessionNumber),
					OrderStatusCode = GetField<String>(reader, ordOrderStatusCode),
					DateObserved = GetFieldValue<DateTime>(reader, ordDateObserved),
					DateRequested = GetFieldValue<DateTime>(reader, ordDateRequested),
					ItemCode = GetField<String>(reader, ordItemCode),
					Description = GetField<String>(reader, ordDescription),
					Notes = GetField<String>(reader, ordNotes),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
					OrderingPhysicianName = GetField<String>(reader, ordOrderingPhysicianName),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientTranscriptionTagsRow>> GetClientTranscriptionTagsAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID) => GetClientTranscriptionTagsAsync(connection, clientID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetClientTranscriptionTagsRow>> GetClientTranscriptionTagsAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Transcription_Tags");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetClientTranscriptionTagsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionTagID = reader.GetOrdinal("Transcription_Tag_ID");
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordColor = reader.GetOrdinal("Color");
			int ordIsActive = reader.GetOrdinal("Is_Active");

			do
			{
				result.Add(new GetClientTranscriptionTagsRow
				{
					TranscriptionTagID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionTagID),
					CompanyID = GetNonNullFieldValue<Int32>(reader, ordCompanyID),
					Name = GetField<String>(reader, ordName),
					Color = GetField<String>(reader, ordColor),
					IsActive = GetNonNullFieldValue<Boolean>(reader, ordIsActive),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserRow>> GetClientUserAsync(SqlConnection connection, Int32 clientID, Int32 userID) => GetClientUserAsync(connection, clientID, userID, CancellationToken.None);
	public static async Task<List<GetClientUserRow>> GetClientUserAsync(SqlConnection connection, Int32 clientID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetClientUserRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserUsername = reader.GetOrdinal("User_Username");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordUserNameLast = reader.GetOrdinal("User_Name_Last");
			int ordUserNameFirst = reader.GetOrdinal("User_Name_First");
			int ordUserActive = reader.GetOrdinal("User_Active");
			int ordDocumentTypeGroupMask = reader.GetOrdinal("DocumentTypeGroup_Mask");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordClientCode = reader.GetOrdinal("Client Code");
			int ordUserEmail = reader.GetOrdinal("User_Email");
			int ordPasswordHashAlgorithmID = reader.GetOrdinal("Password_Hash_Algorithm_ID");
			int ordPasswordSalt = reader.GetOrdinal("Password_Salt");
			int ordPasswordHash = reader.GetOrdinal("Password_Hash");
			int ordPasswordModifiedDate = reader.GetOrdinal("PasswordModifiedDate");

			do
			{
				result.Add(new GetClientUserRow
				{
					UserUsername = GetField<String>(reader, ordUserUsername),
					UserFullname = GetField<String>(reader, ordUserFullname),
					UserNameLast = GetField<String>(reader, ordUserNameLast),
					UserNameFirst = GetField<String>(reader, ordUserNameFirst),
					UserActive = GetNonNullFieldValue<Boolean>(reader, ordUserActive),
					DocumentTypeGroupMask = GetFieldValue<Int32>(reader, ordDocumentTypeGroupMask),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					DictationID = GetField<String>(reader, ordDictationID),
					ClientCode = GetField<String>(reader, ordClientCode),
					UserEmail = GetField<String>(reader, ordUserEmail),
					PasswordHashAlgorithmID = GetFieldValue<Int32>(reader, ordPasswordHashAlgorithmID),
					PasswordSalt = GetField<Byte[]>(reader, ordPasswordSalt),
					PasswordHash = GetField<Byte[]>(reader, ordPasswordHash),
					PasswordModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordPasswordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserAppointmentRow>> GetClientUserAppointmentAsync(SqlConnection connection, Int32 clientID, Int32 userID, Guid appointmentID) => GetClientUserAppointmentAsync(connection, clientID, userID, appointmentID, CancellationToken.None);
	public static async Task<List<GetClientUserAppointmentRow>> GetClientUserAppointmentAsync(SqlConnection connection, Int32 clientID, Int32 userID, Guid appointmentID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Appointment");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Appointment_ID", appointmentID, SqlDbType.UniqueIdentifier, 16));

		var result = new List<GetClientUserAppointmentRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordAppointmentID = reader.GetOrdinal("Appointment_ID");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordPhysician = reader.GetOrdinal("Physician");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordApptUserField1 = reader.GetOrdinal("Appt_User_Field_1");
			int ordApptUserField2 = reader.GetOrdinal("Appt_User_Field_2");
			int ordApptUserField3 = reader.GetOrdinal("Appt_User_Field_3");
			int ordApptUserField4 = reader.GetOrdinal("Appt_User_Field_4");
			int ordApptUserField5 = reader.GetOrdinal("Appt_User_Field_5");
			int ordPatientFullName = reader.GetOrdinal("Patient_Full_Name");
			int ordPatientNameLast = reader.GetOrdinal("Patient_Name_Last");
			int ordPatientNameFirst = reader.GetOrdinal("Patient_Name_First");
			int ordPatientNameMiddle = reader.GetOrdinal("Patient_Name_Middle");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");

			do
			{
				result.Add(new GetClientUserAppointmentRow
				{
					AppointmentID = GetNonNullFieldValue<Guid>(reader, ordAppointmentID),
					PatientID = GetNonNullField<String>(reader, ordPatientID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					LocationID = GetNonNullFieldValue<Int32>(reader, ordLocationID),
					Physician = GetNonNullField<String>(reader, ordPhysician),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					ApptUserField1 = GetField<String>(reader, ordApptUserField1),
					ApptUserField2 = GetField<String>(reader, ordApptUserField2),
					ApptUserField3 = GetField<String>(reader, ordApptUserField3),
					ApptUserField4 = GetField<String>(reader, ordApptUserField4),
					ApptUserField5 = GetField<String>(reader, ordApptUserField5),
					PatientFullName = GetField<String>(reader, ordPatientFullName),
					PatientNameLast = GetField<String>(reader, ordPatientNameLast),
					PatientNameFirst = GetField<String>(reader, ordPatientNameFirst),
					PatientNameMiddle = GetField<String>(reader, ordPatientNameMiddle),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserAppointmentsRow>> GetClientUserAppointmentsAsync(SqlConnection connection, Int32 clientID, Int32 userID, DateTime startDate, DateTime endDate, DateTime prevApptDate, DateTime nextApptDate) => GetClientUserAppointmentsAsync(connection, clientID, userID, startDate, endDate, prevApptDate, nextApptDate, CancellationToken.None);
	public static async Task<List<GetClientUserAppointmentsRow>> GetClientUserAppointmentsAsync(SqlConnection connection, Int32 clientID, Int32 userID, DateTime startDate, DateTime endDate, DateTime prevApptDate, DateTime nextApptDate, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Appointments");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Start_Date", startDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@End_Date", endDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@PrevApptDate", prevApptDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@NextApptDate", nextApptDate, SqlDbType.DateTime, 8));

		var result = new List<GetClientUserAppointmentsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordAppointmentID = reader.GetOrdinal("Appointment_ID");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordPhysician = reader.GetOrdinal("Physician");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordApptUserField1 = reader.GetOrdinal("Appt_User_Field_1");
			int ordApptUserField2 = reader.GetOrdinal("Appt_User_Field_2");
			int ordApptUserField3 = reader.GetOrdinal("Appt_User_Field_3");
			int ordApptUserField4 = reader.GetOrdinal("Appt_User_Field_4");
			int ordApptUserField5 = reader.GetOrdinal("Appt_User_Field_5");
			int ordPatientFullName = reader.GetOrdinal("Patient_Full_Name");
			int ordPatientNameLast = reader.GetOrdinal("Patient_Name_Last");
			int ordPatientNameFirst = reader.GetOrdinal("Patient_Name_First");
			int ordPatientNameMiddle = reader.GetOrdinal("Patient_Name_Middle");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordHasDictation = reader.GetOrdinal("Has_Dictation");
			int ordSchedulingResourceID = reader.GetOrdinal("Scheduling_Resource_ID");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");

			do
			{
				result.Add(new GetClientUserAppointmentsRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					AppointmentID = GetNonNullFieldValue<Guid>(reader, ordAppointmentID),
					PatientID = GetNonNullField<String>(reader, ordPatientID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					LocationID = GetNonNullFieldValue<Int32>(reader, ordLocationID),
					Physician = GetNonNullField<String>(reader, ordPhysician),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					ApptUserField1 = GetField<String>(reader, ordApptUserField1),
					ApptUserField2 = GetField<String>(reader, ordApptUserField2),
					ApptUserField3 = GetField<String>(reader, ordApptUserField3),
					ApptUserField4 = GetField<String>(reader, ordApptUserField4),
					ApptUserField5 = GetField<String>(reader, ordApptUserField5),
					PatientFullName = GetField<String>(reader, ordPatientFullName),
					PatientNameLast = GetField<String>(reader, ordPatientNameLast),
					PatientNameFirst = GetField<String>(reader, ordPatientNameFirst),
					PatientNameMiddle = GetField<String>(reader, ordPatientNameMiddle),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					HasDictation = GetFieldValue<Boolean>(reader, ordHasDictation),
					SchedulingResourceID = GetFieldValue<Int32>(reader, ordSchedulingResourceID),
					DictationID = GetField<String>(reader, ordDictationID),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserAttestationTemplatesRow>> GetClientUserAttestationTemplatesAsync(SqlConnection connection, Int32 clientID, Int32 userID) => GetClientUserAttestationTemplatesAsync(connection, clientID, userID, CancellationToken.None);
	public static async Task<List<GetClientUserAttestationTemplatesRow>> GetClientUserAttestationTemplatesAsync(SqlConnection connection, Int32 clientID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_AttestationTemplates");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetClientUserAttestationTemplatesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTemplateID = reader.GetOrdinal("Template_ID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordDictationCode = reader.GetOrdinal("Dictation_Code");

			do
			{
				result.Add(new GetClientUserAttestationTemplatesRow
				{
					TemplateID = GetNonNullFieldValue<Int32>(reader, ordTemplateID),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					DictationCode = GetNonNullField<String>(reader, ordDictationCode),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserAuthenticatorsRow>> GetClientUserAuthenticatorsAsync(SqlConnection connection, Int32 clientID, Int32 userID) => GetClientUserAuthenticatorsAsync(connection, clientID, userID, CancellationToken.None);
	public static async Task<List<GetClientUserAuthenticatorsRow>> GetClientUserAuthenticatorsAsync(SqlConnection connection, Int32 clientID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Authenticators");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetClientUserAuthenticatorsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordDisplayName = reader.GetOrdinal("Display_Name");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetClientUserAuthenticatorsRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
					UserFullname = GetField<String>(reader, ordUserFullname),
					DisplayName = GetField<String>(reader, ordDisplayName),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserAuthorGroupsRow>> GetClientUserAuthorGroupsAsync(SqlConnection connection, Int32 clientID, Int32 userID) => GetClientUserAuthorGroupsAsync(connection, clientID, userID, CancellationToken.None);
	public static async Task<List<GetClientUserAuthorGroupsRow>> GetClientUserAuthorGroupsAsync(SqlConnection connection, Int32 clientID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_AuthorGroups");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetClientUserAuthorGroupsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordAuthorGroupID = reader.GetOrdinal("Author_Group_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordDescription = reader.GetOrdinal("Description");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");

			do
			{
				result.Add(new GetClientUserAuthorGroupsRow
				{
					AuthorGroupID = GetNonNullFieldValue<Int32>(reader, ordAuthorGroupID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					Name = GetNonNullField<String>(reader, ordName),
					Description = GetField<String>(reader, ordDescription),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserAuthorGroupsEnrolledRow>> GetClientUserAuthorGroupsEnrolledAsync(SqlConnection connection, Int32 clientID, Int32 userID) => GetClientUserAuthorGroupsEnrolledAsync(connection, clientID, userID, CancellationToken.None);
	public static async Task<List<GetClientUserAuthorGroupsEnrolledRow>> GetClientUserAuthorGroupsEnrolledAsync(SqlConnection connection, Int32 clientID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_AuthorGroups_Enrolled");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetClientUserAuthorGroupsEnrolledRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordAuthorGroupID = reader.GetOrdinal("Author_Group_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordDescription = reader.GetOrdinal("Description");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordEnrollmentModifiedUser = reader.GetOrdinal("Enrollment_Modified_User");
			int ordEnrollmentModifiedDate = reader.GetOrdinal("Enrollment_Modified_Date");

			do
			{
				result.Add(new GetClientUserAuthorGroupsEnrolledRow
				{
					AuthorGroupID = GetNonNullFieldValue<Int32>(reader, ordAuthorGroupID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					Name = GetNonNullField<String>(reader, ordName),
					Description = GetField<String>(reader, ordDescription),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
					EnrollmentModifiedUser = GetField<String>(reader, ordEnrollmentModifiedUser),
					EnrollmentModifiedDate = GetFieldValue<DateTime>(reader, ordEnrollmentModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserByUsernameAndCodeRow>> GetClientUserByUsernameAndCodeAsync(SqlConnection connection, String clientCode, String username) => GetClientUserByUsernameAndCodeAsync(connection, clientCode, username, CancellationToken.None);
	public static async Task<List<GetClientUserByUsernameAndCodeRow>> GetClientUserByUsernameAndCodeAsync(SqlConnection connection, String clientCode, String username, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_ByUsernameAndCode");

		cmd.Parameters.Add(CreateParameter("@Client_Code", clientCode, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Username", username, SqlDbType.VarChar, 26));

		var result = new List<GetClientUserByUsernameAndCodeRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserUsername = reader.GetOrdinal("User_Username");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordUserNameLast = reader.GetOrdinal("User_Name_Last");
			int ordUserNameFirst = reader.GetOrdinal("User_Name_First");
			int ordUserActive = reader.GetOrdinal("User_Active");
			int ordDocumentTypeGroupMask = reader.GetOrdinal("DocumentTypeGroup_Mask");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordClientCode = reader.GetOrdinal("Client Code");
			int ordUserEmail = reader.GetOrdinal("User_Email");
			int ordPasswordHashAlgorithmID = reader.GetOrdinal("Password_Hash_Algorithm_ID");
			int ordPasswordSalt = reader.GetOrdinal("Password_Salt");
			int ordPasswordHash = reader.GetOrdinal("Password_Hash");
			int ordPasswordModifiedDate = reader.GetOrdinal("PasswordModifiedDate");

			do
			{
				result.Add(new GetClientUserByUsernameAndCodeRow
				{
					UserUsername = GetField<String>(reader, ordUserUsername),
					UserFullname = GetField<String>(reader, ordUserFullname),
					UserNameLast = GetField<String>(reader, ordUserNameLast),
					UserNameFirst = GetField<String>(reader, ordUserNameFirst),
					UserActive = GetNonNullFieldValue<Boolean>(reader, ordUserActive),
					DocumentTypeGroupMask = GetFieldValue<Int32>(reader, ordDocumentTypeGroupMask),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					DictationID = GetField<String>(reader, ordDictationID),
					ClientCode = GetField<String>(reader, ordClientCode),
					UserEmail = GetField<String>(reader, ordUserEmail),
					PasswordHashAlgorithmID = GetFieldValue<Int32>(reader, ordPasswordHashAlgorithmID),
					PasswordSalt = GetField<Byte[]>(reader, ordPasswordSalt),
					PasswordHash = GetField<Byte[]>(reader, ordPasswordHash),
					PasswordModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordPasswordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserContactInfoRow>> GetClientUserContactInfoAsync(SqlConnection connection, Int32 clientID, Int32 userID) => GetClientUserContactInfoAsync(connection, clientID, userID, CancellationToken.None);
	public static async Task<List<GetClientUserContactInfoRow>> GetClientUserContactInfoAsync(SqlConnection connection, Int32 clientID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_ContactInfo");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetClientUserContactInfoRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserEmail = reader.GetOrdinal("User_Email");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");

			do
			{
				result.Add(new GetClientUserContactInfoRow
				{
					UserEmail = GetField<String>(reader, ordUserEmail),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserDictationTemplatesRow>> GetClientUserDictationTemplatesAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Boolean isShadowScribe) => GetClientUserDictationTemplatesAsync(connection, clientID, userID, documentID, locationID, isShadowScribe, CancellationToken.None);
	public static async Task<List<GetClientUserDictationTemplatesRow>> GetClientUserDictationTemplatesAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Boolean isShadowScribe, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_DictationTemplates");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@IsShadowScribe", isShadowScribe, SqlDbType.Bit, 1));

		var result = new List<GetClientUserDictationTemplatesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTemplateID = reader.GetOrdinal("Template_ID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordDictationCode = reader.GetOrdinal("Dictation_Code");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordMTNotes = reader.GetOrdinal("MT_Notes");
			int ordCanDismiss = reader.GetOrdinal("Can_Dismiss");
			int ordVisibleCharacters = reader.GetOrdinal("Visible_Characters");
			int ordNonVisibleCharacters = reader.GetOrdinal("NonVisible_Characters");
			int ordTemplateVisibleCharacters = reader.GetOrdinal("Template_Visible_Characters");
			int ordTemplateNonVisibleCharacters = reader.GetOrdinal("Template_NonVisible_Characters");

			do
			{
				result.Add(new GetClientUserDictationTemplatesRow
				{
					TemplateID = GetNonNullFieldValue<Int32>(reader, ordTemplateID),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					DictationCode = GetNonNullField<String>(reader, ordDictationCode),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
					DocumentID = GetNonNullFieldValue<Int32>(reader, ordDocumentID),
					LocationID = GetNonNullFieldValue<Int32>(reader, ordLocationID),
					MTNotes = GetField<String>(reader, ordMTNotes),
					CanDismiss = GetNonNullFieldValue<Boolean>(reader, ordCanDismiss),
					VisibleCharacters = GetFieldValue<Int32>(reader, ordVisibleCharacters),
					NonVisibleCharacters = GetFieldValue<Int32>(reader, ordNonVisibleCharacters),
					TemplateVisibleCharacters = GetFieldValue<Int32>(reader, ordTemplateVisibleCharacters),
					TemplateNonVisibleCharacters = GetFieldValue<Int32>(reader, ordTemplateNonVisibleCharacters),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserDocumentTemplatesRow>> GetClientUserDocumentTemplatesAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Boolean isVR) => GetClientUserDocumentTemplatesAsync(connection, clientID, userID, documentID, locationID, isVR, CancellationToken.None);
	public static async Task<List<GetClientUserDocumentTemplatesRow>> GetClientUserDocumentTemplatesAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, Boolean isVR, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_DocumentTemplates");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Is_VR", isVR, SqlDbType.Bit, 1));

		var result = new List<GetClientUserDocumentTemplatesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDocumentTemplateID = reader.GetOrdinal("Document_Template_ID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordDescription = reader.GetOrdinal("Description");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordMTNotes = reader.GetOrdinal("MT_Notes");
			int ordCanDismiss = reader.GetOrdinal("Can_Dismiss");
			int ordVisibleCharacters = reader.GetOrdinal("Visible_Characters");
			int ordNonVisibleCharacters = reader.GetOrdinal("NonVisible_Characters");
			int ordTemplateVisibleCharacters = reader.GetOrdinal("Template_Visible_Characters");
			int ordTemplateNonVisibleCharacters = reader.GetOrdinal("Template_NonVisible_Characters");

			do
			{
				result.Add(new GetClientUserDocumentTemplatesRow
				{
					DocumentTemplateID = GetNonNullFieldValue<Int32>(reader, ordDocumentTemplateID),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					Description = GetField<String>(reader, ordDescription),
					DocumentID = GetNonNullFieldValue<Int32>(reader, ordDocumentID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
					LocationID = GetNonNullFieldValue<Int32>(reader, ordLocationID),
					MTNotes = GetField<String>(reader, ordMTNotes),
					CanDismiss = GetNonNullFieldValue<Boolean>(reader, ordCanDismiss),
					VisibleCharacters = GetFieldValue<Int32>(reader, ordVisibleCharacters),
					NonVisibleCharacters = GetFieldValue<Int32>(reader, ordNonVisibleCharacters),
					TemplateVisibleCharacters = GetFieldValue<Int32>(reader, ordTemplateVisibleCharacters),
					TemplateNonVisibleCharacters = GetFieldValue<Int32>(reader, ordTemplateNonVisibleCharacters),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserDocumentTypesRow>> GetClientUserDocumentTypesAsync(SqlConnection connection, Int32 clientID, Int32 userID, Boolean includeInactive) => GetClientUserDocumentTypesAsync(connection, clientID, userID, includeInactive, CancellationToken.None);
	public static async Task<List<GetClientUserDocumentTypesRow>> GetClientUserDocumentTypesAsync(SqlConnection connection, Int32 clientID, Int32 userID, Boolean includeInactive, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_DocumentTypes");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@IncludeInactive", includeInactive, SqlDbType.Bit, 1));

		var result = new List<GetClientUserDocumentTypesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientId = reader.GetOrdinal("Client_Id");
			int ordDocumentId = reader.GetOrdinal("Document_Id");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordDocumentDescription = reader.GetOrdinal("Document_Description");
			int ordRequiredLocationId = reader.GetOrdinal("Required_Location_Id");
			int ordDocumentTypeGroupMask = reader.GetOrdinal("DocumentTypeGroup_Mask");
			int ordDictationId = reader.GetOrdinal("Dictation_Id");
			int ordClientCode = reader.GetOrdinal("Client_Code");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordDictationEmulationPromptTypeID = reader.GetOrdinal("Dictation_Emulation_Prompt_Type_ID");
			int ordInTouchID = reader.GetOrdinal("InTouch_ID");

			do
			{
				result.Add(new GetClientUserDocumentTypesRow
				{
					ClientId = GetNonNullFieldValue<Int32>(reader, ordClientId),
					DocumentId = GetNonNullFieldValue<Int32>(reader, ordDocumentId),
					DocumentType = GetField<String>(reader, ordDocumentType),
					DocumentDescription = GetField<String>(reader, ordDocumentDescription),
					RequiredLocationId = GetFieldValue<Int32>(reader, ordRequiredLocationId),
					DocumentTypeGroupMask = GetFieldValue<Int32>(reader, ordDocumentTypeGroupMask),
					DictationId = GetField<String>(reader, ordDictationId),
					ClientCode = GetField<String>(reader, ordClientCode),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					DictationEmulationPromptTypeID = GetFieldValue<Int32>(reader, ordDictationEmulationPromptTypeID),
					InTouchID = GetField<String>(reader, ordInTouchID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserEmailVerificationStatusRow>> GetClientUserEmailVerificationStatusAsync(SqlConnection connection, Int32 clientID, Int32 userID) => GetClientUserEmailVerificationStatusAsync(connection, clientID, userID, CancellationToken.None);
	public static async Task<List<GetClientUserEmailVerificationStatusRow>> GetClientUserEmailVerificationStatusAsync(SqlConnection connection, Int32 clientID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_EmailVerificationStatus");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetClientUserEmailVerificationStatusRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordStatusID = reader.GetOrdinal("Status_ID");

			do
			{
				result.Add(new GetClientUserEmailVerificationStatusRow
				{
					StatusID = GetNonNullFieldValue<Int32>(reader, ordStatusID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserEncountersSearchRow>> GetClientUserEncountersSearchAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 patientsAppointmentsTypeID, String patientID, String patientName, String orderNumber) => GetClientUserEncountersSearchAsync(connection, clientID, userID, patientsAppointmentsTypeID, patientID, patientName, orderNumber, CancellationToken.None);
	public static async Task<List<GetClientUserEncountersSearchRow>> GetClientUserEncountersSearchAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 patientsAppointmentsTypeID, String patientID, String patientName, String orderNumber, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Encounters_Search");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patients_Appointments_Type_ID", patientsAppointmentsTypeID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Name", patientName, SqlDbType.VarChar, 40));
		cmd.Parameters.Add(CreateParameter("@Order_Number", orderNumber, SqlDbType.VarChar, 50));

		var result = new List<GetClientUserEncountersSearchRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordPhysician = reader.GetOrdinal("Physician");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordApptUserField1 = reader.GetOrdinal("Appt_User_Field_1");
			int ordApptUserField2 = reader.GetOrdinal("Appt_User_Field_2");
			int ordApptUserField3 = reader.GetOrdinal("Appt_User_Field_3");
			int ordApptUserField4 = reader.GetOrdinal("Appt_User_Field_4");
			int ordApptUserField5 = reader.GetOrdinal("Appt_User_Field_5");
			int ordAppointmentClientCode = reader.GetOrdinal("Appointment_Client_Code");
			int ordPatientsAppointmentsTypeID = reader.GetOrdinal("Patients_Appointments_Type_ID");
			int ordAdmitDate = reader.GetOrdinal("Admit_Date");
			int ordDischargeDate = reader.GetOrdinal("Discharge_Date");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordAppointmentID = reader.GetOrdinal("Appointment_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordPatientFullName = reader.GetOrdinal("Patient_Full_Name");
			int ordPatientNameFirst = reader.GetOrdinal("Patient_Name_First");
			int ordPatientNameLast = reader.GetOrdinal("Patient_Name_Last");
			int ordPatientNameMiddle = reader.GetOrdinal("Patient_Name_Middle");
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");

			do
			{
				result.Add(new GetClientUserEncountersSearchRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					PatientID = GetNonNullField<String>(reader, ordPatientID),
					LocationID = GetNonNullFieldValue<Int32>(reader, ordLocationID),
					Physician = GetNonNullField<String>(reader, ordPhysician),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					DictationID = GetField<String>(reader, ordDictationID),
					ApptUserField1 = GetField<String>(reader, ordApptUserField1),
					ApptUserField2 = GetField<String>(reader, ordApptUserField2),
					ApptUserField3 = GetField<String>(reader, ordApptUserField3),
					ApptUserField4 = GetField<String>(reader, ordApptUserField4),
					ApptUserField5 = GetField<String>(reader, ordApptUserField5),
					AppointmentClientCode = GetField<String>(reader, ordAppointmentClientCode),
					PatientsAppointmentsTypeID = GetFieldValue<Int32>(reader, ordPatientsAppointmentsTypeID),
					AdmitDate = GetFieldValue<DateTime>(reader, ordAdmitDate),
					DischargeDate = GetFieldValue<DateTime>(reader, ordDischargeDate),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					AppointmentID = GetNonNullFieldValue<Guid>(reader, ordAppointmentID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					PatientFullName = GetField<String>(reader, ordPatientFullName),
					PatientNameFirst = GetField<String>(reader, ordPatientNameFirst),
					PatientNameLast = GetField<String>(reader, ordPatientNameLast),
					PatientNameMiddle = GetField<String>(reader, ordPatientNameMiddle),
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserFeatureFlagRow>> GetClientUserFeatureFlagAsync(SqlConnection connection, String featureFlagName, Int32 clientID, Int32 userID) => GetClientUserFeatureFlagAsync(connection, featureFlagName, clientID, userID, CancellationToken.None);
	public static async Task<List<GetClientUserFeatureFlagRow>> GetClientUserFeatureFlagAsync(SqlConnection connection, String featureFlagName, Int32 clientID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Feature_Flag");

		cmd.Parameters.Add(CreateParameter("@Feature_Flag_Name", featureFlagName, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetClientUserFeatureFlagRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordIsEnabled = reader.GetOrdinal("Is_Enabled");

			do
			{
				result.Add(new GetClientUserFeatureFlagRow
				{
					IsEnabled = GetFieldValue<Int32>(reader, ordIsEnabled),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserFeatureFlag2_Row>> GetClientUserFeatureFlag2Async(SqlConnection connection, String featureFlagName, Int32 clientID, Int32 userID) => GetClientUserFeatureFlag2Async(connection, featureFlagName, clientID, userID, CancellationToken.None);
	public static async Task<List<GetClientUserFeatureFlag2_Row>> GetClientUserFeatureFlag2Async(SqlConnection connection, String featureFlagName, Int32 clientID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Feature_Flag_2");

		cmd.Parameters.Add(CreateParameter("@Feature_Flag_Name", featureFlagName, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetClientUserFeatureFlag2_Row>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordIsEnabled = reader.GetOrdinal("Is_Enabled");

			do
			{
				result.Add(new GetClientUserFeatureFlag2_Row
				{
					IsEnabled = GetFieldValue<Boolean>(reader, ordIsEnabled),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserFoldersRow>> GetClientUserFoldersAsync(SqlConnection connection, Int32 clientID, Int32 userID) => GetClientUserFoldersAsync(connection, clientID, userID, CancellationToken.None);
	public static async Task<List<GetClientUserFoldersRow>> GetClientUserFoldersAsync(SqlConnection connection, Int32 clientID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Folders");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetClientUserFoldersRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordFolderID = reader.GetOrdinal("Folder_ID");
			int ordFolderName = reader.GetOrdinal("Folder_Name");
			int ordIsFolderEnabled = reader.GetOrdinal("Is_Folder_Enabled");
			int ordIsFolderLocationBased = reader.GetOrdinal("Is_Folder_Location_Based");
			int ordCompleteLabel = reader.GetOrdinal("Complete_Label");
			int ordCanCompleteAll = reader.GetOrdinal("Can_Complete_All");
			int ordBracketedFieldBehavior = reader.GetOrdinal("Bracketed_Field_Behavior");

			do
			{
				result.Add(new GetClientUserFoldersRow
				{
					FolderID = GetNonNullFieldValue<Int32>(reader, ordFolderID),
					FolderName = GetNonNullField<String>(reader, ordFolderName),
					IsFolderEnabled = GetFieldValue<Boolean>(reader, ordIsFolderEnabled),
					IsFolderLocationBased = GetFieldValue<Boolean>(reader, ordIsFolderLocationBased),
					CompleteLabel = GetField<String>(reader, ordCompleteLabel),
					CanCompleteAll = GetFieldValue<Boolean>(reader, ordCanCompleteAll),
					BracketedFieldBehavior = GetFieldValue<Int32>(reader, ordBracketedFieldBehavior),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserForPasswordResetRow>> GetClientUserForPasswordResetAsync(SqlConnection connection, String clientName, String userName, String iPAddress, String workstation, String programVersion) => GetClientUserForPasswordResetAsync(connection, clientName, userName, iPAddress, workstation, programVersion, CancellationToken.None);
	public static async Task<List<GetClientUserForPasswordResetRow>> GetClientUserForPasswordResetAsync(SqlConnection connection, String clientName, String userName, String iPAddress, String workstation, String programVersion, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_For_Password_Reset");

		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));

		var result = new List<GetClientUserForPasswordResetRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordUserEmail = reader.GetOrdinal("User_Email");
			int ordUserEmailVerifiedDate = reader.GetOrdinal("User_Email_Verified_Date");
			int ordIsLocked = reader.GetOrdinal("Is_Locked");

			do
			{
				result.Add(new GetClientUserForPasswordResetRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
					UserEmail = GetField<String>(reader, ordUserEmail),
					UserEmailVerifiedDate = GetFieldValue<DateTime>(reader, ordUserEmailVerifiedDate),
					IsLocked = GetNonNullFieldValue<Boolean>(reader, ordIsLocked),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserInpatientWorklistRow>> GetClientUserInpatientWorklistAsync(SqlConnection connection, Int32 clientID, Int32 userID) => GetClientUserInpatientWorklistAsync(connection, clientID, userID, CancellationToken.None);
	public static async Task<List<GetClientUserInpatientWorklistRow>> GetClientUserInpatientWorklistAsync(SqlConnection connection, Int32 clientID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_InpatientWorklist");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetClientUserInpatientWorklistRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDescription = reader.GetOrdinal("Description");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordAppointmentID = reader.GetOrdinal("Appointment_ID");
			int ordApptUserField1 = reader.GetOrdinal("Appt_User_Field_1");
			int ordApptUserField2 = reader.GetOrdinal("Appt_User_Field_2");
			int ordApptUserField3 = reader.GetOrdinal("Appt_User_Field_3");
			int ordApptUserField4 = reader.GetOrdinal("Appt_User_Field_4");
			int ordApptUserField5 = reader.GetOrdinal("Appt_User_Field_5");
			int ordAdmitDate = reader.GetOrdinal("Admit_Date");
			int ordDischargeDate = reader.GetOrdinal("Discharge_Date");
			int ordAccountNumber = reader.GetOrdinal("Account_Number");
			int ordLocation = reader.GetOrdinal("Location");
			int ordRoom = reader.GetOrdinal("Room");
			int ordBed = reader.GetOrdinal("Bed");
			int ordFloor = reader.GetOrdinal("Floor");
			int ordFacility = reader.GetOrdinal("Facility");
			int ordPatientsAppointmentsStatusID = reader.GetOrdinal("Patients_Appointments_Status_ID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordPatientsAppointmentsTypeID = reader.GetOrdinal("Patients_Appointments_Type_ID");
			int ordPatientLocation = reader.GetOrdinal("Patient_Location");
			int ordPatientClass = reader.GetOrdinal("Patient_Class");
			int ordPatientType = reader.GetOrdinal("Patient_Type");
			int ordAppointmentClientCode = reader.GetOrdinal("Appointment_Client_Code");
			int ordAttendingPhysicianName = reader.GetOrdinal("Attending_Physician_Name");
			int ordAdmittingPhysicianName = reader.GetOrdinal("Admitting_Physician_Name");
			int ordReferringPhysicianName = reader.GetOrdinal("Referring_Physician_Name");
			int ordConsultingPhysicianName = reader.GetOrdinal("Consulting_Physician_Name");
			int ordPrimaryCarePhysicianName = reader.GetOrdinal("Primary_Care_Physician_Name");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordAppointmentDictationCount = reader.GetOrdinal("Appointment_Dictation_Count");
			int ordAppointmentTranscriptionCount = reader.GetOrdinal("Appointment_Transcription_Count");
			int ordAppointmentSchedulingResourceID = reader.GetOrdinal("Appointment_Scheduling_Resource_ID");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientFullName = reader.GetOrdinal("Patient_Full_Name");
			int ordPatientNameFirst = reader.GetOrdinal("Patient_Name_First");
			int ordPatientNameLast = reader.GetOrdinal("Patient_Name_Last");
			int ordPatientNameMiddle = reader.GetOrdinal("Patient_Name_Middle");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");

			do
			{
				result.Add(new GetClientUserInpatientWorklistRow
				{
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					Description = GetNonNullField<String>(reader, ordDescription),
					LocationID = GetNonNullFieldValue<Int32>(reader, ordLocationID),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					AppointmentID = GetNonNullFieldValue<Guid>(reader, ordAppointmentID),
					ApptUserField1 = GetField<String>(reader, ordApptUserField1),
					ApptUserField2 = GetField<String>(reader, ordApptUserField2),
					ApptUserField3 = GetField<String>(reader, ordApptUserField3),
					ApptUserField4 = GetField<String>(reader, ordApptUserField4),
					ApptUserField5 = GetField<String>(reader, ordApptUserField5),
					AdmitDate = GetFieldValue<DateTime>(reader, ordAdmitDate),
					DischargeDate = GetFieldValue<DateTime>(reader, ordDischargeDate),
					AccountNumber = GetField<String>(reader, ordAccountNumber),
					Location = GetField<String>(reader, ordLocation),
					Room = GetField<String>(reader, ordRoom),
					Bed = GetField<String>(reader, ordBed),
					Floor = GetField<String>(reader, ordFloor),
					Facility = GetField<String>(reader, ordFacility),
					PatientsAppointmentsStatusID = GetField<String>(reader, ordPatientsAppointmentsStatusID),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					PatientsAppointmentsTypeID = GetFieldValue<Int32>(reader, ordPatientsAppointmentsTypeID),
					PatientLocation = GetField<String>(reader, ordPatientLocation),
					PatientClass = GetField<String>(reader, ordPatientClass),
					PatientType = GetField<String>(reader, ordPatientType),
					AppointmentClientCode = GetField<String>(reader, ordAppointmentClientCode),
					AttendingPhysicianName = GetField<String>(reader, ordAttendingPhysicianName),
					AdmittingPhysicianName = GetField<String>(reader, ordAdmittingPhysicianName),
					ReferringPhysicianName = GetField<String>(reader, ordReferringPhysicianName),
					ConsultingPhysicianName = GetField<String>(reader, ordConsultingPhysicianName),
					PrimaryCarePhysicianName = GetField<String>(reader, ordPrimaryCarePhysicianName),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					AppointmentDictationCount = GetFieldValue<Int32>(reader, ordAppointmentDictationCount),
					AppointmentTranscriptionCount = GetFieldValue<Int32>(reader, ordAppointmentTranscriptionCount),
					AppointmentSchedulingResourceID = GetFieldValue<Int32>(reader, ordAppointmentSchedulingResourceID),
					PatientID = GetNonNullField<String>(reader, ordPatientID),
					PatientFullName = GetField<String>(reader, ordPatientFullName),
					PatientNameFirst = GetField<String>(reader, ordPatientNameFirst),
					PatientNameLast = GetField<String>(reader, ordPatientNameLast),
					PatientNameMiddle = GetField<String>(reader, ordPatientNameMiddle),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					PatientGender = GetField<String>(reader, ordPatientGender),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserLinkedAccountsRow>> GetClientUserLinkedAccountsAsync(SqlConnection connection, Int32 sourceClientID, Int32 sourceUserID) => GetClientUserLinkedAccountsAsync(connection, sourceClientID, sourceUserID, CancellationToken.None);
	public static async Task<List<GetClientUserLinkedAccountsRow>> GetClientUserLinkedAccountsAsync(SqlConnection connection, Int32 sourceClientID, Int32 sourceUserID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_LinkedAccounts");

		cmd.Parameters.Add(CreateParameter("@Source_Client_ID", sourceClientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Source_User_ID", sourceUserID, SqlDbType.Int, 4));

		var result = new List<GetClientUserLinkedAccountsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordSourceClientID = reader.GetOrdinal("Source_Client_ID");
			int ordSourceUserID = reader.GetOrdinal("Source_User_ID");
			int ordTargetClientID = reader.GetOrdinal("Target_Client_ID");
			int ordTargetUserID = reader.GetOrdinal("Target_User_ID");
			int ordTargetClientName = reader.GetOrdinal("Target_Client_Name");
			int ordTargetUserName = reader.GetOrdinal("Target_User_Name");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");

			do
			{
				result.Add(new GetClientUserLinkedAccountsRow
				{
					SourceClientID = GetNonNullFieldValue<Int32>(reader, ordSourceClientID),
					SourceUserID = GetNonNullFieldValue<Int32>(reader, ordSourceUserID),
					TargetClientID = GetNonNullFieldValue<Int32>(reader, ordTargetClientID),
					TargetUserID = GetNonNullFieldValue<Int32>(reader, ordTargetUserID),
					TargetClientName = GetField<String>(reader, ordTargetClientName),
					TargetUserName = GetField<String>(reader, ordTargetUserName),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserLocationResourcesRow>> GetClientUserLocationResourcesAsync(SqlConnection connection, Int32 clientID, Int32 userID) => GetClientUserLocationResourcesAsync(connection, clientID, userID, CancellationToken.None);
	public static async Task<List<GetClientUserLocationResourcesRow>> GetClientUserLocationResourcesAsync(SqlConnection connection, Int32 clientID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Location_Resources");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetClientUserLocationResourcesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordLocationResourceID = reader.GetOrdinal("Location_Resource_ID");
			int ordCode = reader.GetOrdinal("Code");
			int ordName = reader.GetOrdinal("Name");
			int ordDescription = reader.GetOrdinal("Description");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");

			do
			{
				result.Add(new GetClientUserLocationResourcesRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					LocationResourceID = GetNonNullFieldValue<Int32>(reader, ordLocationResourceID),
					Code = GetNonNullField<String>(reader, ordCode),
					Name = GetNonNullField<String>(reader, ordName),
					Description = GetField<String>(reader, ordDescription),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserLocationsRow>> GetClientUserLocationsAsync(SqlConnection connection, Int32 clientID, Int32 userID, Boolean includeInactive) => GetClientUserLocationsAsync(connection, clientID, userID, includeInactive, CancellationToken.None);
	public static async Task<List<GetClientUserLocationsRow>> GetClientUserLocationsAsync(SqlConnection connection, Int32 clientID, Int32 userID, Boolean includeInactive, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Locations");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@IncludeInactive", includeInactive, SqlDbType.Bit, 1));

		var result = new List<GetClientUserLocationsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordLocationName = reader.GetOrdinal("Location_Name");
			int ordDictationId = reader.GetOrdinal("Dictation_Id");
			int ordClientCode = reader.GetOrdinal("Client_Code");

			do
			{
				result.Add(new GetClientUserLocationsRow
				{
					LocationID = GetNonNullFieldValue<Int32>(reader, ordLocationID),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					LocationName = GetField<String>(reader, ordLocationName),
					DictationId = GetField<String>(reader, ordDictationId),
					ClientCode = GetField<String>(reader, ordClientCode),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserPasswordHistoryRow>> GetClientUserPasswordHistoryAsync(SqlConnection connection, Int32 clientID, Int32 userID) => GetClientUserPasswordHistoryAsync(connection, clientID, userID, CancellationToken.None);
	public static async Task<List<GetClientUserPasswordHistoryRow>> GetClientUserPasswordHistoryAsync(SqlConnection connection, Int32 clientID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Password_History");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetClientUserPasswordHistoryRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordPasswordHash = reader.GetOrdinal("Password_Hash");
			int ordPasswordSalt = reader.GetOrdinal("Password_Salt");
			int ordPasswordHashAlgorithmID = reader.GetOrdinal("Password_Hash_Algorithm_ID");
			int ordPasswordDate = reader.GetOrdinal("PasswordDate");
			int ordCaseSensitive = reader.GetOrdinal("Case_Sensitive");
			int ordHashLength = reader.GetOrdinal("Hash_Length");
			int ordSaltLength = reader.GetOrdinal("Salt_Length");
			int ordIterations = reader.GetOrdinal("Iterations");
			int ordPRF = reader.GetOrdinal("PRF");

			do
			{
				result.Add(new GetClientUserPasswordHistoryRow
				{
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
					PasswordHash = GetField<Byte[]>(reader, ordPasswordHash),
					PasswordSalt = GetField<Byte[]>(reader, ordPasswordSalt),
					PasswordHashAlgorithmID = GetFieldValue<Int32>(reader, ordPasswordHashAlgorithmID),
					PasswordDate = GetFieldValue<DateTime>(reader, ordPasswordDate),
					CaseSensitive = GetNonNullFieldValue<Boolean>(reader, ordCaseSensitive),
					HashLength = GetFieldValue<Int32>(reader, ordHashLength),
					SaltLength = GetFieldValue<Int32>(reader, ordSaltLength),
					Iterations = GetFieldValue<Int32>(reader, ordIterations),
					PRF = GetField<String>(reader, ordPRF),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserPasswordLockRow>> GetClientUserPasswordLockAsync(SqlConnection connection, String clientName, String userName) => GetClientUserPasswordLockAsync(connection, clientName, userName, CancellationToken.None);
	public static async Task<List<GetClientUserPasswordLockRow>> GetClientUserPasswordLockAsync(SqlConnection connection, String clientName, String userName, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Password_Lock");

		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 26));

		var result = new List<GetClientUserPasswordLockRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordIsLocked = reader.GetOrdinal("Is_Locked");
			int ordPasswordDaysLeft = reader.GetOrdinal("Password_Days_Left");

			do
			{
				result.Add(new GetClientUserPasswordLockRow
				{
					IsLocked = GetNonNullFieldValue<Boolean>(reader, ordIsLocked),
					PasswordDaysLeft = GetFieldValue<Int32>(reader, ordPasswordDaysLeft),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserPreferredDocumentTemplatesRow>> GetClientUserPreferredDocumentTemplatesAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID) => GetClientUserPreferredDocumentTemplatesAsync(connection, clientID, userID, documentID, locationID, CancellationToken.None);
	public static async Task<List<GetClientUserPreferredDocumentTemplatesRow>> GetClientUserPreferredDocumentTemplatesAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 documentID, Int32 locationID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Preferred_DocumentTemplates");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));

		var result = new List<GetClientUserPreferredDocumentTemplatesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDocumentTemplateID = reader.GetOrdinal("Document_Template_ID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordDescription = reader.GetOrdinal("Description");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordMTNotes = reader.GetOrdinal("MT_Notes");
			int ordCanDismiss = reader.GetOrdinal("Can_Dismiss");
			int ordIsVR = reader.GetOrdinal("IsVR");

			do
			{
				result.Add(new GetClientUserPreferredDocumentTemplatesRow
				{
					DocumentTemplateID = GetNonNullFieldValue<Int32>(reader, ordDocumentTemplateID),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					Description = GetField<String>(reader, ordDescription),
					DocumentID = GetNonNullFieldValue<Int32>(reader, ordDocumentID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
					LocationID = GetNonNullFieldValue<Int32>(reader, ordLocationID),
					MTNotes = GetField<String>(reader, ordMTNotes),
					CanDismiss = GetNonNullFieldValue<Boolean>(reader, ordCanDismiss),
					IsVR = GetNonNullFieldValue<Boolean>(reader, ordIsVR),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserProxyUsersRow>> GetClientUserProxyUsersAsync(SqlConnection connection, Int32 clientID, Int32 userID) => GetClientUserProxyUsersAsync(connection, clientID, userID, CancellationToken.None);
	public static async Task<List<GetClientUserProxyUsersRow>> GetClientUserProxyUsersAsync(SqlConnection connection, Int32 clientID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_ProxyUsers");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetClientUserProxyUsersRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordDisplayName = reader.GetOrdinal("Display_Name");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordUserNameFirst = reader.GetOrdinal("User_Name_First");
			int ordUserNameLast = reader.GetOrdinal("User_Name_Last");
			int ordUserUsername = reader.GetOrdinal("User_Username");
			int ordDocumentTypeGroupMask = reader.GetOrdinal("DocumentTypeGroup_Mask");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetClientUserProxyUsersRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
					DisplayName = GetField<String>(reader, ordDisplayName),
					UserFullname = GetField<String>(reader, ordUserFullname),
					UserNameFirst = GetField<String>(reader, ordUserNameFirst),
					UserNameLast = GetField<String>(reader, ordUserNameLast),
					UserUsername = GetField<String>(reader, ordUserUsername),
					DocumentTypeGroupMask = GetFieldValue<Int32>(reader, ordDocumentTypeGroupMask),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserScheduleResourcesRow>> GetClientUserScheduleResourcesAsync(SqlConnection connection, Int32 clientID, Int32 userID) => GetClientUserScheduleResourcesAsync(connection, clientID, userID, CancellationToken.None);
	public static async Task<List<GetClientUserScheduleResourcesRow>> GetClientUserScheduleResourcesAsync(SqlConnection connection, Int32 clientID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_ScheduleResources");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetClientUserScheduleResourcesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordSchedulingResourceID = reader.GetOrdinal("Scheduling_Resource_ID");
			int ordCode = reader.GetOrdinal("Code");
			int ordDescription = reader.GetOrdinal("Description");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordIsActive = reader.GetOrdinal("Is_Active");
			int ordName = reader.GetOrdinal("Name");

			do
			{
				result.Add(new GetClientUserScheduleResourcesRow
				{
					SchedulingResourceID = GetNonNullFieldValue<Int32>(reader, ordSchedulingResourceID),
					Code = GetNonNullField<String>(reader, ordCode),
					Description = GetField<String>(reader, ordDescription),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
					IsActive = GetNonNullFieldValue<Boolean>(reader, ordIsActive),
					Name = GetField<String>(reader, ordName),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserSettingsRow>> GetClientUserSettingsAsync(SqlConnection connection, Int32 clientID, Int32 userID) => GetClientUserSettingsAsync(connection, clientID, userID, CancellationToken.None);
	public static async Task<List<GetClientUserSettingsRow>> GetClientUserSettingsAsync(SqlConnection connection, Int32 clientID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Settings");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetClientUserSettingsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordSessionTimeout = reader.GetOrdinal("SessionTimeout");
			int ordCanSaveMobilePassword = reader.GetOrdinal("Can_Save_Mobile_Password");
			int ordCanResumeMobileSession = reader.GetOrdinal("Can_Resume_Mobile_Session");
			int ordCanSaveInSyncPassword = reader.GetOrdinal("Can_Save_InSync_Password");
			int ordCanAccessSearchAll = reader.GetOrdinal("Can_Access_SearchAll");
			int ordCanDictate = reader.GetOrdinal("Can_Dictate");
			int ordPreferredContentTypeID = reader.GetOrdinal("Preferred_Content_Type_ID");
			int ordRequiresAdditionalSignature = reader.GetOrdinal("Requires_Additional_Signature");
			int ordDefaultDocumentTypeID = reader.GetOrdinal("Default_Document_Type_ID");
			int ordDefaultLocationID = reader.GetOrdinal("Default_Location_ID");
			int ordCanViewComments = reader.GetOrdinal("Can_View_Comments");
			int ordEmailVerificationPolicy = reader.GetOrdinal("Email_Verification_Policy");
			int ordCanOverrideCompletionPreventions = reader.GetOrdinal("Can_Override_Completion_Preventions");

			do
			{
				result.Add(new GetClientUserSettingsRow
				{
					SessionTimeout = GetFieldValue<Int32>(reader, ordSessionTimeout),
					CanSaveMobilePassword = GetNonNullField<String>(reader, ordCanSaveMobilePassword),
					CanResumeMobileSession = GetFieldValue<Boolean>(reader, ordCanResumeMobileSession),
					CanSaveInSyncPassword = GetNonNullField<String>(reader, ordCanSaveInSyncPassword),
					CanAccessSearchAll = GetFieldValue<Boolean>(reader, ordCanAccessSearchAll),
					CanDictate = GetFieldValue<Boolean>(reader, ordCanDictate),
					PreferredContentTypeID = GetFieldValue<Int32>(reader, ordPreferredContentTypeID),
					RequiresAdditionalSignature = GetFieldValue<Boolean>(reader, ordRequiresAdditionalSignature),
					DefaultDocumentTypeID = GetFieldValue<Int32>(reader, ordDefaultDocumentTypeID),
					DefaultLocationID = GetFieldValue<Int32>(reader, ordDefaultLocationID),
					CanViewComments = GetFieldValue<Boolean>(reader, ordCanViewComments),
					EmailVerificationPolicy = GetFieldValue<Int32>(reader, ordEmailVerificationPolicy),
					CanOverrideCompletionPreventions = GetFieldValue<Boolean>(reader, ordCanOverrideCompletionPreventions),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserTimeZoneIdentifierRow>> GetClientUserTimeZoneIdentifierAsync(SqlConnection connection, Int32 clientID, Int32 userID) => GetClientUserTimeZoneIdentifierAsync(connection, clientID, userID, CancellationToken.None);
	public static async Task<List<GetClientUserTimeZoneIdentifierRow>> GetClientUserTimeZoneIdentifierAsync(SqlConnection connection, Int32 clientID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_TimeZone_Identifier");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetClientUserTimeZoneIdentifierRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordIdentifier = reader.GetOrdinal("Identifier");

			do
			{
				result.Add(new GetClientUserTimeZoneIdentifierRow
				{
					Identifier = GetField<String>(reader, ordIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserTranscriptionCommentRow>> GetClientUserTranscriptionCommentAsync(SqlConnection connection, Int32 transcriptionID) => GetClientUserTranscriptionCommentAsync(connection, transcriptionID, CancellationToken.None);
	public static async Task<List<GetClientUserTranscriptionCommentRow>> GetClientUserTranscriptionCommentAsync(SqlConnection connection, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Transcription_Comment");

		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetClientUserTranscriptionCommentRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordComment = reader.GetOrdinal("Comment");

			do
			{
				result.Add(new GetClientUserTranscriptionCommentRow
				{
					Comment = GetField<String>(reader, ordComment),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserTranscriptionTagsRow>> GetClientUserTranscriptionTagsAsync(SqlConnection connection, Int32 transcriptionID, Boolean active) => GetClientUserTranscriptionTagsAsync(connection, transcriptionID, active, CancellationToken.None);
	public static async Task<List<GetClientUserTranscriptionTagsRow>> GetClientUserTranscriptionTagsAsync(SqlConnection connection, Int32 transcriptionID, Boolean active, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Transcription_Tags");

		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Active", active, SqlDbType.Bit, 1));

		var result = new List<GetClientUserTranscriptionTagsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionTagID = reader.GetOrdinal("Transcription_Tag_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordIsActive = reader.GetOrdinal("Is_Active");

			do
			{
				result.Add(new GetClientUserTranscriptionTagsRow
				{
					TranscriptionTagID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionTagID),
					Name = GetField<String>(reader, ordName),
					IsActive = GetNonNullFieldValue<Boolean>(reader, ordIsActive),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserTranscriptionsByPatientIDRow>> GetClientUserTranscriptionsByPatientIDAsync(SqlConnection connection, Int32 clientID, Int32 userID, String patientID) => GetClientUserTranscriptionsByPatientIDAsync(connection, clientID, userID, patientID, CancellationToken.None);
	public static async Task<List<GetClientUserTranscriptionsByPatientIDRow>> GetClientUserTranscriptionsByPatientIDAsync(SqlConnection connection, Int32 clientID, Int32 userID, String patientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Transcriptions_ByPatientID");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.Char, 20));

		var result = new List<GetClientUserTranscriptionsByPatientIDRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordForClientID = reader.GetOrdinal("For_Client_ID");
			int ordForUserID = reader.GetOrdinal("For_User_ID");
			int ordClientName = reader.GetOrdinal("Client_Name");
			int ordWorkflowStatus = reader.GetOrdinal("WorkflowStatus");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordDateDictatedCST = reader.GetOrdinal("Date_Dictated_CST");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_TimeZone_Identifier");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");

			do
			{
				result.Add(new GetClientUserTranscriptionsByPatientIDRow
				{
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					DocumentType = GetField<String>(reader, ordDocumentType),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					ForClientID = GetNonNullFieldValue<Int32>(reader, ordForClientID),
					ForUserID = GetFieldValue<Int32>(reader, ordForUserID),
					ClientName = GetNonNullField<String>(reader, ordClientName),
					WorkflowStatus = GetFieldValue<Byte>(reader, ordWorkflowStatus),
					UserFullname = GetField<String>(reader, ordUserFullname),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					DateDictatedCST = GetFieldValue<DateTime>(reader, ordDateDictatedCST),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetField<String>(reader, ordServerTimeZoneIdentifier),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserTranscriptionsFinalRow>> GetClientUserTranscriptionsFinalAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID) => GetClientUserTranscriptionsFinalAsync(connection, clientID, userID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetClientUserTranscriptionsFinalRow>> GetClientUserTranscriptionsFinalAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Transcriptions_Final");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetClientUserTranscriptionsFinalRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordForClientID = reader.GetOrdinal("For_Client_ID");
			int ordForUserID = reader.GetOrdinal("For_User_ID");
			int ordAdditionalTemplateID = reader.GetOrdinal("Additional_Template_ID");
			int ordCanEdit = reader.GetOrdinal("Can_Edit");
			int ordCanEditHeader = reader.GetOrdinal("Can_Edit_Header");
			int ordCanComplete = reader.GetOrdinal("Can_Complete");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordDateDictatedCST = reader.GetOrdinal("Date_Dictated_CST");
			int ordComment = reader.GetOrdinal("Comment");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_TimeZone_Identifier");

			do
			{
				result.Add(new GetClientUserTranscriptionsFinalRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					DocumentType = GetField<String>(reader, ordDocumentType),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					ForClientID = GetNonNullFieldValue<Int32>(reader, ordForClientID),
					ForUserID = GetFieldValue<Int32>(reader, ordForUserID),
					AdditionalTemplateID = GetFieldValue<Int32>(reader, ordAdditionalTemplateID),
					CanEdit = GetFieldValue<Boolean>(reader, ordCanEdit),
					CanEditHeader = GetFieldValue<Boolean>(reader, ordCanEditHeader),
					CanComplete = GetFieldValue<Boolean>(reader, ordCanComplete),
					UserFullname = GetField<String>(reader, ordUserFullname),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					DateDictatedCST = GetFieldValue<DateTime>(reader, ordDateDictatedCST),
					Comment = GetField<String>(reader, ordComment),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetField<String>(reader, ordServerTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserTranscriptionsFinalLocationBasedRow>> GetClientUserTranscriptionsFinalLocationBasedAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID) => GetClientUserTranscriptionsFinalLocationBasedAsync(connection, clientID, userID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetClientUserTranscriptionsFinalLocationBasedRow>> GetClientUserTranscriptionsFinalLocationBasedAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Transcriptions_Final_LocationBased");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetClientUserTranscriptionsFinalLocationBasedRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordForClientID = reader.GetOrdinal("For_Client_ID");
			int ordForUserID = reader.GetOrdinal("For_User_ID");
			int ordAdditionalTemplateID = reader.GetOrdinal("Additional_Template_ID");
			int ordCanEdit = reader.GetOrdinal("Can_Edit");
			int ordCanEditHeader = reader.GetOrdinal("Can_Edit_Header");
			int ordCanComplete = reader.GetOrdinal("Can_Complete");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordDateDictatedCST = reader.GetOrdinal("Date_Dictated_CST");
			int ordComment = reader.GetOrdinal("Comment");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_TimeZone_Identifier");

			do
			{
				result.Add(new GetClientUserTranscriptionsFinalLocationBasedRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					DocumentType = GetField<String>(reader, ordDocumentType),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					ForClientID = GetNonNullFieldValue<Int32>(reader, ordForClientID),
					ForUserID = GetFieldValue<Int32>(reader, ordForUserID),
					AdditionalTemplateID = GetFieldValue<Int32>(reader, ordAdditionalTemplateID),
					CanEdit = GetFieldValue<Boolean>(reader, ordCanEdit),
					CanEditHeader = GetFieldValue<Boolean>(reader, ordCanEditHeader),
					CanComplete = GetFieldValue<Boolean>(reader, ordCanComplete),
					UserFullname = GetField<String>(reader, ordUserFullname),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					DateDictatedCST = GetFieldValue<DateTime>(reader, ordDateDictatedCST),
					Comment = GetField<String>(reader, ordComment),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetField<String>(reader, ordServerTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserTranscriptionsFinal2Row>> GetClientUserTranscriptionsFinal2Async(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID) => GetClientUserTranscriptionsFinal2Async(connection, clientID, userID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetClientUserTranscriptionsFinal2Row>> GetClientUserTranscriptionsFinal2Async(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Transcriptions_Final2");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetClientUserTranscriptionsFinal2Row>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordForClientID = reader.GetOrdinal("For_Client_ID");
			int ordForUserID = reader.GetOrdinal("For_User_ID");
			int ordAdditionalTemplateID = reader.GetOrdinal("Additional_Template_ID");
			int ordCanEdit = reader.GetOrdinal("Can_Edit");
			int ordCanEditHeader = reader.GetOrdinal("Can_Edit_Header");
			int ordCanComplete = reader.GetOrdinal("Can_Complete");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordDateDictatedCST = reader.GetOrdinal("Date_Dictated_CST");
			int ordComment = reader.GetOrdinal("Comment");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_TimeZone_Identifier");

			do
			{
				result.Add(new GetClientUserTranscriptionsFinal2Row
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					DocumentType = GetField<String>(reader, ordDocumentType),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					ForClientID = GetNonNullFieldValue<Int32>(reader, ordForClientID),
					ForUserID = GetFieldValue<Int32>(reader, ordForUserID),
					AdditionalTemplateID = GetFieldValue<Int32>(reader, ordAdditionalTemplateID),
					CanEdit = GetFieldValue<Boolean>(reader, ordCanEdit),
					CanEditHeader = GetFieldValue<Boolean>(reader, ordCanEditHeader),
					CanComplete = GetFieldValue<Boolean>(reader, ordCanComplete),
					UserFullname = GetField<String>(reader, ordUserFullname),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					DateDictatedCST = GetFieldValue<DateTime>(reader, ordDateDictatedCST),
					Comment = GetField<String>(reader, ordComment),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetField<String>(reader, ordServerTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserTranscriptionsFinal2LocationBasedRow>> GetClientUserTranscriptionsFinal2LocationBasedAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID) => GetClientUserTranscriptionsFinal2LocationBasedAsync(connection, clientID, userID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetClientUserTranscriptionsFinal2LocationBasedRow>> GetClientUserTranscriptionsFinal2LocationBasedAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Transcriptions_Final2_LocationBased");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetClientUserTranscriptionsFinal2LocationBasedRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordForClientID = reader.GetOrdinal("For_Client_ID");
			int ordForUserID = reader.GetOrdinal("For_User_ID");
			int ordAdditionalTemplateID = reader.GetOrdinal("Additional_Template_ID");
			int ordCanEdit = reader.GetOrdinal("Can_Edit");
			int ordCanEditHeader = reader.GetOrdinal("Can_Edit_Header");
			int ordCanComplete = reader.GetOrdinal("Can_Complete");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordDateDictatedCST = reader.GetOrdinal("Date_Dictated_CST");
			int ordComment = reader.GetOrdinal("Comment");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_TimeZone_Identifier");

			do
			{
				result.Add(new GetClientUserTranscriptionsFinal2LocationBasedRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					DocumentType = GetField<String>(reader, ordDocumentType),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					ForClientID = GetNonNullFieldValue<Int32>(reader, ordForClientID),
					ForUserID = GetFieldValue<Int32>(reader, ordForUserID),
					AdditionalTemplateID = GetFieldValue<Int32>(reader, ordAdditionalTemplateID),
					CanEdit = GetFieldValue<Boolean>(reader, ordCanEdit),
					CanEditHeader = GetFieldValue<Boolean>(reader, ordCanEditHeader),
					CanComplete = GetFieldValue<Boolean>(reader, ordCanComplete),
					UserFullname = GetField<String>(reader, ordUserFullname),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					DateDictatedCST = GetFieldValue<DateTime>(reader, ordDateDictatedCST),
					Comment = GetField<String>(reader, ordComment),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetField<String>(reader, ordServerTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserTranscriptionsPreliminaryRow>> GetClientUserTranscriptionsPreliminaryAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID) => GetClientUserTranscriptionsPreliminaryAsync(connection, clientID, userID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetClientUserTranscriptionsPreliminaryRow>> GetClientUserTranscriptionsPreliminaryAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Transcriptions_Preliminary");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetClientUserTranscriptionsPreliminaryRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordForClientID = reader.GetOrdinal("For_Client_ID");
			int ordForUserID = reader.GetOrdinal("For_User_ID");
			int ordForUserFullName = reader.GetOrdinal("For_User_FullName");
			int ordAdditionalTemplateID = reader.GetOrdinal("Additional_Template_ID");
			int ordDefaultAttestationTemplateID = reader.GetOrdinal("Default_Attestation_Template_ID");
			int ordCanEdit = reader.GetOrdinal("Can_Edit");
			int ordCanEditHeader = reader.GetOrdinal("Can_Edit_Header");
			int ordCanComplete = reader.GetOrdinal("Can_Complete");
			int ordRequiresAttestation = reader.GetOrdinal("Requires_Attestation");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordDateDictatedCST = reader.GetOrdinal("Date_Dictated_CST");
			int ordComment = reader.GetOrdinal("Comment");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_TimeZone_Identifier");

			do
			{
				result.Add(new GetClientUserTranscriptionsPreliminaryRow
				{
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					DocumentType = GetField<String>(reader, ordDocumentType),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					ForClientID = GetNonNullFieldValue<Int32>(reader, ordForClientID),
					ForUserID = GetFieldValue<Int32>(reader, ordForUserID),
					ForUserFullName = GetField<String>(reader, ordForUserFullName),
					AdditionalTemplateID = GetFieldValue<Int32>(reader, ordAdditionalTemplateID),
					DefaultAttestationTemplateID = GetFieldValue<Int32>(reader, ordDefaultAttestationTemplateID),
					CanEdit = GetFieldValue<Boolean>(reader, ordCanEdit),
					CanEditHeader = GetFieldValue<Boolean>(reader, ordCanEditHeader),
					CanComplete = GetFieldValue<Boolean>(reader, ordCanComplete),
					RequiresAttestation = GetFieldValue<Boolean>(reader, ordRequiresAttestation),
					UserFullname = GetField<String>(reader, ordUserFullname),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					DateDictatedCST = GetFieldValue<DateTime>(reader, ordDateDictatedCST),
					Comment = GetField<String>(reader, ordComment),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetField<String>(reader, ordServerTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserTranscriptionsReferralRow>> GetClientUserTranscriptionsReferralAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID) => GetClientUserTranscriptionsReferralAsync(connection, clientID, userID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetClientUserTranscriptionsReferralRow>> GetClientUserTranscriptionsReferralAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Transcriptions_Referral");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetClientUserTranscriptionsReferralRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordForClientID = reader.GetOrdinal("For_Client_ID");
			int ordForUserID = reader.GetOrdinal("For_User_ID");
			int ordAdditionalTemplateID = reader.GetOrdinal("Additional_Template_ID");
			int ordCanEdit = reader.GetOrdinal("Can_Edit");
			int ordCanEditHeader = reader.GetOrdinal("Can_Edit_Header");
			int ordCanComplete = reader.GetOrdinal("Can_Complete");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordDateDictatedCST = reader.GetOrdinal("Date_Dictated_CST");
			int ordComment = reader.GetOrdinal("Comment");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_TimeZone_Identifier");

			do
			{
				result.Add(new GetClientUserTranscriptionsReferralRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					DocumentType = GetField<String>(reader, ordDocumentType),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					ForClientID = GetFieldValue<Int32>(reader, ordForClientID),
					ForUserID = GetFieldValue<Int32>(reader, ordForUserID),
					AdditionalTemplateID = GetFieldValue<Int32>(reader, ordAdditionalTemplateID),
					CanEdit = GetFieldValue<Boolean>(reader, ordCanEdit),
					CanEditHeader = GetFieldValue<Boolean>(reader, ordCanEditHeader),
					CanComplete = GetFieldValue<Boolean>(reader, ordCanComplete),
					UserFullname = GetField<String>(reader, ordUserFullname),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					DateDictatedCST = GetFieldValue<DateTime>(reader, ordDateDictatedCST),
					Comment = GetField<String>(reader, ordComment),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetField<String>(reader, ordServerTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserTranscriptionsReviewRow>> GetClientUserTranscriptionsReviewAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID) => GetClientUserTranscriptionsReviewAsync(connection, clientID, userID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetClientUserTranscriptionsReviewRow>> GetClientUserTranscriptionsReviewAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Transcriptions_Review");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetClientUserTranscriptionsReviewRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordForClientID = reader.GetOrdinal("For_Client_ID");
			int ordForUserID = reader.GetOrdinal("For_User_ID");
			int ordAdditionalTemplateID = reader.GetOrdinal("Additional_Template_ID");
			int ordCanEdit = reader.GetOrdinal("Can_Edit");
			int ordCanEditHeader = reader.GetOrdinal("Can_Edit_Header");
			int ordCanComplete = reader.GetOrdinal("Can_Complete");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordDateDictatedCST = reader.GetOrdinal("Date_Dictated_CST");
			int ordComment = reader.GetOrdinal("Comment");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_TimeZone_Identifier");

			do
			{
				result.Add(new GetClientUserTranscriptionsReviewRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					DocumentType = GetField<String>(reader, ordDocumentType),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					ForClientID = GetNonNullFieldValue<Int32>(reader, ordForClientID),
					ForUserID = GetFieldValue<Int32>(reader, ordForUserID),
					AdditionalTemplateID = GetFieldValue<Int32>(reader, ordAdditionalTemplateID),
					CanEdit = GetFieldValue<Boolean>(reader, ordCanEdit),
					CanEditHeader = GetFieldValue<Boolean>(reader, ordCanEditHeader),
					CanComplete = GetFieldValue<Boolean>(reader, ordCanComplete),
					UserFullname = GetField<String>(reader, ordUserFullname),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					DateDictatedCST = GetFieldValue<DateTime>(reader, ordDateDictatedCST),
					Comment = GetField<String>(reader, ordComment),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetField<String>(reader, ordServerTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserTranscriptionsReviewLocationBasedRow>> GetClientUserTranscriptionsReviewLocationBasedAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID) => GetClientUserTranscriptionsReviewLocationBasedAsync(connection, clientID, userID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetClientUserTranscriptionsReviewLocationBasedRow>> GetClientUserTranscriptionsReviewLocationBasedAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Transcriptions_Review_LocationBased");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetClientUserTranscriptionsReviewLocationBasedRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordForClientID = reader.GetOrdinal("For_Client_ID");
			int ordForUserID = reader.GetOrdinal("For_User_ID");
			int ordAdditionalTemplateID = reader.GetOrdinal("Additional_Template_ID");
			int ordCanEdit = reader.GetOrdinal("Can_Edit");
			int ordCanEditHeader = reader.GetOrdinal("Can_Edit_Header");
			int ordCanComplete = reader.GetOrdinal("Can_Complete");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordDateDictatedCST = reader.GetOrdinal("Date_Dictated_CST");
			int ordComment = reader.GetOrdinal("Comment");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_TimeZone_Identifier");

			do
			{
				result.Add(new GetClientUserTranscriptionsReviewLocationBasedRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					DocumentType = GetField<String>(reader, ordDocumentType),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					ForClientID = GetNonNullFieldValue<Int32>(reader, ordForClientID),
					ForUserID = GetFieldValue<Int32>(reader, ordForUserID),
					AdditionalTemplateID = GetFieldValue<Int32>(reader, ordAdditionalTemplateID),
					CanEdit = GetFieldValue<Boolean>(reader, ordCanEdit),
					CanEditHeader = GetFieldValue<Boolean>(reader, ordCanEditHeader),
					CanComplete = GetFieldValue<Boolean>(reader, ordCanComplete),
					UserFullname = GetField<String>(reader, ordUserFullname),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					DateDictatedCST = GetFieldValue<DateTime>(reader, ordDateDictatedCST),
					Comment = GetField<String>(reader, ordComment),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetField<String>(reader, ordServerTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserTranscriptionsReview2Row>> GetClientUserTranscriptionsReview2Async(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID) => GetClientUserTranscriptionsReview2Async(connection, clientID, userID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetClientUserTranscriptionsReview2Row>> GetClientUserTranscriptionsReview2Async(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Transcriptions_Review2");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetClientUserTranscriptionsReview2Row>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordForClientID = reader.GetOrdinal("For_Client_ID");
			int ordForUserID = reader.GetOrdinal("For_User_ID");
			int ordAdditionalTemplateID = reader.GetOrdinal("Additional_Template_ID");
			int ordCanEdit = reader.GetOrdinal("Can_Edit");
			int ordCanEditHeader = reader.GetOrdinal("Can_Edit_Header");
			int ordCanComplete = reader.GetOrdinal("Can_Complete");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordDateDictatedCST = reader.GetOrdinal("Date_Dictated_CST");
			int ordComment = reader.GetOrdinal("Comment");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_TimeZone_Identifier");

			do
			{
				result.Add(new GetClientUserTranscriptionsReview2Row
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					DocumentType = GetField<String>(reader, ordDocumentType),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					ForClientID = GetNonNullFieldValue<Int32>(reader, ordForClientID),
					ForUserID = GetFieldValue<Int32>(reader, ordForUserID),
					AdditionalTemplateID = GetFieldValue<Int32>(reader, ordAdditionalTemplateID),
					CanEdit = GetFieldValue<Boolean>(reader, ordCanEdit),
					CanEditHeader = GetFieldValue<Boolean>(reader, ordCanEditHeader),
					CanComplete = GetFieldValue<Boolean>(reader, ordCanComplete),
					UserFullname = GetField<String>(reader, ordUserFullname),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					DateDictatedCST = GetFieldValue<DateTime>(reader, ordDateDictatedCST),
					Comment = GetField<String>(reader, ordComment),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetField<String>(reader, ordServerTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserTranscriptionsReview2LocationBasedRow>> GetClientUserTranscriptionsReview2LocationBasedAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID) => GetClientUserTranscriptionsReview2LocationBasedAsync(connection, clientID, userID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetClientUserTranscriptionsReview2LocationBasedRow>> GetClientUserTranscriptionsReview2LocationBasedAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Transcriptions_Review2_LocationBased");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetClientUserTranscriptionsReview2LocationBasedRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordForClientID = reader.GetOrdinal("For_Client_ID");
			int ordForUserID = reader.GetOrdinal("For_User_ID");
			int ordAdditionalTemplateID = reader.GetOrdinal("Additional_Template_ID");
			int ordCanEdit = reader.GetOrdinal("Can_Edit");
			int ordCanEditHeader = reader.GetOrdinal("Can_Edit_Header");
			int ordCanComplete = reader.GetOrdinal("Can_Complete");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordDateDictatedCST = reader.GetOrdinal("Date_Dictated_CST");
			int ordComment = reader.GetOrdinal("Comment");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_TimeZone_Identifier");

			do
			{
				result.Add(new GetClientUserTranscriptionsReview2LocationBasedRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					DocumentType = GetField<String>(reader, ordDocumentType),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					ForClientID = GetNonNullFieldValue<Int32>(reader, ordForClientID),
					ForUserID = GetFieldValue<Int32>(reader, ordForUserID),
					AdditionalTemplateID = GetFieldValue<Int32>(reader, ordAdditionalTemplateID),
					CanEdit = GetFieldValue<Boolean>(reader, ordCanEdit),
					CanEditHeader = GetFieldValue<Boolean>(reader, ordCanEditHeader),
					CanComplete = GetFieldValue<Boolean>(reader, ordCanComplete),
					UserFullname = GetField<String>(reader, ordUserFullname),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					DateDictatedCST = GetFieldValue<DateTime>(reader, ordDateDictatedCST),
					Comment = GetField<String>(reader, ordComment),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetField<String>(reader, ordServerTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserTranscriptionsSearchAllRow>> GetClientUserTranscriptionsSearchAllAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 clinicianID, Int32 locationID, Int32 documentID, String patientID, String patientName, String receiptCode, String orderNumber, Int32 additionalAuthenticatorID, DateTimeOffset dateDictatedStart, DateTimeOffset dateDictatedEnd, DateTimeOffset appointmentDateStart, DateTimeOffset appointmentDateEnd, Boolean includeLinkedUsers) => GetClientUserTranscriptionsSearchAllAsync(connection, clientID, userID, transcriptionID, clinicianID, locationID, documentID, patientID, patientName, receiptCode, orderNumber, additionalAuthenticatorID, dateDictatedStart, dateDictatedEnd, appointmentDateStart, appointmentDateEnd, includeLinkedUsers, CancellationToken.None);
	public static async Task<List<GetClientUserTranscriptionsSearchAllRow>> GetClientUserTranscriptionsSearchAllAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 clinicianID, Int32 locationID, Int32 documentID, String patientID, String patientName, String receiptCode, String orderNumber, Int32 additionalAuthenticatorID, DateTimeOffset dateDictatedStart, DateTimeOffset dateDictatedEnd, DateTimeOffset appointmentDateStart, DateTimeOffset appointmentDateEnd, Boolean includeLinkedUsers, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Transcriptions_SearchAll");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Clinician_ID", clinicianID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Name", patientName, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Receipt_Code", receiptCode, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@Order_Number", orderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Additional_Authenticator_ID", additionalAuthenticatorID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Date_Dictated_Start", dateDictatedStart, SqlDbType.DateTimeOffset, 10));
		cmd.Parameters.Add(CreateParameter("@Date_Dictated_End", dateDictatedEnd, SqlDbType.DateTimeOffset, 10));
		cmd.Parameters.Add(CreateParameter("@Appointment_Date_Start", appointmentDateStart, SqlDbType.DateTimeOffset, 10));
		cmd.Parameters.Add(CreateParameter("@Appointment_Date_End", appointmentDateEnd, SqlDbType.DateTimeOffset, 10));
		cmd.Parameters.Add(CreateParameter("@Include_Linked_Users", includeLinkedUsers, SqlDbType.Bit, 1));

		var result = new List<GetClientUserTranscriptionsSearchAllRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientName = reader.GetOrdinal("Client_Name");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordTranscriptionMarkedForReview = reader.GetOrdinal("Transcription_Marked_For_Review");
			int ordDateSigned = reader.GetOrdinal("Date_Signed");
			int ordDateCheckedIn = reader.GetOrdinal("Date_Checked_In");
			int ordDateArchived = reader.GetOrdinal("Date_Archived");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordPatientLetterID = reader.GetOrdinal("Patient_Letter_ID");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordPatientEnvelope = reader.GetOrdinal("Patient_Envelope");
			int ordUserCanView = reader.GetOrdinal("UserCanView");
			int ordUserCanEdit = reader.GetOrdinal("UserCanEdit");
			int ordUserCanComplete = reader.GetOrdinal("UserCanComplete");
			int ordUserCanEditHead = reader.GetOrdinal("UserCanEditHead");
			int ordWorkflowStatus = reader.GetOrdinal("WorkflowStatus");
			int ordTagColor = reader.GetOrdinal("Tag_Color");
			int ordComment = reader.GetOrdinal("Comment");
			int ordDateDictatedCST = reader.GetOrdinal("Date_Dictated_CST");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordLinkedUserID = reader.GetOrdinal("Linked_User_ID");
			int ordLinkedUsername = reader.GetOrdinal("Linked_Username");
			int ordReceiptCode = reader.GetOrdinal("Receipt_Code");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_TimeZone_Identifier");

			do
			{
				result.Add(new GetClientUserTranscriptionsSearchAllRow
				{
					ClientName = GetField<String>(reader, ordClientName),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					TranscriptionID = GetFieldValue<Int32>(reader, ordTranscriptionID),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					UserFullname = GetField<String>(reader, ordUserFullname),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					DocumentType = GetField<String>(reader, ordDocumentType),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					TranscriptionMarkedForReview = GetFieldValue<Boolean>(reader, ordTranscriptionMarkedForReview),
					DateSigned = GetFieldValue<DateTime>(reader, ordDateSigned),
					DateCheckedIn = GetFieldValue<DateTime>(reader, ordDateCheckedIn),
					DateArchived = GetFieldValue<DateTime>(reader, ordDateArchived),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					PatientLetterID = GetFieldValue<Int32>(reader, ordPatientLetterID),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					PatientEnvelope = GetFieldValue<Boolean>(reader, ordPatientEnvelope),
					UserCanView = GetFieldValue<Boolean>(reader, ordUserCanView),
					UserCanEdit = GetFieldValue<Boolean>(reader, ordUserCanEdit),
					UserCanComplete = GetFieldValue<Boolean>(reader, ordUserCanComplete),
					UserCanEditHead = GetFieldValue<Boolean>(reader, ordUserCanEditHead),
					WorkflowStatus = GetFieldValue<Int32>(reader, ordWorkflowStatus),
					TagColor = GetField<String>(reader, ordTagColor),
					Comment = GetField<String>(reader, ordComment),
					DateDictatedCST = GetFieldValue<DateTime>(reader, ordDateDictatedCST),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					LinkedUserID = GetFieldValue<Int32>(reader, ordLinkedUserID),
					LinkedUsername = GetField<String>(reader, ordLinkedUsername),
					ReceiptCode = GetField<String>(reader, ordReceiptCode),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetField<String>(reader, ordServerTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserTranscriptionsSearchAllV2Row>> GetClientUserTranscriptionsSearchAllV2Async(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 clinicianID, Int32 locationID, Int32 documentID, String patientID, String patientName, String receiptCode, String orderNumber, Int32 additionalAuthenticatorID, DateTimeOffset dateDictatedStart, DateTimeOffset dateDictatedEnd, DateTimeOffset appointmentDateStart, DateTimeOffset appointmentDateEnd, Boolean includeLinkedUsers) => GetClientUserTranscriptionsSearchAllV2Async(connection, clientID, userID, transcriptionID, clinicianID, locationID, documentID, patientID, patientName, receiptCode, orderNumber, additionalAuthenticatorID, dateDictatedStart, dateDictatedEnd, appointmentDateStart, appointmentDateEnd, includeLinkedUsers, CancellationToken.None);
	public static async Task<List<GetClientUserTranscriptionsSearchAllV2Row>> GetClientUserTranscriptionsSearchAllV2Async(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, Int32 clinicianID, Int32 locationID, Int32 documentID, String patientID, String patientName, String receiptCode, String orderNumber, Int32 additionalAuthenticatorID, DateTimeOffset dateDictatedStart, DateTimeOffset dateDictatedEnd, DateTimeOffset appointmentDateStart, DateTimeOffset appointmentDateEnd, Boolean includeLinkedUsers, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Transcriptions_SearchAll_V2");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Clinician_ID", clinicianID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Name", patientName, SqlDbType.VarChar, 350));
		cmd.Parameters.Add(CreateParameter("@Receipt_Code", receiptCode, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@Order_Number", orderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Additional_Authenticator_ID", additionalAuthenticatorID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Date_Dictated_Start", dateDictatedStart, SqlDbType.DateTimeOffset, 10));
		cmd.Parameters.Add(CreateParameter("@Date_Dictated_End", dateDictatedEnd, SqlDbType.DateTimeOffset, 10));
		cmd.Parameters.Add(CreateParameter("@Appointment_Date_Start", appointmentDateStart, SqlDbType.DateTimeOffset, 10));
		cmd.Parameters.Add(CreateParameter("@Appointment_Date_End", appointmentDateEnd, SqlDbType.DateTimeOffset, 10));
		cmd.Parameters.Add(CreateParameter("@Include_Linked_Users", includeLinkedUsers, SqlDbType.Bit, 1));

		var result = new List<GetClientUserTranscriptionsSearchAllV2Row>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordForClientID = reader.GetOrdinal("For_Client_ID");
			int ordForUserID = reader.GetOrdinal("For_User_ID");
			int ordAdditionalTemplateID = reader.GetOrdinal("Additional_Template_ID");
			int ordCanView = reader.GetOrdinal("Can_View");
			int ordCanEdit = reader.GetOrdinal("Can_Edit");
			int ordCanEditHeader = reader.GetOrdinal("Can_Edit_Header");
			int ordCanComplete = reader.GetOrdinal("Can_Complete");
			int ordWorkflowStatus = reader.GetOrdinal("WorkflowStatus");
			int ordUserFullName = reader.GetOrdinal("User_FullName");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordDateDictatedCST = reader.GetOrdinal("Date_Dictated_CST");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_TimeZone_Identifier");
			int ordDefaultAttestationTemplateID = reader.GetOrdinal("Default_Attestation_Template_ID");
			int ordRequiresAttestation = reader.GetOrdinal("Requires_Attestation");
			int ordComment = reader.GetOrdinal("Comment");

			do
			{
				result.Add(new GetClientUserTranscriptionsSearchAllV2Row
				{
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					DocumentType = GetField<String>(reader, ordDocumentType),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					ForClientID = GetNonNullFieldValue<Int32>(reader, ordForClientID),
					ForUserID = GetFieldValue<Int32>(reader, ordForUserID),
					AdditionalTemplateID = GetFieldValue<Int32>(reader, ordAdditionalTemplateID),
					CanView = GetFieldValue<Boolean>(reader, ordCanView),
					CanEdit = GetFieldValue<Boolean>(reader, ordCanEdit),
					CanEditHeader = GetFieldValue<Boolean>(reader, ordCanEditHeader),
					CanComplete = GetFieldValue<Boolean>(reader, ordCanComplete),
					WorkflowStatus = GetFieldValue<Int32>(reader, ordWorkflowStatus),
					UserFullName = GetField<String>(reader, ordUserFullName),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					DateDictatedCST = GetFieldValue<DateTime>(reader, ordDateDictatedCST),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetField<String>(reader, ordServerTimeZoneIdentifier),
					DefaultAttestationTemplateID = GetFieldValue<Int32>(reader, ordDefaultAttestationTemplateID),
					RequiresAttestation = GetFieldValue<Boolean>(reader, ordRequiresAttestation),
					Comment = GetField<String>(reader, ordComment),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserTranscriptionsUndeliveredRow>> GetClientUserTranscriptionsUndeliveredAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID) => GetClientUserTranscriptionsUndeliveredAsync(connection, clientID, userID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetClientUserTranscriptionsUndeliveredRow>> GetClientUserTranscriptionsUndeliveredAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Transcriptions_Undelivered");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetClientUserTranscriptionsUndeliveredRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordForClientID = reader.GetOrdinal("For_Client_ID");
			int ordForUserID = reader.GetOrdinal("For_User_ID");
			int ordAdditionalTemplateID = reader.GetOrdinal("Additional_Template_ID");
			int ordCanEdit = reader.GetOrdinal("Can_Edit");
			int ordCanEditHeader = reader.GetOrdinal("Can_Edit_Header");
			int ordCanComplete = reader.GetOrdinal("Can_Complete");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordDateDictatedCST = reader.GetOrdinal("Date_Dictated_CST");
			int ordComment = reader.GetOrdinal("Comment");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_TimeZone_Identifier");

			do
			{
				result.Add(new GetClientUserTranscriptionsUndeliveredRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					DocumentType = GetField<String>(reader, ordDocumentType),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					ForClientID = GetNonNullFieldValue<Int32>(reader, ordForClientID),
					ForUserID = GetFieldValue<Int32>(reader, ordForUserID),
					AdditionalTemplateID = GetFieldValue<Int32>(reader, ordAdditionalTemplateID),
					CanEdit = GetFieldValue<Boolean>(reader, ordCanEdit),
					CanEditHeader = GetFieldValue<Boolean>(reader, ordCanEditHeader),
					CanComplete = GetFieldValue<Boolean>(reader, ordCanComplete),
					UserFullname = GetField<String>(reader, ordUserFullname),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					DateDictatedCST = GetFieldValue<DateTime>(reader, ordDateDictatedCST),
					Comment = GetField<String>(reader, ordComment),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetField<String>(reader, ordServerTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUserWorklistEncountersRow>> GetClientUserWorklistEncountersAsync(SqlConnection connection, Int32 clientID, Int32 userID) => GetClientUserWorklistEncountersAsync(connection, clientID, userID, CancellationToken.None);
	public static async Task<List<GetClientUserWorklistEncountersRow>> GetClientUserWorklistEncountersAsync(SqlConnection connection, Int32 clientID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_User_Worklist_Encounters");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetClientUserWorklistEncountersRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordPhysician = reader.GetOrdinal("Physician");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordApptUserField1 = reader.GetOrdinal("Appt_User_Field_1");
			int ordApptUserField2 = reader.GetOrdinal("Appt_User_Field_2");
			int ordApptUserField3 = reader.GetOrdinal("Appt_User_Field_3");
			int ordApptUserField4 = reader.GetOrdinal("Appt_User_Field_4");
			int ordApptUserField5 = reader.GetOrdinal("Appt_User_Field_5");
			int ordAppointmentClientCode = reader.GetOrdinal("Appointment_Client_Code");
			int ordPatientsAppointmentsTypeID = reader.GetOrdinal("Patients_Appointments_Type_ID");
			int ordAdmitDate = reader.GetOrdinal("Admit_Date");
			int ordDischargeDate = reader.GetOrdinal("Discharge_Date");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordAppointmentID = reader.GetOrdinal("Appointment_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordPatientFullName = reader.GetOrdinal("Patient_Full_Name");
			int ordPatientNameFirst = reader.GetOrdinal("Patient_Name_First");
			int ordPatientNameLast = reader.GetOrdinal("Patient_Name_Last");
			int ordPatientNameMiddle = reader.GetOrdinal("Patient_Name_Middle");
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");

			do
			{
				result.Add(new GetClientUserWorklistEncountersRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					PatientID = GetNonNullField<String>(reader, ordPatientID),
					LocationID = GetNonNullFieldValue<Int32>(reader, ordLocationID),
					Physician = GetNonNullField<String>(reader, ordPhysician),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					DictationID = GetField<String>(reader, ordDictationID),
					ApptUserField1 = GetField<String>(reader, ordApptUserField1),
					ApptUserField2 = GetField<String>(reader, ordApptUserField2),
					ApptUserField3 = GetField<String>(reader, ordApptUserField3),
					ApptUserField4 = GetField<String>(reader, ordApptUserField4),
					ApptUserField5 = GetField<String>(reader, ordApptUserField5),
					AppointmentClientCode = GetField<String>(reader, ordAppointmentClientCode),
					PatientsAppointmentsTypeID = GetFieldValue<Int32>(reader, ordPatientsAppointmentsTypeID),
					AdmitDate = GetFieldValue<DateTime>(reader, ordAdmitDate),
					DischargeDate = GetFieldValue<DateTime>(reader, ordDischargeDate),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					AppointmentID = GetNonNullFieldValue<Guid>(reader, ordAppointmentID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					PatientFullName = GetField<String>(reader, ordPatientFullName),
					PatientNameFirst = GetField<String>(reader, ordPatientNameFirst),
					PatientNameLast = GetField<String>(reader, ordPatientNameLast),
					PatientNameMiddle = GetField<String>(reader, ordPatientNameMiddle),
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUsersRow>> GetClientUsersAsync(SqlConnection connection, Int32 clientID) => GetClientUsersAsync(connection, clientID, CancellationToken.None);
	public static async Task<List<GetClientUsersRow>> GetClientUsersAsync(SqlConnection connection, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Users");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetClientUsersRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordDisplayName = reader.GetOrdinal("Display_Name");
			int ordDocumentTypeGroupMask = reader.GetOrdinal("DocumentTypeGroup_Mask");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordClientCode = reader.GetOrdinal("Client_Code");
			int ordUserUsername = reader.GetOrdinal("User_Username");
			int ordUserActive = reader.GetOrdinal("User_Active");
			int ordUserEmail = reader.GetOrdinal("User_Email");
			int ordUserNameLast = reader.GetOrdinal("User_Name_Last");
			int ordUserNameMiddle = reader.GetOrdinal("User_Name_Middle");
			int ordUserNameFirst = reader.GetOrdinal("User_Name_First");
			int ordUserNameSuffix = reader.GetOrdinal("User_Name_Suffix");
			int ordUserNamePrefix = reader.GetOrdinal("User_Name_Prefix");
			int ordUserNameComma = reader.GetOrdinal("User_Name_Comma");

			do
			{
				result.Add(new GetClientUsersRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
					UserFullname = GetField<String>(reader, ordUserFullname),
					DisplayName = GetField<String>(reader, ordDisplayName),
					DocumentTypeGroupMask = GetFieldValue<Int32>(reader, ordDocumentTypeGroupMask),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					DictationID = GetField<String>(reader, ordDictationID),
					ClientCode = GetField<String>(reader, ordClientCode),
					UserUsername = GetField<String>(reader, ordUserUsername),
					UserActive = GetNonNullFieldValue<Boolean>(reader, ordUserActive),
					UserEmail = GetField<String>(reader, ordUserEmail),
					UserNameLast = GetField<String>(reader, ordUserNameLast),
					UserNameMiddle = GetField<String>(reader, ordUserNameMiddle),
					UserNameFirst = GetField<String>(reader, ordUserNameFirst),
					UserNameSuffix = GetField<String>(reader, ordUserNameSuffix),
					UserNamePrefix = GetField<String>(reader, ordUserNamePrefix),
					UserNameComma = GetNonNullFieldValue<Boolean>(reader, ordUserNameComma),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetClientUsersDefaultsRow>> GetClientUsersDefaultsAsync(SqlConnection connection, Int32 clientID) => GetClientUsersDefaultsAsync(connection, clientID, CancellationToken.None);
	public static async Task<List<GetClientUsersDefaultsRow>> GetClientUsersDefaultsAsync(SqlConnection connection, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Client_Users_Defaults");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetClientUsersDefaultsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordDefaultDocumentTypeID = reader.GetOrdinal("Default_Document_Type_ID");
			int ordDefaultLocationID = reader.GetOrdinal("Default_Location_ID");

			do
			{
				result.Add(new GetClientUsersDefaultsRow
				{
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
					DefaultDocumentTypeID = GetFieldValue<Int32>(reader, ordDefaultDocumentTypeID),
					DefaultLocationID = GetFieldValue<Int32>(reader, ordDefaultLocationID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCloudAppRegistrationRow>> GetCloudAppRegistrationAsync(SqlConnection connection, String emdatApplicationCode, Int32 cloudDirectoryID) => GetCloudAppRegistrationAsync(connection, emdatApplicationCode, cloudDirectoryID, CancellationToken.None);
	public static async Task<List<GetCloudAppRegistrationRow>> GetCloudAppRegistrationAsync(SqlConnection connection, String emdatApplicationCode, Int32 cloudDirectoryID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Cloud_App_Registration");

		cmd.Parameters.Add(CreateParameter("@Emdat_Application_Code", emdatApplicationCode, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Cloud_Directory_ID", cloudDirectoryID, SqlDbType.Int, 4));

		var result = new List<GetCloudAppRegistrationRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCloudAppRegistrationID = reader.GetOrdinal("Cloud_App_Registration_ID");
			int ordCloudDirectoryID = reader.GetOrdinal("Cloud_Directory_ID");
			int ordCloudAppRegistrationName = reader.GetOrdinal("Cloud_App_Registration_Name");
			int ordApplicationID = reader.GetOrdinal("Application_ID");
			int ordCertificateThumbprint = reader.GetOrdinal("Certificate_Thumbprint");
			int ordEmdatApplicationCode = reader.GetOrdinal("Emdat_Application_Code");
			int ordAuthority = reader.GetOrdinal("Authority");
			int ordCloudDirectoryName = reader.GetOrdinal("Cloud_Directory_Name");
			int ordTenantID = reader.GetOrdinal("Tenant_ID");

			do
			{
				result.Add(new GetCloudAppRegistrationRow
				{
					CloudAppRegistrationID = GetNonNullFieldValue<Int32>(reader, ordCloudAppRegistrationID),
					CloudDirectoryID = GetNonNullFieldValue<Int32>(reader, ordCloudDirectoryID),
					CloudAppRegistrationName = GetNonNullField<String>(reader, ordCloudAppRegistrationName),
					ApplicationID = GetNonNullField<String>(reader, ordApplicationID),
					CertificateThumbprint = GetField<String>(reader, ordCertificateThumbprint),
					EmdatApplicationCode = GetNonNullField<String>(reader, ordEmdatApplicationCode),
					Authority = GetNonNullField<String>(reader, ordAuthority),
					CloudDirectoryName = GetNonNullField<String>(reader, ordCloudDirectoryName),
					TenantID = GetNonNullField<String>(reader, ordTenantID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyRow>> GetCompanyAsync(SqlConnection connection, Int32 companyID) => GetCompanyAsync(connection, companyID, CancellationToken.None);
	public static async Task<List<GetCompanyRow>> GetCompanyAsync(SqlConnection connection, Int32 companyID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));

		var result = new List<GetCompanyRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordCompanyCode = reader.GetOrdinal("Company_Code");
			int ordCompanyName = reader.GetOrdinal("Company_Name");
			int ordCompanyActive = reader.GetOrdinal("Company_Active");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordTimeZoneIdentifier = reader.GetOrdinal("TimeZone_Identifier");

			do
			{
				result.Add(new GetCompanyRow
				{
					CompanyID = GetNonNullFieldValue<Int32>(reader, ordCompanyID),
					CompanyCode = GetNonNullField<String>(reader, ordCompanyCode),
					CompanyName = GetField<String>(reader, ordCompanyName),
					CompanyActive = GetNonNullFieldValue<Boolean>(reader, ordCompanyActive),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					TimeZoneIdentifier = GetField<String>(reader, ordTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyClientDocumentTypesProgramsRow>> GetCompanyClientDocumentTypesProgramsAsync(SqlConnection connection, Int32 companyId, Int32 clientID) => GetCompanyClientDocumentTypesProgramsAsync(connection, companyId, clientID, CancellationToken.None);
	public static async Task<List<GetCompanyClientDocumentTypesProgramsRow>> GetCompanyClientDocumentTypesProgramsAsync(SqlConnection connection, Int32 companyId, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_Client_DocumentTypes_Programs");

		cmd.Parameters.Add(CreateParameter("@Company_Id", companyId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetCompanyClientDocumentTypesProgramsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordDocumentId = reader.GetOrdinal("Document_Id");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordQARatingProgramID = reader.GetOrdinal("QARating_Program_ID");

			do
			{
				result.Add(new GetCompanyClientDocumentTypesProgramsRow
				{
					CompanyID = GetNonNullFieldValue<Int32>(reader, ordCompanyID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					DocumentId = GetNonNullFieldValue<Int32>(reader, ordDocumentId),
					DocumentType = GetField<String>(reader, ordDocumentType),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					QARatingProgramID = GetNonNullFieldValue<Int32>(reader, ordQARatingProgramID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyClientRelationshipRow>> GetCompanyClientRelationshipAsync(SqlConnection connection, Int32 companyID, Int32 clientID) => GetCompanyClientRelationshipAsync(connection, companyID, clientID, CancellationToken.None);
	public static async Task<List<GetCompanyClientRelationshipRow>> GetCompanyClientRelationshipAsync(SqlConnection connection, Int32 companyID, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_Client_Relationship");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetCompanyClientRelationshipRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordClientPrimaryCompany = reader.GetOrdinal("Client_Primary_Company");
			int ordMaxCheckoutMinutes = reader.GetOrdinal("Max_Checkout_Minutes");
			int ordAddAssociates = reader.GetOrdinal("Add_Associates");
			int ordCanKeepWorkLocal = reader.GetOrdinal("CanKeepWorkLocal");
			int ordIsClientFeedbackEnabled = reader.GetOrdinal("Is_Client_Feedback_Enabled");
			int ordCanCorrect = reader.GetOrdinal("CanCorrect");
			int ordMarkPriorAsQT = reader.GetOrdinal("Mark_Prior_As_QT");
			int ordTranCoQA = reader.GetOrdinal("TranCo_QA");
			int ordTranCoQAOptional = reader.GetOrdinal("TranCo_QA_Optional");
			int ordQALevels = reader.GetOrdinal("QALevels");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetCompanyClientRelationshipRow
				{
					CompanyID = GetNonNullFieldValue<Int32>(reader, ordCompanyID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					ClientPrimaryCompany = GetNonNullFieldValue<Boolean>(reader, ordClientPrimaryCompany),
					MaxCheckoutMinutes = GetNonNullFieldValue<Int32>(reader, ordMaxCheckoutMinutes),
					AddAssociates = GetNonNullFieldValue<Boolean>(reader, ordAddAssociates),
					CanKeepWorkLocal = GetNonNullFieldValue<Boolean>(reader, ordCanKeepWorkLocal),
					IsClientFeedbackEnabled = GetNonNullFieldValue<Boolean>(reader, ordIsClientFeedbackEnabled),
					CanCorrect = GetNonNullFieldValue<Boolean>(reader, ordCanCorrect),
					MarkPriorAsQT = GetNonNullFieldValue<Boolean>(reader, ordMarkPriorAsQT),
					TranCoQA = GetNonNullFieldValue<Boolean>(reader, ordTranCoQA),
					TranCoQAOptional = GetNonNullFieldValue<Boolean>(reader, ordTranCoQAOptional),
					QALevels = GetFieldValue<Int32>(reader, ordQALevels),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyClientsRow>> GetCompanyClientsAsync(SqlConnection connection, Int32 companyID) => GetCompanyClientsAsync(connection, companyID, CancellationToken.None);
	public static async Task<List<GetCompanyClientsRow>> GetCompanyClientsAsync(SqlConnection connection, Int32 companyID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_Clients");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));

		var result = new List<GetCompanyClientsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordClientName = reader.GetOrdinal("Client_Name");
			int ordClientFullName = reader.GetOrdinal("Client_FullName");
			int ordClientActive = reader.GetOrdinal("Client_Active");
			int ordClientAddress1 = reader.GetOrdinal("Client_Address_1");
			int ordClientAddress2 = reader.GetOrdinal("Client_Address_2");
			int ordClientAddress3 = reader.GetOrdinal("Client_Address_3");
			int ordClientCity = reader.GetOrdinal("Client_City");
			int ordClientState = reader.GetOrdinal("Client_State");
			int ordClientZipCode = reader.GetOrdinal("Client_Zip_Code");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordTimeZoneIdentifier = reader.GetOrdinal("TimeZone_Identifier");
			int ordQARatingProgramID = reader.GetOrdinal("QARating_Program_ID");

			do
			{
				result.Add(new GetCompanyClientsRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					ClientName = GetNonNullField<String>(reader, ordClientName),
					ClientFullName = GetField<String>(reader, ordClientFullName),
					ClientActive = GetNonNullFieldValue<Boolean>(reader, ordClientActive),
					ClientAddress1 = GetField<String>(reader, ordClientAddress1),
					ClientAddress2 = GetField<String>(reader, ordClientAddress2),
					ClientAddress3 = GetField<String>(reader, ordClientAddress3),
					ClientCity = GetField<String>(reader, ordClientCity),
					ClientState = GetField<String>(reader, ordClientState),
					ClientZipCode = GetField<String>(reader, ordClientZipCode),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					TimeZoneIdentifier = GetField<String>(reader, ordTimeZoneIdentifier),
					QARatingProgramID = GetFieldValue<Int32>(reader, ordQARatingProgramID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyDefaultPasswordHashAlgorithmRow>> GetCompanyDefaultPasswordHashAlgorithmAsync(SqlConnection connection, Int32 companyID) => GetCompanyDefaultPasswordHashAlgorithmAsync(connection, companyID, CancellationToken.None);
	public static async Task<List<GetCompanyDefaultPasswordHashAlgorithmRow>> GetCompanyDefaultPasswordHashAlgorithmAsync(SqlConnection connection, Int32 companyID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_Default_Password_Hash_Algorithm");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));

		var result = new List<GetCompanyDefaultPasswordHashAlgorithmRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordPasswordHashAlgorithmID = reader.GetOrdinal("Password_Hash_Algorithm_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordDescription = reader.GetOrdinal("Description");
			int ordCaseSensitive = reader.GetOrdinal("Case_Sensitive");
			int ordPRF = reader.GetOrdinal("PRF");
			int ordSaltLength = reader.GetOrdinal("Salt_Length");
			int ordHashLength = reader.GetOrdinal("Hash_Length");
			int ordIterations = reader.GetOrdinal("Iterations");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetCompanyDefaultPasswordHashAlgorithmRow
				{
					PasswordHashAlgorithmID = GetNonNullFieldValue<Int32>(reader, ordPasswordHashAlgorithmID),
					Name = GetNonNullField<String>(reader, ordName),
					Description = GetField<String>(reader, ordDescription),
					CaseSensitive = GetNonNullFieldValue<Boolean>(reader, ordCaseSensitive),
					PRF = GetField<String>(reader, ordPRF),
					SaltLength = GetFieldValue<Int32>(reader, ordSaltLength),
					HashLength = GetFieldValue<Int32>(reader, ordHashLength),
					Iterations = GetFieldValue<Int32>(reader, ordIterations),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyEmailSettingsRow>> GetCompanyEmailSettingsAsync(SqlConnection connection, Int32 companyID) => GetCompanyEmailSettingsAsync(connection, companyID, CancellationToken.None);
	public static async Task<List<GetCompanyEmailSettingsRow>> GetCompanyEmailSettingsAsync(SqlConnection connection, Int32 companyID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_Email_Settings");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));

		var result = new List<GetCompanyEmailSettingsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCompanyName = reader.GetOrdinal("Company_Name");
			int ordCompanyEmail = reader.GetOrdinal("Company_Email");
			int ordWebSiteURL = reader.GetOrdinal("WebSite_URL");
			int ordHelpDeskPhone = reader.GetOrdinal("Help_Desk_Phone");
			int ordHelpDeskURL = reader.GetOrdinal("Help_Desk_URL");
			int ordSystemName = reader.GetOrdinal("System_Name");
			int ordEmailVerificationSubject = reader.GetOrdinal("Email_Verification_Subject");
			int ordEmailVerificationBodyTemplate = reader.GetOrdinal("Email_Verification_Body_Template");
			int ordEmailVerificationBodyFormat = reader.GetOrdinal("Email_Verification_Body_Format");

			do
			{
				result.Add(new GetCompanyEmailSettingsRow
				{
					CompanyName = GetField<String>(reader, ordCompanyName),
					CompanyEmail = GetField<String>(reader, ordCompanyEmail),
					WebSiteURL = GetField<String>(reader, ordWebSiteURL),
					HelpDeskPhone = GetField<String>(reader, ordHelpDeskPhone),
					HelpDeskURL = GetField<String>(reader, ordHelpDeskURL),
					SystemName = GetField<String>(reader, ordSystemName),
					EmailVerificationSubject = GetField<String>(reader, ordEmailVerificationSubject),
					EmailVerificationBodyTemplate = GetField<String>(reader, ordEmailVerificationBodyTemplate),
					EmailVerificationBodyFormat = GetFieldValue<Int32>(reader, ordEmailVerificationBodyFormat),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyInTouchServerRow>> GetCompanyInTouchServerAsync(SqlConnection connection, Int32 companyID, Int32 serverID) => GetCompanyInTouchServerAsync(connection, companyID, serverID, CancellationToken.None);
	public static async Task<List<GetCompanyInTouchServerRow>> GetCompanyInTouchServerAsync(SqlConnection connection, Int32 companyID, Int32 serverID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_InTouch_Server");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Server_ID", serverID, SqlDbType.Int, 4));

		var result = new List<GetCompanyInTouchServerRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordServerID = reader.GetOrdinal("Server_ID");
			int ordMachineCode = reader.GetOrdinal("Machine_Code");
			int ordUseAlternateDIDs = reader.GetOrdinal("Use_Alternate_DIDs");
			int ordLastUpdate = reader.GetOrdinal("Last_Update");
			int ordCompanyID = reader.GetOrdinal("Company_ID");

			do
			{
				result.Add(new GetCompanyInTouchServerRow
				{
					ServerID = GetNonNullFieldValue<Int32>(reader, ordServerID),
					MachineCode = GetField<String>(reader, ordMachineCode),
					UseAlternateDIDs = GetNonNullFieldValue<Boolean>(reader, ordUseAlternateDIDs),
					LastUpdate = GetFieldValue<DateTime>(reader, ordLastUpdate),
					CompanyID = GetFieldValue<Int32>(reader, ordCompanyID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyInTouchServerClientUsersRow>> GetCompanyInTouchServerClientUsersAsync(SqlConnection connection, Int32 companyID, Int32 serverID, Int32 clientID) => GetCompanyInTouchServerClientUsersAsync(connection, companyID, serverID, clientID, CancellationToken.None);
	public static async Task<List<GetCompanyInTouchServerClientUsersRow>> GetCompanyInTouchServerClientUsersAsync(SqlConnection connection, Int32 companyID, Int32 serverID, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_InTouch_Server_Client_Users");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Server_ID", serverID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetCompanyInTouchServerClientUsersRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordDisplayName = reader.GetOrdinal("Display_Name");
			int ordUserNameLast = reader.GetOrdinal("User_Name_Last");
			int ordUserNameFirst = reader.GetOrdinal("User_Name_First");
			int ordDocumentTypeGroupMask = reader.GetOrdinal("DocumentTypeGroup_Mask");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordClientCode = reader.GetOrdinal("Client_Code");
			int ordUserUsername = reader.GetOrdinal("User_Username");
			int ordInTouchReviewPIN = reader.GetOrdinal("InTouch_Review_PIN");
			int ordDictationEmulationID = reader.GetOrdinal("Dictation_Emulation_ID");
			int ordInTouchDID = reader.GetOrdinal("InTouch_DID");
			int ordInTouchID = reader.GetOrdinal("InTouch_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordInTouchGreeting = reader.GetOrdinal("InTouch_Greeting");

			do
			{
				result.Add(new GetCompanyInTouchServerClientUsersRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
					UserFullname = GetField<String>(reader, ordUserFullname),
					DisplayName = GetField<String>(reader, ordDisplayName),
					UserNameLast = GetField<String>(reader, ordUserNameLast),
					UserNameFirst = GetField<String>(reader, ordUserNameFirst),
					DocumentTypeGroupMask = GetFieldValue<Int32>(reader, ordDocumentTypeGroupMask),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					DictationID = GetField<String>(reader, ordDictationID),
					ClientCode = GetField<String>(reader, ordClientCode),
					UserUsername = GetField<String>(reader, ordUserUsername),
					InTouchReviewPIN = GetFieldValue<Int32>(reader, ordInTouchReviewPIN),
					DictationEmulationID = GetFieldValue<Int32>(reader, ordDictationEmulationID),
					InTouchDID = GetField<String>(reader, ordInTouchDID),
					InTouchID = GetField<String>(reader, ordInTouchID),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					InTouchGreeting = GetField<String>(reader, ordInTouchGreeting),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyInTouchServerClientsRow>> GetCompanyInTouchServerClientsAsync(SqlConnection connection, Int32 companyID, Int32 serverID, DateTime lastModifiedDate) => GetCompanyInTouchServerClientsAsync(connection, companyID, serverID, lastModifiedDate, CancellationToken.None);
	public static async Task<List<GetCompanyInTouchServerClientsRow>> GetCompanyInTouchServerClientsAsync(SqlConnection connection, Int32 companyID, Int32 serverID, DateTime lastModifiedDate, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_InTouch_Server_Clients");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Server_ID", serverID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Last_Modified_Date", lastModifiedDate, SqlDbType.DateTime, 8));

		var result = new List<GetCompanyInTouchServerClientsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordClientName = reader.GetOrdinal("Client_Name");
			int ordClientFullName = reader.GetOrdinal("Client_FullName");
			int ordClientActive = reader.GetOrdinal("Client_Active");
			int ordUseDictation = reader.GetOrdinal("Use_Dictation");
			int ordRelationshipActive = reader.GetOrdinal("Relationship_Active");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordTimeZoneIdentifier = reader.GetOrdinal("TimeZone_Identifier");
			int ordInTouchSuspendedAutoUploadHours = reader.GetOrdinal("InTouch_Suspended_Auto_Upload_Hours");
			int ordInTouchGreeting = reader.GetOrdinal("InTouch_Greeting");

			do
			{
				result.Add(new GetCompanyInTouchServerClientsRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					ClientName = GetNonNullField<String>(reader, ordClientName),
					ClientFullName = GetField<String>(reader, ordClientFullName),
					ClientActive = GetNonNullFieldValue<Boolean>(reader, ordClientActive),
					UseDictation = GetNonNullFieldValue<Boolean>(reader, ordUseDictation),
					RelationshipActive = GetNonNullFieldValue<Boolean>(reader, ordRelationshipActive),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					TimeZoneIdentifier = GetField<String>(reader, ordTimeZoneIdentifier),
					InTouchSuspendedAutoUploadHours = GetFieldValue<Int32>(reader, ordInTouchSuspendedAutoUploadHours),
					InTouchGreeting = GetField<String>(reader, ordInTouchGreeting),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyInTouchServerResetUsersRow>> GetCompanyInTouchServerResetUsersAsync(SqlConnection connection, Int32 companyID, Int32 serverID) => GetCompanyInTouchServerResetUsersAsync(connection, companyID, serverID, CancellationToken.None);
	public static async Task<List<GetCompanyInTouchServerResetUsersRow>> GetCompanyInTouchServerResetUsersAsync(SqlConnection connection, Int32 companyID, Int32 serverID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_InTouch_Server_Reset_Users");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Server_ID", serverID, SqlDbType.Int, 4));

		var result = new List<GetCompanyInTouchServerResetUsersRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordDisplayName = reader.GetOrdinal("Display_Name");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetCompanyInTouchServerResetUsersRow
				{
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
					DisplayName = GetField<String>(reader, ordDisplayName),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyInTouchAccountRow>> GetCompanyInTouchAccountAsync(SqlConnection connection, Int32 companyID, Int32 inTouchAccountID) => GetCompanyInTouchAccountAsync(connection, companyID, inTouchAccountID, CancellationToken.None);
	public static async Task<List<GetCompanyInTouchAccountRow>> GetCompanyInTouchAccountAsync(SqlConnection connection, Int32 companyID, Int32 inTouchAccountID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_InTouchAccount");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@InTouchAccount_ID", inTouchAccountID, SqlDbType.Int, 4));

		var result = new List<GetCompanyInTouchAccountRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordInTouchAccountID = reader.GetOrdinal("InTouchAccount_ID");
			int ordMachineCode = reader.GetOrdinal("Machine_Code");
			int ordUseAlternateDIDs = reader.GetOrdinal("Use_Alternate_DIDs");
			int ordLastUpdate = reader.GetOrdinal("Last_Update");
			int ordCompanyID = reader.GetOrdinal("Company_ID");

			do
			{
				result.Add(new GetCompanyInTouchAccountRow
				{
					InTouchAccountID = GetNonNullFieldValue<Int32>(reader, ordInTouchAccountID),
					MachineCode = GetField<String>(reader, ordMachineCode),
					UseAlternateDIDs = GetNonNullFieldValue<Boolean>(reader, ordUseAlternateDIDs),
					LastUpdate = GetFieldValue<DateTime>(reader, ordLastUpdate),
					CompanyID = GetFieldValue<Int32>(reader, ordCompanyID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyPasswordComplexitySettingsRow>> GetCompanyPasswordComplexitySettingsAsync(SqlConnection connection, Int32 companyID) => GetCompanyPasswordComplexitySettingsAsync(connection, companyID, CancellationToken.None);
	public static async Task<List<GetCompanyPasswordComplexitySettingsRow>> GetCompanyPasswordComplexitySettingsAsync(SqlConnection connection, Int32 companyID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_Password_Complexity_Settings");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));

		var result = new List<GetCompanyPasswordComplexitySettingsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordPasswordHistoryCount = reader.GetOrdinal("PasswordHistoryCount");
			int ordPasswordMinimumLength = reader.GetOrdinal("PasswordMinimumLength");
			int ordPasswordPatternLength = reader.GetOrdinal("PasswordPatternLength");
			int ordPasswordCaseSensitive = reader.GetOrdinal("Password_Case_Sensitive");
			int ordPasswordRequireUpperCase = reader.GetOrdinal("Password_Require_Upper_Case");
			int ordPasswordRequireLowerCase = reader.GetOrdinal("Password_Require_Lower_Case");
			int ordPasswordRequireNumerical = reader.GetOrdinal("Password_Require_Numerical");
			int ordPasswordRequireSpecial = reader.GetOrdinal("Password_Require_Special");
			int ordPasswordUsernamePatternLength = reader.GetOrdinal("Password_Username_Pattern_Length");

			do
			{
				result.Add(new GetCompanyPasswordComplexitySettingsRow
				{
					CompanyID = GetNonNullFieldValue<Int32>(reader, ordCompanyID),
					PasswordHistoryCount = GetNonNullFieldValue<Int32>(reader, ordPasswordHistoryCount),
					PasswordMinimumLength = GetNonNullFieldValue<Int32>(reader, ordPasswordMinimumLength),
					PasswordPatternLength = GetNonNullFieldValue<Int32>(reader, ordPasswordPatternLength),
					PasswordCaseSensitive = GetNonNullFieldValue<Boolean>(reader, ordPasswordCaseSensitive),
					PasswordRequireUpperCase = GetNonNullFieldValue<Boolean>(reader, ordPasswordRequireUpperCase),
					PasswordRequireLowerCase = GetNonNullFieldValue<Boolean>(reader, ordPasswordRequireLowerCase),
					PasswordRequireNumerical = GetNonNullFieldValue<Boolean>(reader, ordPasswordRequireNumerical),
					PasswordRequireSpecial = GetNonNullFieldValue<Boolean>(reader, ordPasswordRequireSpecial),
					PasswordUsernamePatternLength = GetNonNullFieldValue<Int32>(reader, ordPasswordUsernamePatternLength),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyQARatingAuthorizationRow>> GetCompanyQARatingAuthorizationAsync(SqlConnection connection, Int32 companyID, Int32 qARatingCompanyID) => GetCompanyQARatingAuthorizationAsync(connection, companyID, qARatingCompanyID, CancellationToken.None);
	public static async Task<List<GetCompanyQARatingAuthorizationRow>> GetCompanyQARatingAuthorizationAsync(SqlConnection connection, Int32 companyID, Int32 qARatingCompanyID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_QARating_Authorization");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@QARating_Company_ID", qARatingCompanyID, SqlDbType.Int, 4));

		var result = new List<GetCompanyQARatingAuthorizationRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordIsAuthorized = reader.GetOrdinal("Is_Authorized");

			do
			{
				result.Add(new GetCompanyQARatingAuthorizationRow
				{
					IsAuthorized = GetFieldValue<Boolean>(reader, ordIsAuthorized),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyQARatingCategoriesRow>> GetCompanyQARatingCategoriesAsync(SqlConnection connection, Int32 companyId) => GetCompanyQARatingCategoriesAsync(connection, companyId, CancellationToken.None);
	public static async Task<List<GetCompanyQARatingCategoriesRow>> GetCompanyQARatingCategoriesAsync(SqlConnection connection, Int32 companyId, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_QARating_Categories");

		cmd.Parameters.Add(CreateParameter("@CompanyId", companyId, SqlDbType.Int, 4));

		var result = new List<GetCompanyQARatingCategoriesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordQARatingCategoryID = reader.GetOrdinal("QARating_Category_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordMaxErrorCount = reader.GetOrdinal("Max_Error_Count");
			int ordMaxErrorDeduction = reader.GetOrdinal("Max_Error_Deduction");
			int ordSortOrder = reader.GetOrdinal("Sort_Order");
			int ordIsActive = reader.GetOrdinal("Is_Active");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetCompanyQARatingCategoriesRow
				{
					CompanyID = GetNonNullFieldValue<Int32>(reader, ordCompanyID),
					QARatingCategoryID = GetNonNullFieldValue<Int32>(reader, ordQARatingCategoryID),
					Name = GetField<String>(reader, ordName),
					MaxErrorCount = GetNonNullFieldValue<Int32>(reader, ordMaxErrorCount),
					MaxErrorDeduction = GetNonNullFieldValue<Decimal>(reader, ordMaxErrorDeduction),
					SortOrder = GetFieldValue<Int32>(reader, ordSortOrder),
					IsActive = GetNonNullFieldValue<Boolean>(reader, ordIsActive),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyQARatingCategoryRow>> GetCompanyQARatingCategoryAsync(SqlConnection connection, Int32 companyId, Int32 categoryId) => GetCompanyQARatingCategoryAsync(connection, companyId, categoryId, CancellationToken.None);
	public static async Task<List<GetCompanyQARatingCategoryRow>> GetCompanyQARatingCategoryAsync(SqlConnection connection, Int32 companyId, Int32 categoryId, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_QARating_Category");

		cmd.Parameters.Add(CreateParameter("@CompanyId", companyId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@CategoryId", categoryId, SqlDbType.Int, 4));

		var result = new List<GetCompanyQARatingCategoryRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordQARatingCategoryID = reader.GetOrdinal("QARating_Category_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordMaxErrorCount = reader.GetOrdinal("Max_Error_Count");
			int ordMaxErrorDeduction = reader.GetOrdinal("Max_Error_Deduction");
			int ordSortOrder = reader.GetOrdinal("Sort_Order");
			int ordIsActive = reader.GetOrdinal("Is_Active");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetCompanyQARatingCategoryRow
				{
					CompanyID = GetNonNullFieldValue<Int32>(reader, ordCompanyID),
					QARatingCategoryID = GetNonNullFieldValue<Int32>(reader, ordQARatingCategoryID),
					Name = GetField<String>(reader, ordName),
					MaxErrorCount = GetNonNullFieldValue<Int32>(reader, ordMaxErrorCount),
					MaxErrorDeduction = GetNonNullFieldValue<Decimal>(reader, ordMaxErrorDeduction),
					SortOrder = GetFieldValue<Int32>(reader, ordSortOrder),
					IsActive = GetNonNullFieldValue<Boolean>(reader, ordIsActive),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyQARatingProgramRow>> GetCompanyQARatingProgramAsync(SqlConnection connection, Int32 companyId, Int32 programId) => GetCompanyQARatingProgramAsync(connection, companyId, programId, CancellationToken.None);
	public static async Task<List<GetCompanyQARatingProgramRow>> GetCompanyQARatingProgramAsync(SqlConnection connection, Int32 companyId, Int32 programId, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_QARating_Program");

		cmd.Parameters.Add(CreateParameter("@CompanyId", companyId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@ProgramId", programId, SqlDbType.Int, 4));

		var result = new List<GetCompanyQARatingProgramRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordQARatingProgramID = reader.GetOrdinal("QARating_Program_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordDescription = reader.GetOrdinal("Description");
			int ordIsActive = reader.GetOrdinal("Is_Active");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetCompanyQARatingProgramRow
				{
					CompanyID = GetNonNullFieldValue<Int32>(reader, ordCompanyID),
					QARatingProgramID = GetNonNullFieldValue<Int32>(reader, ordQARatingProgramID),
					Name = GetNonNullField<String>(reader, ordName),
					Description = GetField<String>(reader, ordDescription),
					IsActive = GetNonNullFieldValue<Boolean>(reader, ordIsActive),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyQARatingProgramRatingRow>> GetCompanyQARatingProgramRatingAsync(SqlConnection connection, Int32 companyId, Int32 programId, Int32 ratingId) => GetCompanyQARatingProgramRatingAsync(connection, companyId, programId, ratingId, CancellationToken.None);
	public static async Task<List<GetCompanyQARatingProgramRatingRow>> GetCompanyQARatingProgramRatingAsync(SqlConnection connection, Int32 companyId, Int32 programId, Int32 ratingId, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_QARating_Program_Rating");

		cmd.Parameters.Add(CreateParameter("@CompanyId", companyId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@ProgramId", programId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@RatingId", ratingId, SqlDbType.Int, 4));

		var result = new List<GetCompanyQARatingProgramRatingRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordQARatingProgramID = reader.GetOrdinal("QARating_Program_ID");
			int ordQARatingCategoryCompanyID = reader.GetOrdinal("QARating_Category_Company_ID");
			int ordQARatingCategoryID = reader.GetOrdinal("QARating_Category_ID");
			int ordQARatingID = reader.GetOrdinal("QARating_ID");
			int ordDescription = reader.GetOrdinal("Description");
			int ordPoints = reader.GetOrdinal("Points");
			int ordSortOrder = reader.GetOrdinal("Sort_Order");
			int ordIsActive = reader.GetOrdinal("Is_Active");
			int ordShortcut = reader.GetOrdinal("Shortcut");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetCompanyQARatingProgramRatingRow
				{
					CompanyID = GetNonNullFieldValue<Int32>(reader, ordCompanyID),
					QARatingProgramID = GetNonNullFieldValue<Int32>(reader, ordQARatingProgramID),
					QARatingCategoryCompanyID = GetNonNullFieldValue<Int32>(reader, ordQARatingCategoryCompanyID),
					QARatingCategoryID = GetNonNullFieldValue<Int32>(reader, ordQARatingCategoryID),
					QARatingID = GetNonNullFieldValue<Int32>(reader, ordQARatingID),
					Description = GetNonNullField<String>(reader, ordDescription),
					Points = GetNonNullFieldValue<Decimal>(reader, ordPoints),
					SortOrder = GetNonNullFieldValue<Int32>(reader, ordSortOrder),
					IsActive = GetNonNullFieldValue<Boolean>(reader, ordIsActive),
					Shortcut = GetField<String>(reader, ordShortcut),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyQARatingProgramRatingsRow>> GetCompanyQARatingProgramRatingsAsync(SqlConnection connection, Int32 companyId, Int32 programId) => GetCompanyQARatingProgramRatingsAsync(connection, companyId, programId, CancellationToken.None);
	public static async Task<List<GetCompanyQARatingProgramRatingsRow>> GetCompanyQARatingProgramRatingsAsync(SqlConnection connection, Int32 companyId, Int32 programId, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_QARating_Program_Ratings");

		cmd.Parameters.Add(CreateParameter("@CompanyId", companyId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@ProgramId", programId, SqlDbType.Int, 4));

		var result = new List<GetCompanyQARatingProgramRatingsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordQARatingProgramID = reader.GetOrdinal("QARating_Program_ID");
			int ordQARatingCategoryCompanyID = reader.GetOrdinal("QARating_Category_Company_ID");
			int ordQARatingCategoryID = reader.GetOrdinal("QARating_Category_ID");
			int ordQARatingID = reader.GetOrdinal("QARating_ID");
			int ordDescription = reader.GetOrdinal("Description");
			int ordPoints = reader.GetOrdinal("Points");
			int ordSortOrder = reader.GetOrdinal("Sort_Order");
			int ordIsActive = reader.GetOrdinal("Is_Active");
			int ordShortcut = reader.GetOrdinal("Shortcut");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetCompanyQARatingProgramRatingsRow
				{
					CompanyID = GetNonNullFieldValue<Int32>(reader, ordCompanyID),
					QARatingProgramID = GetNonNullFieldValue<Int32>(reader, ordQARatingProgramID),
					QARatingCategoryCompanyID = GetNonNullFieldValue<Int32>(reader, ordQARatingCategoryCompanyID),
					QARatingCategoryID = GetNonNullFieldValue<Int32>(reader, ordQARatingCategoryID),
					QARatingID = GetNonNullFieldValue<Int32>(reader, ordQARatingID),
					Description = GetNonNullField<String>(reader, ordDescription),
					Points = GetNonNullFieldValue<Decimal>(reader, ordPoints),
					SortOrder = GetNonNullFieldValue<Int32>(reader, ordSortOrder),
					IsActive = GetNonNullFieldValue<Boolean>(reader, ordIsActive),
					Shortcut = GetField<String>(reader, ordShortcut),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyQARatingProgramsRow>> GetCompanyQARatingProgramsAsync(SqlConnection connection, Int32 companyId) => GetCompanyQARatingProgramsAsync(connection, companyId, CancellationToken.None);
	public static async Task<List<GetCompanyQARatingProgramsRow>> GetCompanyQARatingProgramsAsync(SqlConnection connection, Int32 companyId, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_QARating_Programs");

		cmd.Parameters.Add(CreateParameter("@CompanyId", companyId, SqlDbType.Int, 4));

		var result = new List<GetCompanyQARatingProgramsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordQARatingProgramID = reader.GetOrdinal("QARating_Program_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordDescription = reader.GetOrdinal("Description");
			int ordIsActive = reader.GetOrdinal("Is_Active");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetCompanyQARatingProgramsRow
				{
					CompanyID = GetNonNullFieldValue<Int32>(reader, ordCompanyID),
					QARatingProgramID = GetNonNullFieldValue<Int32>(reader, ordQARatingProgramID),
					Name = GetNonNullField<String>(reader, ordName),
					Description = GetField<String>(reader, ordDescription),
					IsActive = GetNonNullFieldValue<Boolean>(reader, ordIsActive),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanySupportInformationRow>> GetCompanySupportInformationAsync(SqlConnection connection, Int32 companyID) => GetCompanySupportInformationAsync(connection, companyID, CancellationToken.None);
	public static async Task<List<GetCompanySupportInformationRow>> GetCompanySupportInformationAsync(SqlConnection connection, Int32 companyID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_SupportInformation");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));

		var result = new List<GetCompanySupportInformationRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordLicenseID = reader.GetOrdinal("License_ID");
			int ordLicenseDescription = reader.GetOrdinal("License_Description");
			int ordSystemName = reader.GetOrdinal("System_Name");
			int ordHelpDeskPhone = reader.GetOrdinal("Help_Desk_Phone");

			do
			{
				result.Add(new GetCompanySupportInformationRow
				{
					CompanyID = GetNonNullFieldValue<Int32>(reader, ordCompanyID),
					LicenseID = GetNonNullFieldValue<Int32>(reader, ordLicenseID),
					LicenseDescription = GetField<String>(reader, ordLicenseDescription),
					SystemName = GetField<String>(reader, ordSystemName),
					HelpDeskPhone = GetField<String>(reader, ordHelpDeskPhone),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanySupportInformationInScribeSupportNotesRow>> GetCompanySupportInformationInScribeSupportNotesAsync(SqlConnection connection, Int32 companyID) => GetCompanySupportInformationInScribeSupportNotesAsync(connection, companyID, CancellationToken.None);
	public static async Task<List<GetCompanySupportInformationInScribeSupportNotesRow>> GetCompanySupportInformationInScribeSupportNotesAsync(SqlConnection connection, Int32 companyID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_SupportInformation_InScribeSupportNotes");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));

		var result = new List<GetCompanySupportInformationInScribeSupportNotesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordInScribeSupportNotes = reader.GetOrdinal("InScribe_Support_Notes");

			do
			{
				result.Add(new GetCompanySupportInformationInScribeSupportNotesRow
				{
					CompanyID = GetNonNullFieldValue<Int32>(reader, ordCompanyID),
					InScribeSupportNotes = GetField<String>(reader, ordInScribeSupportNotes),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserRow>> GetCompanyUserAsync(SqlConnection connection, Int32 companyID, Int32 userID) => GetCompanyUserAsync(connection, companyID, userID, CancellationToken.None);
	public static async Task<List<GetCompanyUserRow>> GetCompanyUserAsync(SqlConnection connection, Int32 companyID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetCompanyUserRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionistID = reader.GetOrdinal("Transcriptionist_ID");
			int ordTranscriptionistUsername = reader.GetOrdinal("Transcriptionist_Username");
			int ordTranscriptionistFullname = reader.GetOrdinal("Transcriptionist_Fullname");
			int ordTranscriptionistNameLast = reader.GetOrdinal("Transcriptionist_Name_Last");
			int ordTranscriptionistNameMiddle = reader.GetOrdinal("Transcriptionist_Name_Middle");
			int ordTranscriptionistNameFirst = reader.GetOrdinal("Transcriptionist_Name_First");
			int ordTranscriptionistActive = reader.GetOrdinal("Transcriptionist_Active");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordTranscriptionistEMail = reader.GetOrdinal("Transcriptionist_EMail");
			int ordTranscriptionistPhone1 = reader.GetOrdinal("Transcriptionist_Phone_1");
			int ordTranscriptionistPhone2 = reader.GetOrdinal("Transcriptionist_Phone_2");
			int ordPasswordDaysLeft = reader.GetOrdinal("PasswordDaysLeft");
			int ordPasswordHashAlgorithmID = reader.GetOrdinal("Password_Hash_Algorithm_ID");
			int ordPasswordSalt = reader.GetOrdinal("Password_Salt");
			int ordPasswordHash = reader.GetOrdinal("Password_Hash");
			int ordPasswordModifiedDate = reader.GetOrdinal("PasswordModifiedDate");

			do
			{
				result.Add(new GetCompanyUserRow
				{
					TranscriptionistID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionistID),
					TranscriptionistUsername = GetField<String>(reader, ordTranscriptionistUsername),
					TranscriptionistFullname = GetField<String>(reader, ordTranscriptionistFullname),
					TranscriptionistNameLast = GetField<String>(reader, ordTranscriptionistNameLast),
					TranscriptionistNameMiddle = GetField<String>(reader, ordTranscriptionistNameMiddle),
					TranscriptionistNameFirst = GetField<String>(reader, ordTranscriptionistNameFirst),
					TranscriptionistActive = GetNonNullFieldValue<Boolean>(reader, ordTranscriptionistActive),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					TranscriptionistEMail = GetField<String>(reader, ordTranscriptionistEMail),
					TranscriptionistPhone1 = GetField<String>(reader, ordTranscriptionistPhone1),
					TranscriptionistPhone2 = GetField<String>(reader, ordTranscriptionistPhone2),
					PasswordDaysLeft = GetFieldValue<Int32>(reader, ordPasswordDaysLeft),
					PasswordHashAlgorithmID = GetFieldValue<Int32>(reader, ordPasswordHashAlgorithmID),
					PasswordSalt = GetField<Byte[]>(reader, ordPasswordSalt),
					PasswordHash = GetField<Byte[]>(reader, ordPasswordHash),
					PasswordModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordPasswordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserByUsernameAndCodeRow>> GetCompanyUserByUsernameAndCodeAsync(SqlConnection connection, String companyCode, String username) => GetCompanyUserByUsernameAndCodeAsync(connection, companyCode, username, CancellationToken.None);
	public static async Task<List<GetCompanyUserByUsernameAndCodeRow>> GetCompanyUserByUsernameAndCodeAsync(SqlConnection connection, String companyCode, String username, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_ByUsernameAndCode");

		cmd.Parameters.Add(CreateParameter("@Company_Code", companyCode, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@Username", username, SqlDbType.VarChar, 26));

		var result = new List<GetCompanyUserByUsernameAndCodeRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionistID = reader.GetOrdinal("Transcriptionist_ID");
			int ordTranscriptionistUsername = reader.GetOrdinal("Transcriptionist_Username");
			int ordTranscriptionistFullname = reader.GetOrdinal("Transcriptionist_Fullname");
			int ordTranscriptionistNameLast = reader.GetOrdinal("Transcriptionist_Name_Last");
			int ordTranscriptionistNameMiddle = reader.GetOrdinal("Transcriptionist_Name_Middle");
			int ordTranscriptionistNameFirst = reader.GetOrdinal("Transcriptionist_Name_First");
			int ordTranscriptionistActive = reader.GetOrdinal("Transcriptionist_Active");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordTranscriptionistEMail = reader.GetOrdinal("Transcriptionist_EMail");
			int ordTranscriptionistPhone1 = reader.GetOrdinal("Transcriptionist_Phone_1");
			int ordTranscriptionistPhone2 = reader.GetOrdinal("Transcriptionist_Phone_2");
			int ordPasswordDaysLeft = reader.GetOrdinal("PasswordDaysLeft");
			int ordPasswordHashAlgorithmID = reader.GetOrdinal("Password_Hash_Algorithm_ID");
			int ordPasswordSalt = reader.GetOrdinal("Password_Salt");
			int ordPasswordHash = reader.GetOrdinal("Password_Hash");
			int ordPasswordModifiedDate = reader.GetOrdinal("PasswordModifiedDate");

			do
			{
				result.Add(new GetCompanyUserByUsernameAndCodeRow
				{
					TranscriptionistID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionistID),
					TranscriptionistUsername = GetField<String>(reader, ordTranscriptionistUsername),
					TranscriptionistFullname = GetField<String>(reader, ordTranscriptionistFullname),
					TranscriptionistNameLast = GetField<String>(reader, ordTranscriptionistNameLast),
					TranscriptionistNameMiddle = GetField<String>(reader, ordTranscriptionistNameMiddle),
					TranscriptionistNameFirst = GetField<String>(reader, ordTranscriptionistNameFirst),
					TranscriptionistActive = GetNonNullFieldValue<Boolean>(reader, ordTranscriptionistActive),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					TranscriptionistEMail = GetField<String>(reader, ordTranscriptionistEMail),
					TranscriptionistPhone1 = GetField<String>(reader, ordTranscriptionistPhone1),
					TranscriptionistPhone2 = GetField<String>(reader, ordTranscriptionistPhone2),
					PasswordDaysLeft = GetFieldValue<Int32>(reader, ordPasswordDaysLeft),
					PasswordHashAlgorithmID = GetFieldValue<Int32>(reader, ordPasswordHashAlgorithmID),
					PasswordSalt = GetField<Byte[]>(reader, ordPasswordSalt),
					PasswordHash = GetField<Byte[]>(reader, ordPasswordHash),
					PasswordModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordPasswordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserClientPoolTranscriptionJobRow>> GetCompanyUserClientPoolTranscriptionJobAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 transcriptionID, Boolean enableAvailablePoolJobs) => GetCompanyUserClientPoolTranscriptionJobAsync(connection, companyID, companyUserID, transcriptionID, enableAvailablePoolJobs, CancellationToken.None);
	public static async Task<List<GetCompanyUserClientPoolTranscriptionJobRow>> GetCompanyUserClientPoolTranscriptionJobAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 transcriptionID, Boolean enableAvailablePoolJobs, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_ClientPoolTranscriptionJob");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Company_User_ID", companyUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Enable_Available_Pool_Jobs", enableAvailablePoolJobs, SqlDbType.Bit, 1));

		var result = new List<GetCompanyUserClientPoolTranscriptionJobRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionistCompanyID = reader.GetOrdinal("Transcriptionist_Company_ID");
			int ordTranscriptionistID = reader.GetOrdinal("Transcriptionist_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordCorrectionTID = reader.GetOrdinal("Correction_TID");
			int ordOriginalTID = reader.GetOrdinal("Original_TID");
			int ordTranPriorID = reader.GetOrdinal("Tran_Prior_ID");
			int ordTranNextID = reader.GetOrdinal("Tran_Next_ID");
			int ordTranscriptionUserID = reader.GetOrdinal("Transcription_User_ID");
			int ordDocumentTypeID = reader.GetOrdinal("Document_Type_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordPatientLetterID = reader.GetOrdinal("Patient_Letter_ID");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientCompany = reader.GetOrdinal("Patient_Company");
			int ordPatientAddress1 = reader.GetOrdinal("Patient_Address_1");
			int ordPatientAddress2 = reader.GetOrdinal("Patient_Address_2");
			int ordPatientAddress3 = reader.GetOrdinal("Patient_Address_3");
			int ordPatientCity = reader.GetOrdinal("Patient_City");
			int ordPatientState = reader.GetOrdinal("Patient_State");
			int ordPatientZipCode = reader.GetOrdinal("Patient_Zip_Code");
			int ordPatientHomePhone = reader.GetOrdinal("Patient_Home_Phone");
			int ordPatientWorkPhone = reader.GetOrdinal("Patient_Work_Phone");
			int ordPatientNameLast = reader.GetOrdinal("Patient_Name_Last");
			int ordPatientNameFirst = reader.GetOrdinal("Patient_Name_First");
			int ordPatientNameMiddle = reader.GetOrdinal("Patient_Name_Middle");
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");
			int ordPatientOrderNumber = reader.GetOrdinal("Patient_OrderNumber");
			int ordPatientUserField1 = reader.GetOrdinal("Patient_User_Field_1");
			int ordPatientUserField2 = reader.GetOrdinal("Patient_User_Field_2");
			int ordPatientUserField3 = reader.GetOrdinal("Patient_User_Field_3");
			int ordPatientUserField4 = reader.GetOrdinal("Patient_User_Field_4");
			int ordPatientUserField5 = reader.GetOrdinal("Patient_User_Field_5");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordComment = reader.GetOrdinal("Comment");
			int ordTranscriptionFilepath = reader.GetOrdinal("Transcription_Filepath");
			int ordTranscriptionDictationPath = reader.GetOrdinal("Transcription_DictationPath");
			int ordInitials = reader.GetOrdinal("Initials");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordDueDate = reader.GetOrdinal("Due_Date");
			int ordDateDictationReceived = reader.GetOrdinal("Date_Dictation_Received");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_Time_Zone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_Time_Zone_Identifier");
			int ordReceiptCode = reader.GetOrdinal("Receipt_Code");
			int ordHeaderConfigurationID = reader.GetOrdinal("Header_Configuration_ID");
			int ordPriority = reader.GetOrdinal("Priority");
			int ordPoolPriority = reader.GetOrdinal("Pool Priority");
			int ordDictationLengthInSeconds = reader.GetOrdinal("Dictation_Length_In_Seconds");
			int ordQAOptional = reader.GetOrdinal("QA_Optional");
			int ordQAPercent = reader.GetOrdinal("QA_Percent");
			int ordCanCorrect = reader.GetOrdinal("CanCorrect");
			int ordCanInvalidate = reader.GetOrdinal("CanInvalidate");
			int ordCanChooseQALevel = reader.GetOrdinal("CanChooseQALevel");
			int ordCanDeliverToClient = reader.GetOrdinal("CanDeliverToClient");
			int ordDefaultWorkflowOverride = reader.GetOrdinal("DefaultWorkflowOverride");
			int ordQARatingsEnabled = reader.GetOrdinal("QARatingsEnabled");
			int ordQARatingProgramID = reader.GetOrdinal("QARating_Program_ID");
			int ordQARatingCompanyID = reader.GetOrdinal("QARating_Company_ID");
			int ordIsQAFeedbackGraded = reader.GetOrdinal("IsQAFeedbackGraded");
			int ordCanChangeIsQAFeedbackGraded = reader.GetOrdinal("CanChangeIsQAFeedbackGraded");
			int ordContentTypeID = reader.GetOrdinal("Content_Type_ID");
			int ordCanViewPrior = reader.GetOrdinal("Can_View_Prior");
			int ordLoadFirstPatientVisitArtifactOptionID = reader.GetOrdinal("Load_First_Patient_Visit_Artifact_Option_ID");
			int ordSearchForPatientRelatedArtifactsOnLoadOptionID = reader.GetOrdinal("Search_For_Patient_Related_Artifacts_On_Load_Option_ID");
			int ordShowSinglePatientArtifactOptionID = reader.GetOrdinal("Show_Single_Patient_Artifact_Option_ID");
			int ordShowSinglePatientArtifactFromAuthorListingOptionID = reader.GetOrdinal("Show_Single_Patient_Artifact_From_Author_Listing_Option_ID");
			int ordShowSinglePatientRelatedArtifactOptionID = reader.GetOrdinal("Show_Single_Patient_Related_Artifact_Option_ID");
			int ordTranscriptionMarkedForReview = reader.GetOrdinal("Transcription_Marked_For_Review");
			int ordDictationIndexInSeconds = reader.GetOrdinal("Dictation_Index_InSeconds");
			int ordDescription = reader.GetOrdinal("Description");
			int ordAdmitDate = reader.GetOrdinal("Admit_Date");
			int ordDischargeDate = reader.GetOrdinal("Discharge_Date");
			int ordAccountNumber = reader.GetOrdinal("Account_Number");
			int ordBed = reader.GetOrdinal("Bed");
			int ordFloor = reader.GetOrdinal("Floor");
			int ordPatientLocation = reader.GetOrdinal("Patient_Location");
			int ordAppointmentID = reader.GetOrdinal("Appointment_ID");
			int ordAppointmentPatientsAppointmentsTypeID = reader.GetOrdinal("Appointment_Patients_Appointments_Type_ID");
			int ordAppointmentAppointmentDate = reader.GetOrdinal("Appointment_Appointment_Date");
			int ordAppointmentLocationID = reader.GetOrdinal("Appointment_Location_ID");
			int ordAppointmentDescription = reader.GetOrdinal("Appointment_Description");
			int ordAppointmentOrderNumber = reader.GetOrdinal("Appointment_OrderNumber");
			int ordAppointmentUserField1 = reader.GetOrdinal("Appointment_User_Field_1");
			int ordAppointmentUserField2 = reader.GetOrdinal("Appointment_User_Field_2");
			int ordAppointmentUserField3 = reader.GetOrdinal("Appointment_User_Field_3");
			int ordAppointmentUserField4 = reader.GetOrdinal("Appointment_User_Field_4");
			int ordAppointmentUserField5 = reader.GetOrdinal("Appointment_User_Field_5");
			int ordAppointmentAdmitDate = reader.GetOrdinal("Appointment_Admit_Date");
			int ordAppointmentDischargeDate = reader.GetOrdinal("Appointment_Discharge_Date");
			int ordAppointmentAccountNumber = reader.GetOrdinal("Appointment_Account_Number");
			int ordAppointmentBed = reader.GetOrdinal("Appointment_Bed");
			int ordAppointmentRoom = reader.GetOrdinal("Appointment_Room");
			int ordAppointmentFloor = reader.GetOrdinal("Appointment_Floor");
			int ordAppointmentFacility = reader.GetOrdinal("Appointment_Facility");
			int ordAppointmentPatientLocation = reader.GetOrdinal("Appointment_Patient_Location");
			int ordAppointmentPatientClass = reader.GetOrdinal("Appointment_Patient_Class");
			int ordAppointmentPatientType = reader.GetOrdinal("Appointment_Patient_Type");
			int ordAppointmentAttendingPhysicianName = reader.GetOrdinal("Appointment_Attending_Physician_Name");
			int ordAppointmentAdmittingPhysicianName = reader.GetOrdinal("Appointment_Admitting_Physician_Name");
			int ordAppointmentReferringPhysicianName = reader.GetOrdinal("Appointment_Referring_Physician_Name");
			int ordAppointmentConsultingPhysicianName = reader.GetOrdinal("Appointment_Consulting_Physician_Name");
			int ordAppointmentPrimaryCarePhysicianName = reader.GetOrdinal("Appointment_Primary_Care_Physician_Name");
			int ordAppointmentPatientsAppointmentsStatusID = reader.GetOrdinal("Appointment_Patients_Appointments_Status_ID");
			int ordAppointmentAppointmentClientCode = reader.GetOrdinal("Appointment_Appointment_Client_Code");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordCanPrintFromInScribe = reader.GetOrdinal("Can_Print_From_InScribe");

			do
			{
				result.Add(new GetCompanyUserClientPoolTranscriptionJobRow
				{
					TranscriptionistCompanyID = GetFieldValue<Int32>(reader, ordTranscriptionistCompanyID),
					TranscriptionistID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionistID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					CorrectionTID = GetNonNullFieldValue<Int32>(reader, ordCorrectionTID),
					OriginalTID = GetFieldValue<Int32>(reader, ordOriginalTID),
					TranPriorID = GetNonNullFieldValue<Int32>(reader, ordTranPriorID),
					TranNextID = GetNonNullFieldValue<Int32>(reader, ordTranNextID),
					TranscriptionUserID = GetFieldValue<Int32>(reader, ordTranscriptionUserID),
					DocumentTypeID = GetFieldValue<Int32>(reader, ordDocumentTypeID),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					PatientLetterID = GetFieldValue<Int32>(reader, ordPatientLetterID),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientCompany = GetField<String>(reader, ordPatientCompany),
					PatientAddress1 = GetField<String>(reader, ordPatientAddress1),
					PatientAddress2 = GetField<String>(reader, ordPatientAddress2),
					PatientAddress3 = GetField<String>(reader, ordPatientAddress3),
					PatientCity = GetField<String>(reader, ordPatientCity),
					PatientState = GetField<String>(reader, ordPatientState),
					PatientZipCode = GetField<String>(reader, ordPatientZipCode),
					PatientHomePhone = GetField<String>(reader, ordPatientHomePhone),
					PatientWorkPhone = GetField<String>(reader, ordPatientWorkPhone),
					PatientNameLast = GetField<String>(reader, ordPatientNameLast),
					PatientNameFirst = GetField<String>(reader, ordPatientNameFirst),
					PatientNameMiddle = GetField<String>(reader, ordPatientNameMiddle),
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
					PatientOrderNumber = GetField<String>(reader, ordPatientOrderNumber),
					PatientUserField1 = GetField<String>(reader, ordPatientUserField1),
					PatientUserField2 = GetField<String>(reader, ordPatientUserField2),
					PatientUserField3 = GetField<String>(reader, ordPatientUserField3),
					PatientUserField4 = GetField<String>(reader, ordPatientUserField4),
					PatientUserField5 = GetField<String>(reader, ordPatientUserField5),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					Comment = GetField<String>(reader, ordComment),
					TranscriptionFilepath = GetField<String>(reader, ordTranscriptionFilepath),
					TranscriptionDictationPath = GetField<String>(reader, ordTranscriptionDictationPath),
					Initials = GetField<String>(reader, ordInitials),
					DictationID = GetFieldValue<Int32>(reader, ordDictationID),
					DueDate = GetFieldValue<DateTime>(reader, ordDueDate),
					DateDictationReceived = GetFieldValue<DateTime>(reader, ordDateDictationReceived),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetField<String>(reader, ordServerTimeZoneIdentifier),
					ReceiptCode = GetField<String>(reader, ordReceiptCode),
					HeaderConfigurationID = GetFieldValue<Int32>(reader, ordHeaderConfigurationID),
					Priority = GetFieldValue<Int32>(reader, ordPriority),
					PoolPriority = GetFieldValue<Int32>(reader, ordPoolPriority),
					DictationLengthInSeconds = GetFieldValue<Int32>(reader, ordDictationLengthInSeconds),
					QAOptional = GetFieldValue<Boolean>(reader, ordQAOptional),
					QAPercent = GetFieldValue<Int32>(reader, ordQAPercent),
					CanCorrect = GetFieldValue<Boolean>(reader, ordCanCorrect),
					CanInvalidate = GetFieldValue<Boolean>(reader, ordCanInvalidate),
					CanChooseQALevel = GetFieldValue<Boolean>(reader, ordCanChooseQALevel),
					CanDeliverToClient = GetFieldValue<Boolean>(reader, ordCanDeliverToClient),
					DefaultWorkflowOverride = GetFieldValue<Int32>(reader, ordDefaultWorkflowOverride),
					QARatingsEnabled = GetFieldValue<Boolean>(reader, ordQARatingsEnabled),
					QARatingProgramID = GetFieldValue<Int32>(reader, ordQARatingProgramID),
					QARatingCompanyID = GetFieldValue<Int32>(reader, ordQARatingCompanyID),
					IsQAFeedbackGraded = GetFieldValue<Boolean>(reader, ordIsQAFeedbackGraded),
					CanChangeIsQAFeedbackGraded = GetFieldValue<Boolean>(reader, ordCanChangeIsQAFeedbackGraded),
					ContentTypeID = GetFieldValue<Int32>(reader, ordContentTypeID),
					CanViewPrior = GetFieldValue<Boolean>(reader, ordCanViewPrior),
					LoadFirstPatientVisitArtifactOptionID = GetFieldValue<Int32>(reader, ordLoadFirstPatientVisitArtifactOptionID),
					SearchForPatientRelatedArtifactsOnLoadOptionID = GetFieldValue<Int32>(reader, ordSearchForPatientRelatedArtifactsOnLoadOptionID),
					ShowSinglePatientArtifactOptionID = GetFieldValue<Int32>(reader, ordShowSinglePatientArtifactOptionID),
					ShowSinglePatientArtifactFromAuthorListingOptionID = GetFieldValue<Int32>(reader, ordShowSinglePatientArtifactFromAuthorListingOptionID),
					ShowSinglePatientRelatedArtifactOptionID = GetFieldValue<Int32>(reader, ordShowSinglePatientRelatedArtifactOptionID),
					TranscriptionMarkedForReview = GetNonNullFieldValue<Boolean>(reader, ordTranscriptionMarkedForReview),
					DictationIndexInSeconds = GetFieldValue<Int32>(reader, ordDictationIndexInSeconds),
					Description = GetField<String>(reader, ordDescription),
					AdmitDate = GetFieldValue<DateTime>(reader, ordAdmitDate),
					DischargeDate = GetFieldValue<DateTime>(reader, ordDischargeDate),
					AccountNumber = GetField<String>(reader, ordAccountNumber),
					Bed = GetField<String>(reader, ordBed),
					Floor = GetField<String>(reader, ordFloor),
					PatientLocation = GetField<String>(reader, ordPatientLocation),
					AppointmentID = GetFieldValue<Guid>(reader, ordAppointmentID),
					AppointmentPatientsAppointmentsTypeID = GetFieldValue<Int32>(reader, ordAppointmentPatientsAppointmentsTypeID),
					AppointmentAppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentAppointmentDate),
					AppointmentLocationID = GetFieldValue<Int32>(reader, ordAppointmentLocationID),
					AppointmentDescription = GetField<String>(reader, ordAppointmentDescription),
					AppointmentOrderNumber = GetField<String>(reader, ordAppointmentOrderNumber),
					AppointmentUserField1 = GetField<String>(reader, ordAppointmentUserField1),
					AppointmentUserField2 = GetField<String>(reader, ordAppointmentUserField2),
					AppointmentUserField3 = GetField<String>(reader, ordAppointmentUserField3),
					AppointmentUserField4 = GetField<String>(reader, ordAppointmentUserField4),
					AppointmentUserField5 = GetField<String>(reader, ordAppointmentUserField5),
					AppointmentAdmitDate = GetFieldValue<DateTime>(reader, ordAppointmentAdmitDate),
					AppointmentDischargeDate = GetFieldValue<DateTime>(reader, ordAppointmentDischargeDate),
					AppointmentAccountNumber = GetField<String>(reader, ordAppointmentAccountNumber),
					AppointmentBed = GetField<String>(reader, ordAppointmentBed),
					AppointmentRoom = GetField<String>(reader, ordAppointmentRoom),
					AppointmentFloor = GetField<String>(reader, ordAppointmentFloor),
					AppointmentFacility = GetField<String>(reader, ordAppointmentFacility),
					AppointmentPatientLocation = GetField<String>(reader, ordAppointmentPatientLocation),
					AppointmentPatientClass = GetField<String>(reader, ordAppointmentPatientClass),
					AppointmentPatientType = GetField<String>(reader, ordAppointmentPatientType),
					AppointmentAttendingPhysicianName = GetField<String>(reader, ordAppointmentAttendingPhysicianName),
					AppointmentAdmittingPhysicianName = GetField<String>(reader, ordAppointmentAdmittingPhysicianName),
					AppointmentReferringPhysicianName = GetField<String>(reader, ordAppointmentReferringPhysicianName),
					AppointmentConsultingPhysicianName = GetField<String>(reader, ordAppointmentConsultingPhysicianName),
					AppointmentPrimaryCarePhysicianName = GetField<String>(reader, ordAppointmentPrimaryCarePhysicianName),
					AppointmentPatientsAppointmentsStatusID = GetField<String>(reader, ordAppointmentPatientsAppointmentsStatusID),
					AppointmentAppointmentClientCode = GetField<String>(reader, ordAppointmentAppointmentClientCode),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					CanPrintFromInScribe = GetNonNullFieldValue<Boolean>(reader, ordCanPrintFromInScribe),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserClientPoolTranscriptionJobAssociatesRow>> GetCompanyUserClientPoolTranscriptionJobAssociatesAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 transcriptionID) => GetCompanyUserClientPoolTranscriptionJobAssociatesAsync(connection, companyID, companyUserID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetCompanyUserClientPoolTranscriptionJobAssociatesRow>> GetCompanyUserClientPoolTranscriptionJobAssociatesAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_ClientPoolTranscriptionJob_Associates");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Company_User_ID", companyUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetCompanyUserClientPoolTranscriptionJobAssociatesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordAssociateID = reader.GetOrdinal("Associate_ID");
			int ordAssociateNameFirst = reader.GetOrdinal("Associate_Name_First");
			int ordAssociateNameLast = reader.GetOrdinal("Associate_Name_Last");
			int ordAssociateNameMiddle = reader.GetOrdinal("Associate_Name_Middle");
			int ordAssociateFullName = reader.GetOrdinal("Associate_FullName");
			int ordAssociatePrefix = reader.GetOrdinal("Associate_Prefix");
			int ordAssociateSuffix = reader.GetOrdinal("Associate_Suffix");
			int ordAssociateAddress1 = reader.GetOrdinal("Associate_Address_1");
			int ordAssociateAddress2 = reader.GetOrdinal("Associate_Address_2");
			int ordAssociateAddress3 = reader.GetOrdinal("Associate_Address_3");
			int ordAssociateBusinessName = reader.GetOrdinal("Associate_Business_Name");
			int ordAssociateCity = reader.GetOrdinal("Associate_City");
			int ordAssociateClientCode = reader.GetOrdinal("Associate_Client_Code");
			int ordAssociateCountry = reader.GetOrdinal("Associate_Country");
			int ordAssociateEMail = reader.GetOrdinal("Associate_EMail");
			int ordAssociateFax = reader.GetOrdinal("Associate_Fax");
			int ordAssociateGreeting = reader.GetOrdinal("Associate_Greeting");
			int ordAssociatePhone = reader.GetOrdinal("Associate_Phone");
			int ordAssociateSpecialty = reader.GetOrdinal("Associate_Specialty");
			int ordAssociateState = reader.GetOrdinal("Associate_State");
			int ordAssociateTypeID = reader.GetOrdinal("Associate_Type_ID");
			int ordAssociateZipCode = reader.GetOrdinal("Associate_Zip_Code");
			int ordAssociateCompany = reader.GetOrdinal("Associate_Company");
			int ordInformalAssociate = reader.GetOrdinal("Informal_Associate");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordPrimaryAssociate = reader.GetOrdinal("Primary_Associate");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordReferralLocationID = reader.GetOrdinal("Referral_Location_ID");
			int ordReferralUserID = reader.GetOrdinal("Referral_User_ID");
			int ordAssociateAutoFax = reader.GetOrdinal("Associate_AutoFax");
			int ordDeliveryType = reader.GetOrdinal("DeliveryType");

			do
			{
				result.Add(new GetCompanyUserClientPoolTranscriptionJobAssociatesRow
				{
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					AssociateID = GetNonNullFieldValue<Int32>(reader, ordAssociateID),
					AssociateNameFirst = GetField<String>(reader, ordAssociateNameFirst),
					AssociateNameLast = GetField<String>(reader, ordAssociateNameLast),
					AssociateNameMiddle = GetField<String>(reader, ordAssociateNameMiddle),
					AssociateFullName = GetField<String>(reader, ordAssociateFullName),
					AssociatePrefix = GetField<String>(reader, ordAssociatePrefix),
					AssociateSuffix = GetField<String>(reader, ordAssociateSuffix),
					AssociateAddress1 = GetField<String>(reader, ordAssociateAddress1),
					AssociateAddress2 = GetField<String>(reader, ordAssociateAddress2),
					AssociateAddress3 = GetField<String>(reader, ordAssociateAddress3),
					AssociateBusinessName = GetField<String>(reader, ordAssociateBusinessName),
					AssociateCity = GetField<String>(reader, ordAssociateCity),
					AssociateClientCode = GetField<String>(reader, ordAssociateClientCode),
					AssociateCountry = GetField<String>(reader, ordAssociateCountry),
					AssociateEMail = GetField<String>(reader, ordAssociateEMail),
					AssociateFax = GetField<String>(reader, ordAssociateFax),
					AssociateGreeting = GetField<String>(reader, ordAssociateGreeting),
					AssociatePhone = GetField<String>(reader, ordAssociatePhone),
					AssociateSpecialty = GetField<String>(reader, ordAssociateSpecialty),
					AssociateState = GetField<String>(reader, ordAssociateState),
					AssociateTypeID = GetNonNullFieldValue<Int16>(reader, ordAssociateTypeID),
					AssociateZipCode = GetField<String>(reader, ordAssociateZipCode),
					AssociateCompany = GetField<String>(reader, ordAssociateCompany),
					InformalAssociate = GetNonNullFieldValue<Boolean>(reader, ordInformalAssociate),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					PrimaryAssociate = GetNonNullFieldValue<Boolean>(reader, ordPrimaryAssociate),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					ReferralLocationID = GetFieldValue<Int32>(reader, ordReferralLocationID),
					ReferralUserID = GetFieldValue<Int32>(reader, ordReferralUserID),
					AssociateAutoFax = GetNonNullFieldValue<Boolean>(reader, ordAssociateAutoFax),
					DeliveryType = GetNonNullFieldValue<Int32>(reader, ordDeliveryType),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserClientPoolTranscriptionJobLogEntriesRow>> GetCompanyUserClientPoolTranscriptionJobLogEntriesAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 transcriptionID) => GetCompanyUserClientPoolTranscriptionJobLogEntriesAsync(connection, companyID, companyUserID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetCompanyUserClientPoolTranscriptionJobLogEntriesRow>> GetCompanyUserClientPoolTranscriptionJobLogEntriesAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_ClientPoolTranscriptionJob_LogEntries");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Company_User_ID", companyUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetCompanyUserClientPoolTranscriptionJobLogEntriesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordInitials = reader.GetOrdinal("Initials");
			int ordMTUserID = reader.GetOrdinal("MT_User_ID");
			int ordMTUserName = reader.GetOrdinal("MT_User_Name");
			int ordMTLevel = reader.GetOrdinal("MT_Level");
			int ordMTFirstName = reader.GetOrdinal("MT_First_Name");
			int ordMTLastName = reader.GetOrdinal("MT_Last_Name");
			int ordMTInitials = reader.GetOrdinal("MT_Initials");
			int ordQAUserID = reader.GetOrdinal("QA_User_ID");
			int ordQAUserName = reader.GetOrdinal("QA_User_Name");
			int ordQALevel = reader.GetOrdinal("QA_Level");
			int ordQAFirstName = reader.GetOrdinal("QA_First_Name");
			int ordQALastName = reader.GetOrdinal("QA_Last_Name");
			int ordQAInitials = reader.GetOrdinal("QA_Initials");

			do
			{
				result.Add(new GetCompanyUserClientPoolTranscriptionJobLogEntriesRow
				{
					Initials = GetField<String>(reader, ordInitials),
					MTUserID = GetFieldValue<Int32>(reader, ordMTUserID),
					MTUserName = GetField<String>(reader, ordMTUserName),
					MTLevel = GetFieldValue<Int32>(reader, ordMTLevel),
					MTFirstName = GetField<String>(reader, ordMTFirstName),
					MTLastName = GetField<String>(reader, ordMTLastName),
					MTInitials = GetField<String>(reader, ordMTInitials),
					QAUserID = GetFieldValue<Int32>(reader, ordQAUserID),
					QAUserName = GetField<String>(reader, ordQAUserName),
					QALevel = GetFieldValue<Int32>(reader, ordQALevel),
					QAFirstName = GetField<String>(reader, ordQAFirstName),
					QALastName = GetField<String>(reader, ordQALastName),
					QAInitials = GetField<String>(reader, ordQAInitials),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserClientPoolTranscriptionJobOptionalVariablesRow>> GetCompanyUserClientPoolTranscriptionJobOptionalVariablesAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 transcriptionID) => GetCompanyUserClientPoolTranscriptionJobOptionalVariablesAsync(connection, companyID, companyUserID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetCompanyUserClientPoolTranscriptionJobOptionalVariablesRow>> GetCompanyUserClientPoolTranscriptionJobOptionalVariablesAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_ClientPoolTranscriptionJob_OptionalVariables");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Company_User_ID", companyUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetCompanyUserClientPoolTranscriptionJobOptionalVariablesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordFieldName = reader.GetOrdinal("Field_Name");
			int ordFieldValue = reader.GetOrdinal("Field_Value");

			do
			{
				result.Add(new GetCompanyUserClientPoolTranscriptionJobOptionalVariablesRow
				{
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					FieldName = GetNonNullField<String>(reader, ordFieldName),
					FieldValue = GetField<String>(reader, ordFieldValue),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserClientPoolTranscriptionJobSignaturesRow>> GetCompanyUserClientPoolTranscriptionJobSignaturesAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 transcriptionID) => GetCompanyUserClientPoolTranscriptionJobSignaturesAsync(connection, companyID, companyUserID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetCompanyUserClientPoolTranscriptionJobSignaturesRow>> GetCompanyUserClientPoolTranscriptionJobSignaturesAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_ClientPoolTranscriptionJob_Signatures");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Company_User_ID", companyUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetCompanyUserClientPoolTranscriptionJobSignaturesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordAuthorizerFullName = reader.GetOrdinal("Authorizer_FullName");
			int ordAuthorizerID = reader.GetOrdinal("Authorizer_ID");
			int ordAuthenticatorID = reader.GetOrdinal("Authenticator_ID");
			int ordDateSigned = reader.GetOrdinal("Date_Signed");
			int ordSignOrder = reader.GetOrdinal("Sign_Order");

			do
			{
				result.Add(new GetCompanyUserClientPoolTranscriptionJobSignaturesRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					AuthorizerFullName = GetField<String>(reader, ordAuthorizerFullName),
					AuthorizerID = GetNonNullFieldValue<Int32>(reader, ordAuthorizerID),
					AuthenticatorID = GetFieldValue<Int32>(reader, ordAuthenticatorID),
					DateSigned = GetFieldValue<DateTime>(reader, ordDateSigned),
					SignOrder = GetFieldValue<Int32>(reader, ordSignOrder),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserClientPoolTranscriptionJobTagsRow>> GetCompanyUserClientPoolTranscriptionJobTagsAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 transcriptionID, Boolean active) => GetCompanyUserClientPoolTranscriptionJobTagsAsync(connection, companyID, companyUserID, transcriptionID, active, CancellationToken.None);
	public static async Task<List<GetCompanyUserClientPoolTranscriptionJobTagsRow>> GetCompanyUserClientPoolTranscriptionJobTagsAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 transcriptionID, Boolean active, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_ClientPoolTranscriptionJob_Tags");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Company_User_ID", companyUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Active", active, SqlDbType.Bit, 1));

		var result = new List<GetCompanyUserClientPoolTranscriptionJobTagsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordTranscriptionTagID = reader.GetOrdinal("Transcription_Tag_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordColor = reader.GetOrdinal("Color");
			int ordIsActive = reader.GetOrdinal("Is_Active");

			do
			{
				result.Add(new GetCompanyUserClientPoolTranscriptionJobTagsRow
				{
					CompanyID = GetNonNullFieldValue<Int32>(reader, ordCompanyID),
					TranscriptionTagID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionTagID),
					Name = GetField<String>(reader, ordName),
					Color = GetField<String>(reader, ordColor),
					IsActive = GetNonNullFieldValue<Boolean>(reader, ordIsActive),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserContactInfoRow>> GetCompanyUserContactInfoAsync(SqlConnection connection, Int32 companyID, Int32 userID) => GetCompanyUserContactInfoAsync(connection, companyID, userID, CancellationToken.None);
	public static async Task<List<GetCompanyUserContactInfoRow>> GetCompanyUserContactInfoAsync(SqlConnection connection, Int32 companyID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_ContactInfo");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetCompanyUserContactInfoRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionistID = reader.GetOrdinal("Transcriptionist_ID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordEmail = reader.GetOrdinal("Email");
			int ordPhone1 = reader.GetOrdinal("Phone_1");
			int ordPhone2 = reader.GetOrdinal("Phone_2");

			do
			{
				result.Add(new GetCompanyUserContactInfoRow
				{
					TranscriptionistID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionistID),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					Email = GetField<String>(reader, ordEmail),
					Phone1 = GetField<String>(reader, ordPhone1),
					Phone2 = GetField<String>(reader, ordPhone2),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserEmailVerificationStatusRow>> GetCompanyUserEmailVerificationStatusAsync(SqlConnection connection, Int32 companyID, Int32 userID) => GetCompanyUserEmailVerificationStatusAsync(connection, companyID, userID, CancellationToken.None);
	public static async Task<List<GetCompanyUserEmailVerificationStatusRow>> GetCompanyUserEmailVerificationStatusAsync(SqlConnection connection, Int32 companyID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_EmailVerificationStatus");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetCompanyUserEmailVerificationStatusRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordStatusID = reader.GetOrdinal("Status_ID");

			do
			{
				result.Add(new GetCompanyUserEmailVerificationStatusRow
				{
					StatusID = GetNonNullFieldValue<Int32>(reader, ordStatusID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserFeatureFlagRow>> GetCompanyUserFeatureFlagAsync(SqlConnection connection, String featureFlagName, Int32 userID) => GetCompanyUserFeatureFlagAsync(connection, featureFlagName, userID, CancellationToken.None);
	public static async Task<List<GetCompanyUserFeatureFlagRow>> GetCompanyUserFeatureFlagAsync(SqlConnection connection, String featureFlagName, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_Feature_Flag");

		cmd.Parameters.Add(CreateParameter("@Feature_Flag_Name", featureFlagName, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetCompanyUserFeatureFlagRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordIsEnabled = reader.GetOrdinal("Is_Enabled");

			do
			{
				result.Add(new GetCompanyUserFeatureFlagRow
				{
					IsEnabled = GetFieldValue<Int32>(reader, ordIsEnabled),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserFeatureFlag2Row>> GetCompanyUserFeatureFlag2Async(SqlConnection connection, String featureFlagName, Int32 companyID, Int32 userID) => GetCompanyUserFeatureFlag2Async(connection, featureFlagName, companyID, userID, CancellationToken.None);
	public static async Task<List<GetCompanyUserFeatureFlag2Row>> GetCompanyUserFeatureFlag2Async(SqlConnection connection, String featureFlagName, Int32 companyID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_Feature_Flag2");

		cmd.Parameters.Add(CreateParameter("@Feature_Flag_Name", featureFlagName, SqlDbType.VarChar, 100));
		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetCompanyUserFeatureFlag2Row>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordIsEnabled = reader.GetOrdinal("Is_Enabled");

			do
			{
				result.Add(new GetCompanyUserFeatureFlag2Row
				{
					IsEnabled = GetFieldValue<Boolean>(reader, ordIsEnabled),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserMachineClientPoolTranscriptionJobsRow>> GetCompanyUserMachineClientPoolTranscriptionJobsAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, String machineCode) => GetCompanyUserMachineClientPoolTranscriptionJobsAsync(connection, companyID, companyUserID, machineCode, CancellationToken.None);
	public static async Task<List<GetCompanyUserMachineClientPoolTranscriptionJobsRow>> GetCompanyUserMachineClientPoolTranscriptionJobsAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, String machineCode, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_Machine_ClientPoolTranscriptionJobs");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Company_User_ID", companyUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Machine_Code", machineCode, SqlDbType.Char, 25));

		var result = new List<GetCompanyUserMachineClientPoolTranscriptionJobsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionistCompanyID = reader.GetOrdinal("Transcriptionist_Company_ID");
			int ordTranscriptionistID = reader.GetOrdinal("Transcriptionist_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordCorrectionTID = reader.GetOrdinal("Correction_TID");
			int ordOriginalTID = reader.GetOrdinal("Original_TID");
			int ordTranPriorID = reader.GetOrdinal("Tran_Prior_ID");
			int ordTranNextID = reader.GetOrdinal("Tran_Next_ID");
			int ordTranscriptionUserID = reader.GetOrdinal("Transcription_User_ID");
			int ordDocumentTypeID = reader.GetOrdinal("Document_Type_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordPatientLetterID = reader.GetOrdinal("Patient_Letter_ID");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordComment = reader.GetOrdinal("Comment");
			int ordTranscriptionFilepath = reader.GetOrdinal("Transcription_Filepath");
			int ordTranscriptionDictationPath = reader.GetOrdinal("Transcription_DictationPath");
			int ordInitials = reader.GetOrdinal("Initials");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordDueDate = reader.GetOrdinal("Due_Date");
			int ordDateDictationReceived = reader.GetOrdinal("Date_Dictation_Received");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_Time_Zone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_Time_Zone_Identifier");
			int ordReceiptCode = reader.GetOrdinal("Receipt_Code");
			int ordPriority = reader.GetOrdinal("Priority");
			int ordPoolPriority = reader.GetOrdinal("Pool Priority");
			int ordDictationLengthInSeconds = reader.GetOrdinal("Dictation_Length_In_Seconds");
			int ordQAOptional = reader.GetOrdinal("QA_Optional");
			int ordQAPercent = reader.GetOrdinal("QA_Percent");
			int ordCanCorrect = reader.GetOrdinal("CanCorrect");
			int ordCanInvalidate = reader.GetOrdinal("CanInvalidate");
			int ordCanChooseQALevel = reader.GetOrdinal("CanChooseQALevel");
			int ordCanDeliverToClient = reader.GetOrdinal("CanDeliverToClient");
			int ordDefaultWorkflowOverride = reader.GetOrdinal("DefaultWorkflowOverride");
			int ordQARatingsEnabled = reader.GetOrdinal("QARatingsEnabled");
			int ordQARatingProgramID = reader.GetOrdinal("QARating_Program_ID");
			int ordIsQAFeedbackGraded = reader.GetOrdinal("IsQAFeedbackGraded");
			int ordCanChangeIsQAFeedbackGraded = reader.GetOrdinal("CanChangeIsQAFeedbackGraded");
			int ordContentTypeID = reader.GetOrdinal("Content_Type_ID");
			int ordCanViewPrior = reader.GetOrdinal("Can_View_Prior");

			do
			{
				result.Add(new GetCompanyUserMachineClientPoolTranscriptionJobsRow
				{
					TranscriptionistCompanyID = GetFieldValue<Int32>(reader, ordTranscriptionistCompanyID),
					TranscriptionistID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionistID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					CorrectionTID = GetNonNullFieldValue<Int32>(reader, ordCorrectionTID),
					OriginalTID = GetFieldValue<Int32>(reader, ordOriginalTID),
					TranPriorID = GetNonNullFieldValue<Int32>(reader, ordTranPriorID),
					TranNextID = GetNonNullFieldValue<Int32>(reader, ordTranNextID),
					TranscriptionUserID = GetFieldValue<Int32>(reader, ordTranscriptionUserID),
					DocumentTypeID = GetFieldValue<Int32>(reader, ordDocumentTypeID),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					PatientLetterID = GetFieldValue<Int32>(reader, ordPatientLetterID),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					Comment = GetField<String>(reader, ordComment),
					TranscriptionFilepath = GetField<String>(reader, ordTranscriptionFilepath),
					TranscriptionDictationPath = GetField<String>(reader, ordTranscriptionDictationPath),
					Initials = GetField<String>(reader, ordInitials),
					DictationID = GetFieldValue<Int32>(reader, ordDictationID),
					DueDate = GetFieldValue<DateTime>(reader, ordDueDate),
					DateDictationReceived = GetFieldValue<DateTime>(reader, ordDateDictationReceived),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetField<String>(reader, ordServerTimeZoneIdentifier),
					ReceiptCode = GetField<String>(reader, ordReceiptCode),
					Priority = GetFieldValue<Int32>(reader, ordPriority),
					PoolPriority = GetFieldValue<Int32>(reader, ordPoolPriority),
					DictationLengthInSeconds = GetFieldValue<Int32>(reader, ordDictationLengthInSeconds),
					QAOptional = GetFieldValue<Boolean>(reader, ordQAOptional),
					QAPercent = GetFieldValue<Int32>(reader, ordQAPercent),
					CanCorrect = GetFieldValue<Boolean>(reader, ordCanCorrect),
					CanInvalidate = GetFieldValue<Boolean>(reader, ordCanInvalidate),
					CanChooseQALevel = GetFieldValue<Boolean>(reader, ordCanChooseQALevel),
					CanDeliverToClient = GetFieldValue<Boolean>(reader, ordCanDeliverToClient),
					DefaultWorkflowOverride = GetFieldValue<Int32>(reader, ordDefaultWorkflowOverride),
					QARatingsEnabled = GetFieldValue<Boolean>(reader, ordQARatingsEnabled),
					QARatingProgramID = GetFieldValue<Int32>(reader, ordQARatingProgramID),
					IsQAFeedbackGraded = GetFieldValue<Boolean>(reader, ordIsQAFeedbackGraded),
					CanChangeIsQAFeedbackGraded = GetFieldValue<Boolean>(reader, ordCanChangeIsQAFeedbackGraded),
					ContentTypeID = GetFieldValue<Int32>(reader, ordContentTypeID),
					CanViewPrior = GetFieldValue<Boolean>(reader, ordCanViewPrior),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserMachineClientPoolTranscriptionJobsV2Row>> GetCompanyUserMachineClientPoolTranscriptionJobsV2Async(SqlConnection connection, Int32 companyID, Int32 companyUserID, String machineCode) => GetCompanyUserMachineClientPoolTranscriptionJobsV2Async(connection, companyID, companyUserID, machineCode, CancellationToken.None);
	public static async Task<List<GetCompanyUserMachineClientPoolTranscriptionJobsV2Row>> GetCompanyUserMachineClientPoolTranscriptionJobsV2Async(SqlConnection connection, Int32 companyID, Int32 companyUserID, String machineCode, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_Machine_ClientPoolTranscriptionJobs_V2");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Company_User_ID", companyUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Machine_Code", machineCode, SqlDbType.Char, 25));

		var result = new List<GetCompanyUserMachineClientPoolTranscriptionJobsV2Row>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");

			do
			{
				result.Add(new GetCompanyUserMachineClientPoolTranscriptionJobsV2Row
				{
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserPasswordHistoryRow>> GetCompanyUserPasswordHistoryAsync(SqlConnection connection, Int32 companyID, Int32 transcriptionistID) => GetCompanyUserPasswordHistoryAsync(connection, companyID, transcriptionistID, CancellationToken.None);
	public static async Task<List<GetCompanyUserPasswordHistoryRow>> GetCompanyUserPasswordHistoryAsync(SqlConnection connection, Int32 companyID, Int32 transcriptionistID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_Password_History");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));

		var result = new List<GetCompanyUserPasswordHistoryRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionistID = reader.GetOrdinal("Transcriptionist_ID");
			int ordPasswordHash = reader.GetOrdinal("Password_Hash");
			int ordPasswordSalt = reader.GetOrdinal("Password_Salt");
			int ordPasswordHashAlgorithmID = reader.GetOrdinal("Password_Hash_Algorithm_ID");
			int ordPasswordDate = reader.GetOrdinal("PasswordDate");
			int ordCaseSensitive = reader.GetOrdinal("Case_Sensitive");
			int ordHashLength = reader.GetOrdinal("Hash_Length");
			int ordSaltLength = reader.GetOrdinal("Salt_Length");
			int ordIterations = reader.GetOrdinal("Iterations");
			int ordPRF = reader.GetOrdinal("PRF");

			do
			{
				result.Add(new GetCompanyUserPasswordHistoryRow
				{
					TranscriptionistID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionistID),
					PasswordHash = GetField<Byte[]>(reader, ordPasswordHash),
					PasswordSalt = GetField<Byte[]>(reader, ordPasswordSalt),
					PasswordHashAlgorithmID = GetFieldValue<Int32>(reader, ordPasswordHashAlgorithmID),
					PasswordDate = GetFieldValue<DateTime>(reader, ordPasswordDate),
					CaseSensitive = GetNonNullFieldValue<Boolean>(reader, ordCaseSensitive),
					HashLength = GetFieldValue<Int32>(reader, ordHashLength),
					SaltLength = GetFieldValue<Int32>(reader, ordSaltLength),
					Iterations = GetFieldValue<Int32>(reader, ordIterations),
					PRF = GetField<String>(reader, ordPRF),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserPasswordLockRow>> GetCompanyUserPasswordLockAsync(SqlConnection connection, String companyName, String userName) => GetCompanyUserPasswordLockAsync(connection, companyName, userName, CancellationToken.None);
	public static async Task<List<GetCompanyUserPasswordLockRow>> GetCompanyUserPasswordLockAsync(SqlConnection connection, String companyName, String userName, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_Password_Lock");

		cmd.Parameters.Add(CreateParameter("@Company_Name", companyName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 26));

		var result = new List<GetCompanyUserPasswordLockRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordIsLocked = reader.GetOrdinal("Is_Locked");
			int ordPasswordDaysLeft = reader.GetOrdinal("Password_Days_Left");

			do
			{
				result.Add(new GetCompanyUserPasswordLockRow
				{
					IsLocked = GetNonNullFieldValue<Boolean>(reader, ordIsLocked),
					PasswordDaysLeft = GetFieldValue<Int32>(reader, ordPasswordDaysLeft),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserQAFeedbackCountsRow>> GetCompanyUserQAFeedbackCountsAsync(SqlConnection connection, Int32 companyID, Int32 userID, DateTime lastDate) => GetCompanyUserQAFeedbackCountsAsync(connection, companyID, userID, lastDate, CancellationToken.None);
	public static async Task<List<GetCompanyUserQAFeedbackCountsRow>> GetCompanyUserQAFeedbackCountsAsync(SqlConnection connection, Int32 companyID, Int32 userID, DateTime lastDate, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_QAFeedback_Counts");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Last_Date", lastDate, SqlDbType.DateTime, 8));

		var result = new List<GetCompanyUserQAFeedbackCountsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordNumberOfItems = reader.GetOrdinal("NumberOfItems");
			int ordNewestItemDate = reader.GetOrdinal("NewestItemDate");

			do
			{
				result.Add(new GetCompanyUserQAFeedbackCountsRow
				{
					NumberOfItems = GetFieldValue<Int32>(reader, ordNumberOfItems),
					NewestItemDate = GetFieldValue<DateTime>(reader, ordNewestItemDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserSettingsRow>> GetCompanyUserSettingsAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID) => GetCompanyUserSettingsAsync(connection, companyID, companyUserID, CancellationToken.None);
	public static async Task<List<GetCompanyUserSettingsRow>> GetCompanyUserSettingsAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_Settings");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Company_User_ID", companyUserID, SqlDbType.Int, 4));

		var result = new List<GetCompanyUserSettingsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionistCompanyID = reader.GetOrdinal("Transcriptionist_Company_ID");
			int ordTranscriptionistID = reader.GetOrdinal("Transcriptionist_ID");
			int ordMaxDocumentsInQueue = reader.GetOrdinal("Max_Documents_In_Queue");
			int ordDocumentsInQueue = reader.GetOrdinal("Documents_In_Queue");
			int ordCanAddAssociate = reader.GetOrdinal("Can_Add_Associate");
			int ordCanCheckForDictations = reader.GetOrdinal("Can_Check_For_Dictations");
			int ordCanEditPatient = reader.GetOrdinal("Can_Edit_Patient");
			int ordCanEnterNewTranscription = reader.GetOrdinal("Can_Enter_New_Transcription");
			int ordCanViewPool = reader.GetOrdinal("Can_View_Pool");
			int ordCanViewPrior = reader.GetOrdinal("Can_View_Prior");
			int ordDefaultCanInvalidate = reader.GetOrdinal("Default_CanInvalidate");
			int ordQALevel = reader.GetOrdinal("QALevel");
			int ordShowFinalCounts = reader.GetOrdinal("Show_Final_Counts");
			int ordBenchmarkKBApiURL = reader.GetOrdinal("BenchmarkKB_Api_URL");
			int ordBenchmarkKBSiteID = reader.GetOrdinal("BenchmarkKB_Site_ID");
			int ordBenchmarkKBSiteKey = reader.GetOrdinal("BenchmarkKB_Site_Key");
			int ordDefaultUseTemplateCharacters = reader.GetOrdinal("Default_Use_Template_Characters");
			int ordInScribe6EditorURL = reader.GetOrdinal("InScribe6_Editor_URL");
			int ordInScribe6FeedbackURL = reader.GetOrdinal("InScribe6_Feedback_URL");
			int ordInScribe6SoftwareURL = reader.GetOrdinal("InScribe6_Software_URL");
			int ordInScribe6KnowledgeBaseURL = reader.GetOrdinal("InScribe6_Knowledge_Base_URL");
			int ordInScribe6BenchmarkKBInformationURL = reader.GetOrdinal("InScribe6_Benchmark_KB_Information_URL");
			int ordCanPrintFromInScribe = reader.GetOrdinal("Can_Print_From_InScribe");
			int ordEmailTokenExpirationMinutes = reader.GetOrdinal("Email_Token_Expiration_Minutes");
			int ordEmailVerificationPolicy = reader.GetOrdinal("Email_Verification_Policy");

			do
			{
				result.Add(new GetCompanyUserSettingsRow
				{
					TranscriptionistCompanyID = GetFieldValue<Int32>(reader, ordTranscriptionistCompanyID),
					TranscriptionistID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionistID),
					MaxDocumentsInQueue = GetFieldValue<Int32>(reader, ordMaxDocumentsInQueue),
					DocumentsInQueue = GetNonNullFieldValue<Int32>(reader, ordDocumentsInQueue),
					CanAddAssociate = GetNonNullFieldValue<Boolean>(reader, ordCanAddAssociate),
					CanCheckForDictations = GetNonNullFieldValue<Boolean>(reader, ordCanCheckForDictations),
					CanEditPatient = GetNonNullFieldValue<Boolean>(reader, ordCanEditPatient),
					CanEnterNewTranscription = GetNonNullFieldValue<Boolean>(reader, ordCanEnterNewTranscription),
					CanViewPool = GetNonNullFieldValue<Boolean>(reader, ordCanViewPool),
					CanViewPrior = GetNonNullFieldValue<Boolean>(reader, ordCanViewPrior),
					DefaultCanInvalidate = GetNonNullFieldValue<Boolean>(reader, ordDefaultCanInvalidate),
					QALevel = GetFieldValue<Int32>(reader, ordQALevel),
					ShowFinalCounts = GetNonNullFieldValue<Boolean>(reader, ordShowFinalCounts),
					BenchmarkKBApiURL = GetField<String>(reader, ordBenchmarkKBApiURL),
					BenchmarkKBSiteID = GetField<String>(reader, ordBenchmarkKBSiteID),
					BenchmarkKBSiteKey = GetField<String>(reader, ordBenchmarkKBSiteKey),
					DefaultUseTemplateCharacters = GetNonNullFieldValue<Boolean>(reader, ordDefaultUseTemplateCharacters),
					InScribe6EditorURL = GetField<String>(reader, ordInScribe6EditorURL),
					InScribe6FeedbackURL = GetNonNullField<String>(reader, ordInScribe6FeedbackURL),
					InScribe6SoftwareURL = GetField<String>(reader, ordInScribe6SoftwareURL),
					InScribe6KnowledgeBaseURL = GetField<String>(reader, ordInScribe6KnowledgeBaseURL),
					InScribe6BenchmarkKBInformationURL = GetNonNullField<String>(reader, ordInScribe6BenchmarkKBInformationURL),
					CanPrintFromInScribe = GetNonNullFieldValue<Boolean>(reader, ordCanPrintFromInScribe),
					EmailTokenExpirationMinutes = GetNonNullFieldValue<Int32>(reader, ordEmailTokenExpirationMinutes),
					EmailVerificationPolicy = GetFieldValue<Int32>(reader, ordEmailVerificationPolicy),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserTranscriptionRow>> GetCompanyUserTranscriptionAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 transcriptionID) => GetCompanyUserTranscriptionAsync(connection, companyID, companyUserID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetCompanyUserTranscriptionRow>> GetCompanyUserTranscriptionAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_Transcription");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Company_User_ID", companyUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetCompanyUserTranscriptionRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordUserUsername = reader.GetOrdinal("User_Username");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordDateDictatedCST = reader.GetOrdinal("Date_Dictated_CST");
			int ordDateArchived = reader.GetOrdinal("Date_Archived");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordReceiptCode = reader.GetOrdinal("Receipt_Code");
			int ordComment = reader.GetOrdinal("Comment");

			do
			{
				result.Add(new GetCompanyUserTranscriptionRow
				{
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					UserFullname = GetField<String>(reader, ordUserFullname),
					UserUsername = GetField<String>(reader, ordUserUsername),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					DateDictatedCST = GetFieldValue<DateTime>(reader, ordDateDictatedCST),
					DateArchived = GetFieldValue<DateTime>(reader, ordDateArchived),
					DocumentType = GetField<String>(reader, ordDocumentType),
					ReceiptCode = GetField<String>(reader, ordReceiptCode),
					Comment = GetField<String>(reader, ordComment),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserTranscriptionLogByDateDeliveredRow>> GetCompanyUserTranscriptionLogByDateDeliveredAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 clientID, DateTime startDate, DateTime endDate) => GetCompanyUserTranscriptionLogByDateDeliveredAsync(connection, companyID, companyUserID, clientID, startDate, endDate, CancellationToken.None);
	public static async Task<List<GetCompanyUserTranscriptionLogByDateDeliveredRow>> GetCompanyUserTranscriptionLogByDateDeliveredAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 clientID, DateTime startDate, DateTime endDate, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_TranscriptionLog_ByDateDelivered");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Company_User_ID", companyUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Start_Date", startDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@End_Date", endDate, SqlDbType.DateTime, 8));

		var result = new List<GetCompanyUserTranscriptionLogByDateDeliveredRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionistID = reader.GetOrdinal("Transcriptionist_ID");
			int ordTranscriptionistCompanyID = reader.GetOrdinal("Transcriptionist_Company_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordDocumentDescription = reader.GetOrdinal("Document_Description");
			int ordTranscriptionFilepath = reader.GetOrdinal("Transcription_Filepath");
			int ordDateSigned = reader.GetOrdinal("Date_Signed");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordUserUsername = reader.GetOrdinal("User_Username");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordUserNameFirst = reader.GetOrdinal("User_Name_First");
			int ordUserNameLast = reader.GetOrdinal("User_Name_Last");
			int ordUserNamePrefix = reader.GetOrdinal("User_Name_Prefix");
			int ordUserNameMiddle = reader.GetOrdinal("User_Name_Middle");
			int ordUserNameSuffix = reader.GetOrdinal("User_Name_Suffix");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordLocationName = reader.GetOrdinal("Location_Name");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordReceiptCode = reader.GetOrdinal("Receipt_Code");
			int ordDateDictatedCST = reader.GetOrdinal("Date_Dictated_CST");
			int ordLines = reader.GetOrdinal("Lines");
			int ordTemplateLines = reader.GetOrdinal("Template_Lines");
			int ordTranscriptionistRate = reader.GetOrdinal("Transcriptionist_Rate");
			int ordTemplateRate = reader.GetOrdinal("Template_Rate");
			int ordDocumentPrice = reader.GetOrdinal("Document_Price");
			int ordTranscriptionStat = reader.GetOrdinal("Transcription_Stat");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_TimeZone_Identifier");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetCompanyUserTranscriptionLogByDateDeliveredRow
				{
					TranscriptionistID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionistID),
					TranscriptionistCompanyID = GetFieldValue<Int32>(reader, ordTranscriptionistCompanyID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					DocumentType = GetField<String>(reader, ordDocumentType),
					DocumentDescription = GetField<String>(reader, ordDocumentDescription),
					TranscriptionFilepath = GetField<String>(reader, ordTranscriptionFilepath),
					DateSigned = GetFieldValue<DateTime>(reader, ordDateSigned),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					UserUsername = GetField<String>(reader, ordUserUsername),
					UserFullname = GetField<String>(reader, ordUserFullname),
					UserNameFirst = GetField<String>(reader, ordUserNameFirst),
					UserNameLast = GetField<String>(reader, ordUserNameLast),
					UserNamePrefix = GetField<String>(reader, ordUserNamePrefix),
					UserNameMiddle = GetField<String>(reader, ordUserNameMiddle),
					UserNameSuffix = GetField<String>(reader, ordUserNameSuffix),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					LocationName = GetField<String>(reader, ordLocationName),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					ReceiptCode = GetField<String>(reader, ordReceiptCode),
					DateDictatedCST = GetFieldValue<DateTime>(reader, ordDateDictatedCST),
					Lines = GetFieldValue<Int32>(reader, ordLines),
					TemplateLines = GetFieldValue<Int32>(reader, ordTemplateLines),
					TranscriptionistRate = GetFieldValue<Decimal>(reader, ordTranscriptionistRate),
					TemplateRate = GetFieldValue<Decimal>(reader, ordTemplateRate),
					DocumentPrice = GetFieldValue<Decimal>(reader, ordDocumentPrice),
					TranscriptionStat = GetNonNullFieldValue<Boolean>(reader, ordTranscriptionStat),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetNonNullField<String>(reader, ordServerTimeZoneIdentifier),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserTranscriptionLogByDateDelivered2Row>> GetCompanyUserTranscriptionLogByDateDelivered2Async(SqlConnection connection, Int32 companyID, Int32 companyUserID, String clientName, DateTime startDate, DateTime endDate) => GetCompanyUserTranscriptionLogByDateDelivered2Async(connection, companyID, companyUserID, clientName, startDate, endDate, CancellationToken.None);
	public static async Task<List<GetCompanyUserTranscriptionLogByDateDelivered2Row>> GetCompanyUserTranscriptionLogByDateDelivered2Async(SqlConnection connection, Int32 companyID, Int32 companyUserID, String clientName, DateTime startDate, DateTime endDate, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_TranscriptionLog_ByDateDelivered2");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Company_User_ID", companyUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Start_Date", startDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@End_Date", endDate, SqlDbType.DateTime, 8));

		var result = new List<GetCompanyUserTranscriptionLogByDateDelivered2Row>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordClientName = reader.GetOrdinal("Client_Name");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordLocationName = reader.GetOrdinal("Location_Name");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordReceiptCode = reader.GetOrdinal("Receipt_Code");
			int ordLines = reader.GetOrdinal("Lines");
			int ordTemplateLines = reader.GetOrdinal("Template_Lines");
			int ordTranscriptionistRate = reader.GetOrdinal("Transcriptionist_Rate");
			int ordTemplateRate = reader.GetOrdinal("Template_Rate");
			int ordDocumentPrice = reader.GetOrdinal("Document_Price");
			int ordTranscriptionStat = reader.GetOrdinal("Transcription_Stat");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordIsShadowScribe = reader.GetOrdinal("Is_ShadowScribe");
			int ordTranscriptionLengthInSeconds = reader.GetOrdinal("Transcription_Length_In_Seconds");

			do
			{
				result.Add(new GetCompanyUserTranscriptionLogByDateDelivered2Row
				{
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					ClientName = GetNonNullField<String>(reader, ordClientName),
					DocumentType = GetField<String>(reader, ordDocumentType),
					UserFullname = GetField<String>(reader, ordUserFullname),
					LocationName = GetField<String>(reader, ordLocationName),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					ReceiptCode = GetField<String>(reader, ordReceiptCode),
					Lines = GetFieldValue<Int32>(reader, ordLines),
					TemplateLines = GetFieldValue<Int32>(reader, ordTemplateLines),
					TranscriptionistRate = GetFieldValue<Decimal>(reader, ordTranscriptionistRate),
					TemplateRate = GetFieldValue<Decimal>(reader, ordTemplateRate),
					DocumentPrice = GetFieldValue<Decimal>(reader, ordDocumentPrice),
					TranscriptionStat = GetNonNullFieldValue<Boolean>(reader, ordTranscriptionStat),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					IsShadowScribe = GetNonNullFieldValue<Boolean>(reader, ordIsShadowScribe),
					TranscriptionLengthInSeconds = GetFieldValue<Int32>(reader, ordTranscriptionLengthInSeconds),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserTranscriptionLogByDateTranscribedRow>> GetCompanyUserTranscriptionLogByDateTranscribedAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 clientID, DateTime startDate, DateTime endDate) => GetCompanyUserTranscriptionLogByDateTranscribedAsync(connection, companyID, companyUserID, clientID, startDate, endDate, CancellationToken.None);
	public static async Task<List<GetCompanyUserTranscriptionLogByDateTranscribedRow>> GetCompanyUserTranscriptionLogByDateTranscribedAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 clientID, DateTime startDate, DateTime endDate, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_TranscriptionLog_ByDateTranscribed");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Company_User_ID", companyUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Start_Date", startDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@End_Date", endDate, SqlDbType.DateTime, 8));

		var result = new List<GetCompanyUserTranscriptionLogByDateTranscribedRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionistID = reader.GetOrdinal("Transcriptionist_ID");
			int ordTranscriptionistCompanyID = reader.GetOrdinal("Transcriptionist_Company_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordDocumentDescription = reader.GetOrdinal("Document_Description");
			int ordTranscriptionFilepath = reader.GetOrdinal("Transcription_Filepath");
			int ordDateSigned = reader.GetOrdinal("Date_Signed");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordUserUsername = reader.GetOrdinal("User_Username");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordUserNameFirst = reader.GetOrdinal("User_Name_First");
			int ordUserNameLast = reader.GetOrdinal("User_Name_Last");
			int ordUserNamePrefix = reader.GetOrdinal("User_Name_Prefix");
			int ordUserNameMiddle = reader.GetOrdinal("User_Name_Middle");
			int ordUserNameSuffix = reader.GetOrdinal("User_Name_Suffix");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordLocationName = reader.GetOrdinal("Location_Name");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordReceiptCode = reader.GetOrdinal("Receipt_Code");
			int ordDateDictatedCST = reader.GetOrdinal("Date_Dictated_CST");
			int ordLines = reader.GetOrdinal("Lines");
			int ordTemplateLines = reader.GetOrdinal("Template_Lines");
			int ordTranscriptionistRate = reader.GetOrdinal("Transcriptionist_Rate");
			int ordTemplateRate = reader.GetOrdinal("Template_Rate");
			int ordDocumentPrice = reader.GetOrdinal("Document_Price");
			int ordTranscriptionStat = reader.GetOrdinal("Transcription_Stat");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_TimeZone_Identifier");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetCompanyUserTranscriptionLogByDateTranscribedRow
				{
					TranscriptionistID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionistID),
					TranscriptionistCompanyID = GetFieldValue<Int32>(reader, ordTranscriptionistCompanyID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					DocumentType = GetField<String>(reader, ordDocumentType),
					DocumentDescription = GetField<String>(reader, ordDocumentDescription),
					TranscriptionFilepath = GetField<String>(reader, ordTranscriptionFilepath),
					DateSigned = GetFieldValue<DateTime>(reader, ordDateSigned),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					UserUsername = GetField<String>(reader, ordUserUsername),
					UserFullname = GetField<String>(reader, ordUserFullname),
					UserNameFirst = GetField<String>(reader, ordUserNameFirst),
					UserNameLast = GetField<String>(reader, ordUserNameLast),
					UserNamePrefix = GetField<String>(reader, ordUserNamePrefix),
					UserNameMiddle = GetField<String>(reader, ordUserNameMiddle),
					UserNameSuffix = GetField<String>(reader, ordUserNameSuffix),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					LocationName = GetField<String>(reader, ordLocationName),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					ReceiptCode = GetField<String>(reader, ordReceiptCode),
					DateDictatedCST = GetFieldValue<DateTime>(reader, ordDateDictatedCST),
					Lines = GetFieldValue<Int32>(reader, ordLines),
					TemplateLines = GetFieldValue<Int32>(reader, ordTemplateLines),
					TranscriptionistRate = GetFieldValue<Decimal>(reader, ordTranscriptionistRate),
					TemplateRate = GetFieldValue<Decimal>(reader, ordTemplateRate),
					DocumentPrice = GetFieldValue<Decimal>(reader, ordDocumentPrice),
					TranscriptionStat = GetNonNullFieldValue<Boolean>(reader, ordTranscriptionStat),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetNonNullField<String>(reader, ordServerTimeZoneIdentifier),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserTranscriptionLogByDateTranscribed2Row>> GetCompanyUserTranscriptionLogByDateTranscribed2Async(SqlConnection connection, Int32 companyID, Int32 companyUserID, String clientName, DateTime startDate, DateTime endDate) => GetCompanyUserTranscriptionLogByDateTranscribed2Async(connection, companyID, companyUserID, clientName, startDate, endDate, CancellationToken.None);
	public static async Task<List<GetCompanyUserTranscriptionLogByDateTranscribed2Row>> GetCompanyUserTranscriptionLogByDateTranscribed2Async(SqlConnection connection, Int32 companyID, Int32 companyUserID, String clientName, DateTime startDate, DateTime endDate, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_TranscriptionLog_ByDateTranscribed2");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Company_User_ID", companyUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Start_Date", startDate, SqlDbType.DateTime, 8));
		cmd.Parameters.Add(CreateParameter("@End_Date", endDate, SqlDbType.DateTime, 8));

		var result = new List<GetCompanyUserTranscriptionLogByDateTranscribed2Row>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordClientName = reader.GetOrdinal("Client_Name");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordLocationName = reader.GetOrdinal("Location_Name");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordReceiptCode = reader.GetOrdinal("Receipt_Code");
			int ordLines = reader.GetOrdinal("Lines");
			int ordTemplateLines = reader.GetOrdinal("Template_Lines");
			int ordTranscriptionistRate = reader.GetOrdinal("Transcriptionist_Rate");
			int ordTemplateRate = reader.GetOrdinal("Template_Rate");
			int ordDocumentPrice = reader.GetOrdinal("Document_Price");
			int ordTranscriptionStat = reader.GetOrdinal("Transcription_Stat");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordIsShadowScribe = reader.GetOrdinal("Is_ShadowScribe");
			int ordTranscriptionLengthInSeconds = reader.GetOrdinal("Transcription_Length_In_Seconds");

			do
			{
				result.Add(new GetCompanyUserTranscriptionLogByDateTranscribed2Row
				{
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					ClientName = GetNonNullField<String>(reader, ordClientName),
					DocumentType = GetField<String>(reader, ordDocumentType),
					UserFullname = GetField<String>(reader, ordUserFullname),
					LocationName = GetField<String>(reader, ordLocationName),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					ReceiptCode = GetField<String>(reader, ordReceiptCode),
					Lines = GetFieldValue<Int32>(reader, ordLines),
					TemplateLines = GetFieldValue<Int32>(reader, ordTemplateLines),
					TranscriptionistRate = GetFieldValue<Decimal>(reader, ordTranscriptionistRate),
					TemplateRate = GetFieldValue<Decimal>(reader, ordTemplateRate),
					DocumentPrice = GetFieldValue<Decimal>(reader, ordDocumentPrice),
					TranscriptionStat = GetNonNullFieldValue<Boolean>(reader, ordTranscriptionStat),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					IsShadowScribe = GetNonNullFieldValue<Boolean>(reader, ordIsShadowScribe),
					TranscriptionLengthInSeconds = GetFieldValue<Int32>(reader, ordTranscriptionLengthInSeconds),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserTranscriptionPreviewRow>> GetCompanyUserTranscriptionPreviewAsync(SqlConnection connection, Int32 companyID, Int32 userID, Int32 previewID) => GetCompanyUserTranscriptionPreviewAsync(connection, companyID, userID, previewID, CancellationToken.None);
	public static async Task<List<GetCompanyUserTranscriptionPreviewRow>> GetCompanyUserTranscriptionPreviewAsync(SqlConnection connection, Int32 companyID, Int32 userID, Int32 previewID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_TranscriptionPreview");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Preview_ID", previewID, SqlDbType.Int, 4));

		var result = new List<GetCompanyUserTranscriptionPreviewRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionistCompanyID = reader.GetOrdinal("Transcriptionist_Company_ID");
			int ordTranscriptionistID = reader.GetOrdinal("Transcriptionist_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordPreviewID = reader.GetOrdinal("Preview_ID");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordCanPrint = reader.GetOrdinal("Can_Print");

			do
			{
				result.Add(new GetCompanyUserTranscriptionPreviewRow
				{
					TranscriptionistCompanyID = GetFieldValue<Int32>(reader, ordTranscriptionistCompanyID),
					TranscriptionistID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionistID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					PreviewID = GetNonNullFieldValue<Int32>(reader, ordPreviewID),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					PatientGender = GetField<String>(reader, ordPatientGender),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					DocumentType = GetField<String>(reader, ordDocumentType),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					CanPrint = GetFieldValue<Int32>(reader, ordCanPrint),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserTranscriptionPreviewAssociatesRow>> GetCompanyUserTranscriptionPreviewAssociatesAsync(SqlConnection connection, Int32 companyID, Int32 userID, Int32 previewID) => GetCompanyUserTranscriptionPreviewAssociatesAsync(connection, companyID, userID, previewID, CancellationToken.None);
	public static async Task<List<GetCompanyUserTranscriptionPreviewAssociatesRow>> GetCompanyUserTranscriptionPreviewAssociatesAsync(SqlConnection connection, Int32 companyID, Int32 userID, Int32 previewID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_TranscriptionPreview_Associates");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Preview_ID", previewID, SqlDbType.Int, 4));

		var result = new List<GetCompanyUserTranscriptionPreviewAssociatesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionistCompanyID = reader.GetOrdinal("Transcriptionist_Company_ID");
			int ordTranscriptionistID = reader.GetOrdinal("Transcriptionist_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordPreviewID = reader.GetOrdinal("Preview_ID");
			int ordAssociateClientCode = reader.GetOrdinal("Associate_Client_Code");
			int ordAssociatePrefix = reader.GetOrdinal("Associate_Prefix");
			int ordAssociateNameFirst = reader.GetOrdinal("Associate_Name_First");
			int ordAssociateNameMiddle = reader.GetOrdinal("Associate_Name_Middle");
			int ordAssociateNameLast = reader.GetOrdinal("Associate_Name_Last");
			int ordAssociateSuffix = reader.GetOrdinal("Associate_Suffix");
			int ordAssociateBusinessName = reader.GetOrdinal("Associate_Business_Name");
			int ordAssociateSpecialty = reader.GetOrdinal("Associate_Specialty");
			int ordAssociateGreeting = reader.GetOrdinal("Associate_Greeting");
			int ordAssociateAddress1 = reader.GetOrdinal("Associate_Address_1");
			int ordAssociateAddress2 = reader.GetOrdinal("Associate_Address_2");
			int ordAssociateAddress3 = reader.GetOrdinal("Associate_Address_3");
			int ordAssociateCity = reader.GetOrdinal("Associate_City");
			int ordAssociateState = reader.GetOrdinal("Associate_State");
			int ordAssociateZipCode = reader.GetOrdinal("Associate_Zip_Code");
			int ordAssociateCompany = reader.GetOrdinal("Associate_Company");
			int ordAssociateCountry = reader.GetOrdinal("Associate_Country");
			int ordAssociatePhone = reader.GetOrdinal("Associate_Phone");
			int ordAssociateFax = reader.GetOrdinal("Associate_Fax");
			int ordAssociateEMail = reader.GetOrdinal("Associate_EMail");

			do
			{
				result.Add(new GetCompanyUserTranscriptionPreviewAssociatesRow
				{
					TranscriptionistCompanyID = GetFieldValue<Int32>(reader, ordTranscriptionistCompanyID),
					TranscriptionistID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionistID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					PreviewID = GetNonNullFieldValue<Int32>(reader, ordPreviewID),
					AssociateClientCode = GetField<String>(reader, ordAssociateClientCode),
					AssociatePrefix = GetField<String>(reader, ordAssociatePrefix),
					AssociateNameFirst = GetField<String>(reader, ordAssociateNameFirst),
					AssociateNameMiddle = GetField<String>(reader, ordAssociateNameMiddle),
					AssociateNameLast = GetField<String>(reader, ordAssociateNameLast),
					AssociateSuffix = GetField<String>(reader, ordAssociateSuffix),
					AssociateBusinessName = GetField<String>(reader, ordAssociateBusinessName),
					AssociateSpecialty = GetField<String>(reader, ordAssociateSpecialty),
					AssociateGreeting = GetField<String>(reader, ordAssociateGreeting),
					AssociateAddress1 = GetField<String>(reader, ordAssociateAddress1),
					AssociateAddress2 = GetField<String>(reader, ordAssociateAddress2),
					AssociateAddress3 = GetField<String>(reader, ordAssociateAddress3),
					AssociateCity = GetField<String>(reader, ordAssociateCity),
					AssociateState = GetField<String>(reader, ordAssociateState),
					AssociateZipCode = GetField<String>(reader, ordAssociateZipCode),
					AssociateCompany = GetField<String>(reader, ordAssociateCompany),
					AssociateCountry = GetField<String>(reader, ordAssociateCountry),
					AssociatePhone = GetField<String>(reader, ordAssociatePhone),
					AssociateFax = GetField<String>(reader, ordAssociateFax),
					AssociateEMail = GetField<String>(reader, ordAssociateEMail),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserTranscriptionPreviewCountsRow>> GetCompanyUserTranscriptionPreviewCountsAsync(SqlConnection connection, Int32 companyID, Int32 userID, Int32 clientID, String transcriptionText, String demographicsText) => GetCompanyUserTranscriptionPreviewCountsAsync(connection, companyID, userID, clientID, transcriptionText, demographicsText, CancellationToken.None);
	public static async Task<List<GetCompanyUserTranscriptionPreviewCountsRow>> GetCompanyUserTranscriptionPreviewCountsAsync(SqlConnection connection, Int32 companyID, Int32 userID, Int32 clientID, String transcriptionText, String demographicsText, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_TranscriptionPreview_Counts");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@transcriptionText", transcriptionText, SqlDbType.VarChar));
		cmd.Parameters.Add(CreateParameter("@demographicsText", demographicsText, SqlDbType.VarChar));

		var result = new List<GetCompanyUserTranscriptionPreviewCountsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTotalCharacters = reader.GetOrdinal("TotalCharacters");
			int ordTemplateCharacters = reader.GetOrdinal("TemplateCharacters");
			int ordStandardCharacters = reader.GetOrdinal("StandardCharacters");
			int ordTotalLines = reader.GetOrdinal("TotalLines");
			int ordTemplateLines = reader.GetOrdinal("TemplateLines");
			int ordStandardLines = reader.GetOrdinal("StandardLines");
			int ordCharacterCountTypeID = reader.GetOrdinal("Character_Count_Type_ID");
			int ordCharactersPerBillingUnit = reader.GetOrdinal("Characters_Per_Billing_Unit");
			int ordUseAAMT = reader.GetOrdinal("Use_AAMT");
			int ordUseQT = reader.GetOrdinal("Use_QT");

			do
			{
				result.Add(new GetCompanyUserTranscriptionPreviewCountsRow
				{
					TotalCharacters = GetFieldValue<Int32>(reader, ordTotalCharacters),
					TemplateCharacters = GetFieldValue<Int32>(reader, ordTemplateCharacters),
					StandardCharacters = GetFieldValue<Int32>(reader, ordStandardCharacters),
					TotalLines = GetFieldValue<Int32>(reader, ordTotalLines),
					TemplateLines = GetFieldValue<Int32>(reader, ordTemplateLines),
					StandardLines = GetFieldValue<Int32>(reader, ordStandardLines),
					CharacterCountTypeID = GetFieldValue<Int32>(reader, ordCharacterCountTypeID),
					CharactersPerBillingUnit = GetFieldValue<Int32>(reader, ordCharactersPerBillingUnit),
					UseAAMT = GetFieldValue<Boolean>(reader, ordUseAAMT),
					UseQT = GetFieldValue<Boolean>(reader, ordUseQT),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserTranscriptionsPoolRow>> GetCompanyUserTranscriptionsPoolAsync(SqlConnection connection, Int32 transcriptionCompanyId, Int32 transcriptionistID, String machineCode, Boolean includeVR) => GetCompanyUserTranscriptionsPoolAsync(connection, transcriptionCompanyId, transcriptionistID, machineCode, includeVR, CancellationToken.None);
	public static async Task<List<GetCompanyUserTranscriptionsPoolRow>> GetCompanyUserTranscriptionsPoolAsync(SqlConnection connection, Int32 transcriptionCompanyId, Int32 transcriptionistID, String machineCode, Boolean includeVR, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_Transcriptions_Pool");

		cmd.Parameters.Add(CreateParameter("@Transcription_Company_Id", transcriptionCompanyId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Machine_Code", machineCode, SqlDbType.Char, 25));
		cmd.Parameters.Add(CreateParameter("@IncludeVR", includeVR, SqlDbType.Bit, 1));

		var result = new List<GetCompanyUserTranscriptionsPoolRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordDictationLengthInSeconds = reader.GetOrdinal("Dictation_Length_In_Seconds");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordTranscriptionUserID = reader.GetOrdinal("Transcription_User_ID");
			int ordUserFullName = reader.GetOrdinal("User_FullName");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordDocumentTypeID = reader.GetOrdinal("Document_Type_ID");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordInitials = reader.GetOrdinal("Initials");
			int ordDateCheckedOut = reader.GetOrdinal("Date_Checked_Out");
			int ordPriority = reader.GetOrdinal("Priority");
			int ordPoolPriority = reader.GetOrdinal("Pool Priority");
			int ordDateDictationReceived = reader.GetOrdinal("Date_Dictation_Received");
			int ordDateCheckedOutSort = reader.GetOrdinal("Date_Checked_Out_Sort");
			int ordReceiptCode = reader.GetOrdinal("Receipt_Code");
			int ordDueDate = reader.GetOrdinal("Due_Date");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_Time_Zone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_Time_Zone_Identifier");

			do
			{
				result.Add(new GetCompanyUserTranscriptionsPoolRow
				{
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					DictationLengthInSeconds = GetFieldValue<Int32>(reader, ordDictationLengthInSeconds),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					TranscriptionUserID = GetFieldValue<Int32>(reader, ordTranscriptionUserID),
					UserFullName = GetField<String>(reader, ordUserFullName),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					DocumentTypeID = GetFieldValue<Int32>(reader, ordDocumentTypeID),
					DocumentType = GetField<String>(reader, ordDocumentType),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					Initials = GetField<String>(reader, ordInitials),
					DateCheckedOut = GetFieldValue<DateTime>(reader, ordDateCheckedOut),
					Priority = GetFieldValue<Int32>(reader, ordPriority),
					PoolPriority = GetFieldValue<Int32>(reader, ordPoolPriority),
					DateDictationReceived = GetFieldValue<DateTime>(reader, ordDateDictationReceived),
					DateCheckedOutSort = GetFieldValue<DateTime>(reader, ordDateCheckedOutSort),
					ReceiptCode = GetField<String>(reader, ordReceiptCode),
					DueDate = GetFieldValue<DateTime>(reader, ordDueDate),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetField<String>(reader, ordServerTimeZoneIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetCompanyUserTranscriptionsPoolCountRow>> GetCompanyUserTranscriptionsPoolCountAsync(SqlConnection connection, Int32 transcriptionCompanyId, Int32 transcriptionistID, String machineCode) => GetCompanyUserTranscriptionsPoolCountAsync(connection, transcriptionCompanyId, transcriptionistID, machineCode, CancellationToken.None);
	public static async Task<List<GetCompanyUserTranscriptionsPoolCountRow>> GetCompanyUserTranscriptionsPoolCountAsync(SqlConnection connection, Int32 transcriptionCompanyId, Int32 transcriptionistID, String machineCode, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Company_User_Transcriptions_Pool_Count");

		cmd.Parameters.Add(CreateParameter("@Transcription_Company_Id", transcriptionCompanyId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Machine_Code", machineCode, SqlDbType.Char, 25));

		var result = new List<GetCompanyUserTranscriptionsPoolCountRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTheCount = reader.GetOrdinal("TheCount");

			do
			{
				result.Add(new GetCompanyUserTranscriptionsPoolCountRow
				{
					TheCount = GetFieldValue<Int32>(reader, ordTheCount),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetDefaultHeaderConfigurationRow>> GetDefaultHeaderConfigurationAsync(SqlConnection connection) => GetDefaultHeaderConfigurationAsync(connection, CancellationToken.None);
	public static async Task<List<GetDefaultHeaderConfigurationRow>> GetDefaultHeaderConfigurationAsync(SqlConnection connection, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Default_HeaderConfiguration");

		var result = new List<GetDefaultHeaderConfigurationRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordHeaderConfigurationID = reader.GetOrdinal("Header_Configuration_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordDescription = reader.GetOrdinal("Description");
			int ordDemographicConfiguration = reader.GetOrdinal("Demographic_Configuration");
			int ordPatientSearchConfiguration = reader.GetOrdinal("Patient_Search_Configuration");
			int ordArtifactSearchConfiguration = reader.GetOrdinal("Artifact_Search_Configuration");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordRemovedPatientTranscriptionTagCompanyID = reader.GetOrdinal("Removed_Patient_Transcription_Tag_Company_ID");
			int ordRemovedPatientTranscriptionTagID = reader.GetOrdinal("Removed_Patient_Transcription_Tag_ID");
			int ordRemovedArtifactsTranscriptionTagCompanyID = reader.GetOrdinal("Removed_Artifacts_Transcription_Tag_Company_ID");
			int ordRemovedArtifactsTranscriptionTagID = reader.GetOrdinal("Removed_Artifacts_Transcription_Tag_ID");

			do
			{
				result.Add(new GetDefaultHeaderConfigurationRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					HeaderConfigurationID = GetNonNullFieldValue<Int32>(reader, ordHeaderConfigurationID),
					Name = GetNonNullField<String>(reader, ordName),
					Description = GetField<String>(reader, ordDescription),
					DemographicConfiguration = GetField<String>(reader, ordDemographicConfiguration),
					PatientSearchConfiguration = GetField<String>(reader, ordPatientSearchConfiguration),
					ArtifactSearchConfiguration = GetField<String>(reader, ordArtifactSearchConfiguration),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
					RemovedPatientTranscriptionTagCompanyID = GetFieldValue<Int32>(reader, ordRemovedPatientTranscriptionTagCompanyID),
					RemovedPatientTranscriptionTagID = GetFieldValue<Int32>(reader, ordRemovedPatientTranscriptionTagID),
					RemovedArtifactsTranscriptionTagCompanyID = GetFieldValue<Int32>(reader, ordRemovedArtifactsTranscriptionTagCompanyID),
					RemovedArtifactsTranscriptionTagID = GetFieldValue<Int32>(reader, ordRemovedArtifactsTranscriptionTagID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetDeviceByIdRow>> GetDeviceByIdAsync(SqlConnection connection, Int32 deviceID) => GetDeviceByIdAsync(connection, deviceID, CancellationToken.None);
	public static async Task<List<GetDeviceByIdRow>> GetDeviceByIdAsync(SqlConnection connection, Int32 deviceID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Device_ById");

		cmd.Parameters.Add(CreateParameter("@Device_ID", deviceID, SqlDbType.Int, 4));

		var result = new List<GetDeviceByIdRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDeviceID = reader.GetOrdinal("Device_ID");
			int ordIdentifier = reader.GetOrdinal("Identifier");
			int ordShowDictationLog = reader.GetOrdinal("Show_Dictation_Log");
			int ordExtendedConfigurationInfo = reader.GetOrdinal("Extended_Configuration_Info");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetDeviceByIdRow
				{
					DeviceID = GetNonNullFieldValue<Int32>(reader, ordDeviceID),
					Identifier = GetNonNullField<String>(reader, ordIdentifier),
					ShowDictationLog = GetNonNullFieldValue<Boolean>(reader, ordShowDictationLog),
					ExtendedConfigurationInfo = GetField<String>(reader, ordExtendedConfigurationInfo),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetDeviceByIdentifierRow>> GetDeviceByIdentifierAsync(SqlConnection connection, String identifier) => GetDeviceByIdentifierAsync(connection, identifier, CancellationToken.None);
	public static async Task<List<GetDeviceByIdentifierRow>> GetDeviceByIdentifierAsync(SqlConnection connection, String identifier, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Device_ByIdentifier");

		cmd.Parameters.Add(CreateParameter("@Identifier", identifier, SqlDbType.VarChar, 100));

		var result = new List<GetDeviceByIdentifierRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDeviceID = reader.GetOrdinal("Device_ID");
			int ordDeviceAPITypeID = reader.GetOrdinal("Device_API_Type_ID");
			int ordShowDictationLog = reader.GetOrdinal("Show_Dictation_Log");
			int ordPrintDictationLog = reader.GetOrdinal("Print_Dictation_Log");
			int ordExtendedConfigurationInfo = reader.GetOrdinal("Extended_Configuration_Info");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");

			do
			{
				result.Add(new GetDeviceByIdentifierRow
				{
					DeviceID = GetNonNullFieldValue<Int32>(reader, ordDeviceID),
					DeviceAPITypeID = GetNonNullFieldValue<Int32>(reader, ordDeviceAPITypeID),
					ShowDictationLog = GetNonNullFieldValue<Boolean>(reader, ordShowDictationLog),
					PrintDictationLog = GetFieldValue<Boolean>(reader, ordPrintDictationLog),
					ExtendedConfigurationInfo = GetField<String>(reader, ordExtendedConfigurationInfo),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetDeviceFoldersRow>> GetDeviceFoldersAsync(SqlConnection connection, Int32 deviceID) => GetDeviceFoldersAsync(connection, deviceID, CancellationToken.None);
	public static async Task<List<GetDeviceFoldersRow>> GetDeviceFoldersAsync(SqlConnection connection, Int32 deviceID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Device_Folders");

		cmd.Parameters.Add(CreateParameter("@Device_ID", deviceID, SqlDbType.Int, 4));

		var result = new List<GetDeviceFoldersRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDeviceFolderID = reader.GetOrdinal("Device_Folder_ID");
			int ordParentDeviceFolderID = reader.GetOrdinal("Parent_Device_Folder_ID");
			int ordFolder = reader.GetOrdinal("Folder");
			int ordDisplayName = reader.GetOrdinal("Display_Name");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordIsStat = reader.GetOrdinal("Is_Stat");

			do
			{
				result.Add(new GetDeviceFoldersRow
				{
					DeviceFolderID = GetNonNullFieldValue<Int32>(reader, ordDeviceFolderID),
					ParentDeviceFolderID = GetFieldValue<Int32>(reader, ordParentDeviceFolderID),
					Folder = GetNonNullField<String>(reader, ordFolder),
					DisplayName = GetField<String>(reader, ordDisplayName),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					IsStat = GetFieldValue<Boolean>(reader, ordIsStat),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetDictationRow>> GetDictationAsync(SqlConnection connection, Int32 clientID, Int32 dictationID) => GetDictationAsync(connection, clientID, dictationID, CancellationToken.None);
	public static async Task<List<GetDictationRow>> GetDictationAsync(SqlConnection connection, Int32 clientID, Int32 dictationID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Dictation");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictation_ID", dictationID, SqlDbType.Int, 4));

		var result = new List<GetDictationRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordDictationRouteID = reader.GetOrdinal("Dictation_Route_ID");
			int ordDictationStatusID = reader.GetOrdinal("Dictation_Status_ID");
			int ordDictationSourceID = reader.GetOrdinal("Dictation_Source_ID");
			int ordSourceMachineName = reader.GetOrdinal("Source_Machine_Name");
			int ordIsStat = reader.GetOrdinal("Is_Stat");
			int ordLength = reader.GetOrdinal("Length");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordDateUploaded = reader.GetOrdinal("Date_Uploaded");
			int ordDateConverted = reader.GetOrdinal("Date_Converted");
			int ordDateReceived = reader.GetOrdinal("Date_Received");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordAppointmentID = reader.GetOrdinal("Appointment_ID");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDictationRouteRequiresOriginalDictationFile = reader.GetOrdinal("DictationRouteRequiresOriginalDictationFile");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordSourceFilePath = reader.GetOrdinal("Source_File_Path");
			int ordAppendTranscriptionID = reader.GetOrdinal("Append_Transcription_ID");
			int ordPrependTranscriptionID = reader.GetOrdinal("Prepend_Transcription_ID");
			int ordIsArchived = reader.GetOrdinal("Is_Archived");

			do
			{
				result.Add(new GetDictationRow
				{
					DictationID = GetNonNullFieldValue<Int32>(reader, ordDictationID),
					DictationRouteID = GetFieldValue<Int32>(reader, ordDictationRouteID),
					DictationStatusID = GetFieldValue<Int32>(reader, ordDictationStatusID),
					DictationSourceID = GetFieldValue<Int32>(reader, ordDictationSourceID),
					SourceMachineName = GetField<String>(reader, ordSourceMachineName),
					IsStat = GetNonNullFieldValue<Boolean>(reader, ordIsStat),
					Length = GetFieldValue<Int32>(reader, ordLength),
					DateDictated = GetFieldValue<DateTimeOffset>(reader, ordDateDictated),
					DateUploaded = GetFieldValue<DateTime>(reader, ordDateUploaded),
					DateConverted = GetFieldValue<DateTime>(reader, ordDateConverted),
					DateReceived = GetFieldValue<DateTime>(reader, ordDateReceived),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					AppointmentID = GetFieldValue<Guid>(reader, ordAppointmentID),
					PatientID = GetField<String>(reader, ordPatientID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					DictationRouteRequiresOriginalDictationFile = GetFieldValue<Boolean>(reader, ordDictationRouteRequiresOriginalDictationFile),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					SourceFilePath = GetField<String>(reader, ordSourceFilePath),
					AppendTranscriptionID = GetFieldValue<Int32>(reader, ordAppendTranscriptionID),
					PrependTranscriptionID = GetFieldValue<Int32>(reader, ordPrependTranscriptionID),
					IsArchived = GetFieldValue<Boolean>(reader, ordIsArchived),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetDictationASRDraftRow>> GetDictationASRDraftAsync(SqlConnection connection, Int32 clientID, Int32 dictationID) => GetDictationASRDraftAsync(connection, clientID, dictationID, CancellationToken.None);
	public static async Task<List<GetDictationASRDraftRow>> GetDictationASRDraftAsync(SqlConnection connection, Int32 clientID, Int32 dictationID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Dictation_ASRDraft");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictation_ID", dictationID, SqlDbType.Int, 4));

		var result = new List<GetDictationASRDraftRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordASRContent = reader.GetOrdinal("ASRContent");

			do
			{
				result.Add(new GetDictationASRDraftRow
				{
					ASRContent = GetField<Byte[]>(reader, ordASRContent),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetDictationFilesRow>> GetDictationFilesAsync(SqlConnection connection, Int32 dictationID) => GetDictationFilesAsync(connection, dictationID, CancellationToken.None);
	public static async Task<List<GetDictationFilesRow>> GetDictationFilesAsync(SqlConnection connection, Int32 dictationID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Dictation_Files");

		cmd.Parameters.Add(CreateParameter("@Dictation_ID", dictationID, SqlDbType.Int, 4));

		var result = new List<GetDictationFilesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDictationFileTypeID = reader.GetOrdinal("Dictation_File_Type_ID");
			int ordPath = reader.GetOrdinal("Path");
			int ordSamplesPerSecond = reader.GetOrdinal("Samples_Per_Second");

			do
			{
				result.Add(new GetDictationFilesRow
				{
					DictationFileTypeID = GetNonNullFieldValue<Int32>(reader, ordDictationFileTypeID),
					Path = GetNonNullField<String>(reader, ordPath),
					SamplesPerSecond = GetFieldValue<Int32>(reader, ordSamplesPerSecond),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetDictationRouteRow>> GetDictationRouteAsync(SqlConnection connection, Int32 dictationRouteID) => GetDictationRouteAsync(connection, dictationRouteID, CancellationToken.None);
	public static async Task<List<GetDictationRouteRow>> GetDictationRouteAsync(SqlConnection connection, Int32 dictationRouteID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Dictation_Route");

		cmd.Parameters.Add(CreateParameter("@Dictation_Route_ID", dictationRouteID, SqlDbType.Int, 4));

		var result = new List<GetDictationRouteRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordName = reader.GetOrdinal("Name");
			int ordDescription = reader.GetOrdinal("Description");
			int ordRequiresOriginalDictationFile = reader.GetOrdinal("Requires_Original_Dictation_File");

			do
			{
				result.Add(new GetDictationRouteRow
				{
					Name = GetNonNullField<String>(reader, ordName),
					Description = GetField<String>(reader, ordDescription),
					RequiresOriginalDictationFile = GetNonNullFieldValue<Boolean>(reader, ordRequiresOriginalDictationFile),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetDictationRouteByDocumentRow>> GetDictationRouteByDocumentAsync(SqlConnection connection, Int32 clientID, Int32 dictatingUserID, Int32 documentTypeID, Int32 dictationFileTypeID) => GetDictationRouteByDocumentAsync(connection, clientID, dictatingUserID, documentTypeID, dictationFileTypeID, CancellationToken.None);
	public static async Task<List<GetDictationRouteByDocumentRow>> GetDictationRouteByDocumentAsync(SqlConnection connection, Int32 clientID, Int32 dictatingUserID, Int32 documentTypeID, Int32 dictationFileTypeID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Dictation_Route_By_Document");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictating_User_ID", dictatingUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_Type_ID", documentTypeID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictation_File_Type_ID", dictationFileTypeID, SqlDbType.Int, 4));

		var result = new List<GetDictationRouteByDocumentRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDictationRouteID = reader.GetOrdinal("Dictation_Route_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordRequiresOriginalDictationFile = reader.GetOrdinal("Requires_Original_Dictation_File");

			do
			{
				result.Add(new GetDictationRouteByDocumentRow
				{
					DictationRouteID = GetNonNullFieldValue<Int32>(reader, ordDictationRouteID),
					Name = GetNonNullField<String>(reader, ordName),
					RequiresOriginalDictationFile = GetNonNullFieldValue<Boolean>(reader, ordRequiresOriginalDictationFile),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetDictationRouteFileTypesRow>> GetDictationRouteFileTypesAsync(SqlConnection connection, Int32 dictationRouteID) => GetDictationRouteFileTypesAsync(connection, dictationRouteID, CancellationToken.None);
	public static async Task<List<GetDictationRouteFileTypesRow>> GetDictationRouteFileTypesAsync(SqlConnection connection, Int32 dictationRouteID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Dictation_Route_File_Types");

		cmd.Parameters.Add(CreateParameter("@Dictation_Route_ID", dictationRouteID, SqlDbType.Int, 4));

		var result = new List<GetDictationRouteFileTypesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDictationRouteID = reader.GetOrdinal("Dictation_Route_ID");
			int ordDictationFileTypeID = reader.GetOrdinal("Dictation_File_Type_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordExtendedInfo = reader.GetOrdinal("Extended_Info");
			int ordIsEncrypted = reader.GetOrdinal("Is_Encrypted");

			do
			{
				result.Add(new GetDictationRouteFileTypesRow
				{
					DictationRouteID = GetNonNullFieldValue<Int32>(reader, ordDictationRouteID),
					DictationFileTypeID = GetNonNullFieldValue<Int32>(reader, ordDictationFileTypeID),
					Name = GetNonNullField<String>(reader, ordName),
					ExtendedInfo = GetField<String>(reader, ordExtendedInfo),
					IsEncrypted = GetFieldValue<Boolean>(reader, ordIsEncrypted),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetDocumentServiceJobRow>> GetDocumentServiceJobAsync(SqlConnection connection, Int32 clientID, Guid documentServiceJobID) => GetDocumentServiceJobAsync(connection, clientID, documentServiceJobID, CancellationToken.None);
	public static async Task<List<GetDocumentServiceJobRow>> GetDocumentServiceJobAsync(SqlConnection connection, Int32 clientID, Guid documentServiceJobID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Document_Service_Job");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_Service_Job_ID", documentServiceJobID, SqlDbType.UniqueIdentifier, 16));

		var result = new List<GetDocumentServiceJobRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordAppointmentID = reader.GetOrdinal("Appointment_ID");
			int ordStatusID = reader.GetOrdinal("Status_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordDateCreated = reader.GetOrdinal("Date_Created");
			int ordDateProcessed = reader.GetOrdinal("Date_Processed");
			int ordReceiptCode = reader.GetOrdinal("Receipt_Code");
			int ordComment = reader.GetOrdinal("Comment");
			int ordIsMarkedForClientReview = reader.GetOrdinal("Is_Marked_For_Client_Review");

			do
			{
				result.Add(new GetDocumentServiceJobRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetNonNullFieldValue<Int32>(reader, ordUserID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					AppointmentID = GetFieldValue<Guid>(reader, ordAppointmentID),
					StatusID = GetNonNullField<String>(reader, ordStatusID),
					TranscriptionID = GetFieldValue<Int32>(reader, ordTranscriptionID),
					DateCreated = GetNonNullFieldValue<DateTime>(reader, ordDateCreated),
					DateProcessed = GetFieldValue<DateTime>(reader, ordDateProcessed),
					ReceiptCode = GetField<String>(reader, ordReceiptCode),
					Comment = GetField<String>(reader, ordComment),
					IsMarkedForClientReview = GetFieldValue<Boolean>(reader, ordIsMarkedForClientReview),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetDocumentServiceJobAssociatesRow>> GetDocumentServiceJobAssociatesAsync(SqlConnection connection, Int32 clientID, Guid documentServiceJobID) => GetDocumentServiceJobAssociatesAsync(connection, clientID, documentServiceJobID, CancellationToken.None);
	public static async Task<List<GetDocumentServiceJobAssociatesRow>> GetDocumentServiceJobAssociatesAsync(SqlConnection connection, Int32 clientID, Guid documentServiceJobID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Document_Service_Job_Associates");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_Service_Job_ID", documentServiceJobID, SqlDbType.UniqueIdentifier, 16));

		var result = new List<GetDocumentServiceJobAssociatesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordDocumentServiceJobID = reader.GetOrdinal("Document_Service_Job_ID");
			int ordDocumentServiceJobAssociateID = reader.GetOrdinal("Document_Service_Job_Associate_ID");
			int ordAssociateID = reader.GetOrdinal("Associate_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordAssociateClientCode = reader.GetOrdinal("Associate_Client_Code");
			int ordAssociateSpecialty = reader.GetOrdinal("Associate_Specialty");
			int ordAssociateGreeting = reader.GetOrdinal("Associate_Greeting");
			int ordAssociateBusinessName = reader.GetOrdinal("Associate_Business_Name");
			int ordAssociatePrefix = reader.GetOrdinal("Associate_Prefix");
			int ordAssociateNameFirst = reader.GetOrdinal("Associate_Name_First");
			int ordAssociateNameMiddle = reader.GetOrdinal("Associate_Name_Middle");
			int ordAssociateNameLast = reader.GetOrdinal("Associate_Name_Last");
			int ordAssociateSuffix = reader.GetOrdinal("Associate_Suffix");
			int ordAssociateAddress1 = reader.GetOrdinal("Associate_Address_1");
			int ordAssociateAddress2 = reader.GetOrdinal("Associate_Address_2");
			int ordAssociateAddress3 = reader.GetOrdinal("Associate_Address_3");
			int ordAssociateCity = reader.GetOrdinal("Associate_City");
			int ordAssociateState = reader.GetOrdinal("Associate_State");
			int ordAssociateZipCode = reader.GetOrdinal("Associate_Zip_Code");
			int ordAssociateCompany = reader.GetOrdinal("Associate_Company");
			int ordAssociatePhone = reader.GetOrdinal("Associate_Phone");
			int ordAssociateFax = reader.GetOrdinal("Associate_Fax");
			int ordAssociateEMail = reader.GetOrdinal("Associate_EMail");
			int ordReferralLocationID = reader.GetOrdinal("Referral_Location_ID");
			int ordReferralUserID = reader.GetOrdinal("Referral_User_ID");

			do
			{
				result.Add(new GetDocumentServiceJobAssociatesRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					DocumentServiceJobID = GetNonNullFieldValue<Guid>(reader, ordDocumentServiceJobID),
					DocumentServiceJobAssociateID = GetNonNullFieldValue<Guid>(reader, ordDocumentServiceJobAssociateID),
					AssociateID = GetFieldValue<Int32>(reader, ordAssociateID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					AssociateClientCode = GetNonNullField<String>(reader, ordAssociateClientCode),
					AssociateSpecialty = GetField<String>(reader, ordAssociateSpecialty),
					AssociateGreeting = GetField<String>(reader, ordAssociateGreeting),
					AssociateBusinessName = GetField<String>(reader, ordAssociateBusinessName),
					AssociatePrefix = GetField<String>(reader, ordAssociatePrefix),
					AssociateNameFirst = GetField<String>(reader, ordAssociateNameFirst),
					AssociateNameMiddle = GetField<String>(reader, ordAssociateNameMiddle),
					AssociateNameLast = GetField<String>(reader, ordAssociateNameLast),
					AssociateSuffix = GetField<String>(reader, ordAssociateSuffix),
					AssociateAddress1 = GetField<String>(reader, ordAssociateAddress1),
					AssociateAddress2 = GetField<String>(reader, ordAssociateAddress2),
					AssociateAddress3 = GetField<String>(reader, ordAssociateAddress3),
					AssociateCity = GetField<String>(reader, ordAssociateCity),
					AssociateState = GetField<String>(reader, ordAssociateState),
					AssociateZipCode = GetField<String>(reader, ordAssociateZipCode),
					AssociateCompany = GetField<String>(reader, ordAssociateCompany),
					AssociatePhone = GetField<String>(reader, ordAssociatePhone),
					AssociateFax = GetField<String>(reader, ordAssociateFax),
					AssociateEMail = GetField<String>(reader, ordAssociateEMail),
					ReferralLocationID = GetFieldValue<Int32>(reader, ordReferralLocationID),
					ReferralUserID = GetFieldValue<Int32>(reader, ordReferralUserID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetDocumentServiceJobTagsRow>> GetDocumentServiceJobTagsAsync(SqlConnection connection, Guid documentServiceJobID) => GetDocumentServiceJobTagsAsync(connection, documentServiceJobID, CancellationToken.None);
	public static async Task<List<GetDocumentServiceJobTagsRow>> GetDocumentServiceJobTagsAsync(SqlConnection connection, Guid documentServiceJobID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Document_Service_Job_Tags");

		cmd.Parameters.Add(CreateParameter("@Document_Service_Job_ID", documentServiceJobID, SqlDbType.UniqueIdentifier, 16));

		var result = new List<GetDocumentServiceJobTagsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDocumentServiceJobID = reader.GetOrdinal("Document_Service_Job_ID");
			int ordTranscriptionTagID = reader.GetOrdinal("Transcription_Tag_ID");
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");

			do
			{
				result.Add(new GetDocumentServiceJobTagsRow
				{
					DocumentServiceJobID = GetNonNullFieldValue<Guid>(reader, ordDocumentServiceJobID),
					TranscriptionTagID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionTagID),
					CompanyID = GetNonNullFieldValue<Int32>(reader, ordCompanyID),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetFeatureFlagRow>> GetFeatureFlagAsync(SqlConnection connection, String featureFlagName) => GetFeatureFlagAsync(connection, featureFlagName, CancellationToken.None);
	public static async Task<List<GetFeatureFlagRow>> GetFeatureFlagAsync(SqlConnection connection, String featureFlagName, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Feature_Flag");

		cmd.Parameters.Add(CreateParameter("@Feature_Flag_Name", featureFlagName, SqlDbType.VarChar, 50));

		var result = new List<GetFeatureFlagRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordIsEnabled = reader.GetOrdinal("Is_Enabled");

			do
			{
				result.Add(new GetFeatureFlagRow
				{
					IsEnabled = GetFieldValue<Boolean>(reader, ordIsEnabled),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetFormatTypeRow>> GetFormatTypeAsync(SqlConnection connection, String name) => GetFormatTypeAsync(connection, name, CancellationToken.None);
	public static async Task<List<GetFormatTypeRow>> GetFormatTypeAsync(SqlConnection connection, String name, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Format_Type");

		cmd.Parameters.Add(CreateParameter("@Name", name, SqlDbType.VarChar, 50));

		var result = new List<GetFormatTypeRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordName = reader.GetOrdinal("Name");
			int ordCLRAssemblyName = reader.GetOrdinal("CLR_AssemblyName");
			int ordCLRTypeName = reader.GetOrdinal("CLR_TypeName");
			int ordEntityTypeID = reader.GetOrdinal("Entity_Type_ID");
			int ordDefaultFormatInfo = reader.GetOrdinal("Default_Format_Info");

			do
			{
				result.Add(new GetFormatTypeRow
				{
					Name = GetNonNullField<String>(reader, ordName),
					CLRAssemblyName = GetNonNullField<String>(reader, ordCLRAssemblyName),
					CLRTypeName = GetNonNullField<String>(reader, ordCLRTypeName),
					EntityTypeID = GetNonNullFieldValue<Int32>(reader, ordEntityTypeID),
					DefaultFormatInfo = GetField<String>(reader, ordDefaultFormatInfo),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetInScribeLoginIPAddressesRow>> GetInScribeLoginIPAddressesAsync(SqlConnection connection, Int64 defaultBatchSize) => GetInScribeLoginIPAddressesAsync(connection, defaultBatchSize, CancellationToken.None);
	public static async Task<List<GetInScribeLoginIPAddressesRow>> GetInScribeLoginIPAddressesAsync(SqlConnection connection, Int64 defaultBatchSize, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_InScribe_Login_IPAddresses");

		cmd.Parameters.Add(CreateParameter("@defaultBatchSize", defaultBatchSize, SqlDbType.BigInt, 8));

		var result = new List<GetInScribeLoginIPAddressesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordLogEventsSecurityID = reader.GetOrdinal("Log_Events_Security_ID");
			int ordIPAddress = reader.GetOrdinal("IPAddress");

			do
			{
				result.Add(new GetInScribeLoginIPAddressesRow
				{
					LogEventsSecurityID = GetNonNullFieldValue<Int64>(reader, ordLogEventsSecurityID),
					IPAddress = GetField<String>(reader, ordIPAddress),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetInterpreterByPhoneNumberRow>> GetInterpreterByPhoneNumberAsync(SqlConnection connection, String phoneNumber, Int32 languageID, Int32 clientID) => GetInterpreterByPhoneNumberAsync(connection, phoneNumber, languageID, clientID, CancellationToken.None);
	public static async Task<List<GetInterpreterByPhoneNumberRow>> GetInterpreterByPhoneNumberAsync(SqlConnection connection, String phoneNumber, Int32 languageID, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Interpreter_ByPhoneNumber");

		cmd.Parameters.Add(CreateParameter("@Phone_Number", phoneNumber, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Language_ID", languageID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetInterpreterByPhoneNumberRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordInterpreterID = reader.GetOrdinal("Interpreter_ID");
			int ordInterpreterName = reader.GetOrdinal("Interpreter_Name");
			int ordInterpreterDescription = reader.GetOrdinal("Interpreter_Description");

			do
			{
				result.Add(new GetInterpreterByPhoneNumberRow
				{
					InterpreterID = GetNonNullFieldValue<Int32>(reader, ordInterpreterID),
					InterpreterName = GetNonNullField<String>(reader, ordInterpreterName),
					InterpreterDescription = GetField<String>(reader, ordInterpreterDescription),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetInterpreterLanguagesByClientRow>> GetInterpreterLanguagesByClientAsync(SqlConnection connection, Int32 clientID) => GetInterpreterLanguagesByClientAsync(connection, clientID, CancellationToken.None);
	public static async Task<List<GetInterpreterLanguagesByClientRow>> GetInterpreterLanguagesByClientAsync(SqlConnection connection, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Interpreter_Languages_ByClient");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetInterpreterLanguagesByClientRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordLanguageID = reader.GetOrdinal("Language_ID");
			int ordLanguageName = reader.GetOrdinal("Language_Name");
			int ordLanguageNativeName = reader.GetOrdinal("Language_Native_Name");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");

			do
			{
				result.Add(new GetInterpreterLanguagesByClientRow
				{
					LanguageID = GetNonNullFieldValue<Int32>(reader, ordLanguageID),
					LanguageName = GetNonNullField<String>(reader, ordLanguageName),
					LanguageNativeName = GetNonNullField<String>(reader, ordLanguageNativeName),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetInterpretersByLanguageRow>> GetInterpretersByLanguageAsync(SqlConnection connection, Int32 languageID, Int32 clientID) => GetInterpretersByLanguageAsync(connection, languageID, clientID, CancellationToken.None);
	public static async Task<List<GetInterpretersByLanguageRow>> GetInterpretersByLanguageAsync(SqlConnection connection, Int32 languageID, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Interpreters_ByLanguage");

		cmd.Parameters.Add(CreateParameter("@Language_ID", languageID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetInterpretersByLanguageRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordInterpreterID = reader.GetOrdinal("Interpreter_ID");
			int ordPhoneNumber = reader.GetOrdinal("Phone_Number");

			do
			{
				result.Add(new GetInterpretersByLanguageRow
				{
					InterpreterID = GetNonNullFieldValue<Int32>(reader, ordInterpreterID),
					PhoneNumber = GetNonNullField<String>(reader, ordPhoneNumber),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetInTouchEmulationRow>> GetInTouchEmulationAsync(SqlConnection connection, Int32 emulationID) => GetInTouchEmulationAsync(connection, emulationID, CancellationToken.None);
	public static async Task<List<GetInTouchEmulationRow>> GetInTouchEmulationAsync(SqlConnection connection, Int32 emulationID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_InTouch_Emulation");

		cmd.Parameters.Add(CreateParameter("@Emulation_ID", emulationID, SqlDbType.Int, 4));

		var result = new List<GetInTouchEmulationRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordEmulationID = reader.GetOrdinal("Emulation_ID");
			int ordEmulationDescription = reader.GetOrdinal("Emulation_Description");
			int ordKeyHearInfo = reader.GetOrdinal("Key_Hear_Info");
			int ordKeyRecord = reader.GetOrdinal("Key_Record");
			int ordKeyPlay = reader.GetOrdinal("Key_Play");
			int ordKeyStop = reader.GetOrdinal("Key_Stop");
			int ordKeyRewind = reader.GetOrdinal("Key_Rewind");
			int ordKeyFastForward = reader.GetOrdinal("Key_Fast_Forward");
			int ordKeyInsert = reader.GetOrdinal("Key_Insert");
			int ordKeyToStart = reader.GetOrdinal("Key_ToStart");
			int ordKeyToEnd = reader.GetOrdinal("Key_ToEnd");
			int ordKeyHelp = reader.GetOrdinal("Key_Help");
			int ordKeyCancel = reader.GetOrdinal("Key_Cancel");
			int ordKeyDone = reader.GetOrdinal("Key_Done");
			int ordKeyCommand = reader.GetOrdinal("Key_Command");
			int ordKeyA = reader.GetOrdinal("Key_A");
			int ordKeyB = reader.GetOrdinal("Key_B");
			int ordKeyC = reader.GetOrdinal("Key_C");
			int ordKeyD = reader.GetOrdinal("Key_D");
			int ordUseWorkType = reader.GetOrdinal("Use_Work_Type");
			int ordUsePatientID = reader.GetOrdinal("Use_Patient_ID");
			int ordRequireWorkType = reader.GetOrdinal("Require_Work_Type");
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordExtraPrompt = reader.GetOrdinal("Extra_Prompt");
			int ordExtraPromptTag = reader.GetOrdinal("Extra_Prompt_Tag");
			int ordUseLocation = reader.GetOrdinal("Use_Location");
			int ordKeyInsertMode = reader.GetOrdinal("Key_InsertMode");
			int ordKeyOverwrite = reader.GetOrdinal("Key_Overwrite");
			int ordKeyPending = reader.GetOrdinal("Key_Pending");
			int ordIsDictationReviewEnabled = reader.GetOrdinal("Is_Dictation_Review_Enabled");
			int ordPatientIDSort = reader.GetOrdinal("Patient_ID_Sort");
			int ordWorkTypeSort = reader.GetOrdinal("Work_Type_Sort");
			int ordLocationSort = reader.GetOrdinal("Location_Sort");
			int ordExtraPromptSort = reader.GetOrdinal("Extra_Prompt_Sort");
			int ordDefaultRecordingMethod = reader.GetOrdinal("Default_Recording_Method");
			int ordMenuDelaySeconds = reader.GetOrdinal("Menu_Delay_Seconds");
			int ordIsMenuBeepEnabled = reader.GetOrdinal("Is_Menu_Beep_Enabled");
			int ordKeyNextPatient = reader.GetOrdinal("Key_Next_Patient");
			int ordKeyContinuousRewind = reader.GetOrdinal("Key_Continuous_Rewind");
			int ordKeyContinuousFastForward = reader.GetOrdinal("Key_Continuous_Fast_Forward");
			int ordRewindSeconds = reader.GetOrdinal("Rewind_Seconds");
			int ordFastForwardSeconds = reader.GetOrdinal("Fast_Forward_Seconds");
			int ordIsMenuEnabled = reader.GetOrdinal("Is_Menu_Enabled");
			int ordIsStopPromptEnabled = reader.GetOrdinal("Is_Stop_Prompt_Enabled");
			int ordMinimumToneLength = reader.GetOrdinal("Minimum_Tone_Length");
			int ordStopOnAllTones = reader.GetOrdinal("Stop_On_All_Tones");
			int ordPlayReceiptCode = reader.GetOrdinal("Play_Receipt_Code");
			int ordPromptForListenLocation = reader.GetOrdinal("Prompt_For_Listen_Location");
			int ordRecordingSilenceSeconds = reader.GetOrdinal("Recording_Silence_Seconds");
			int ordRecordingTrimSilence = reader.GetOrdinal("Recording_Trim_Silence");
			int ordRecordingGainControl = reader.GetOrdinal("Recording_Gain_Control");
			int ordRecordingVolume = reader.GetOrdinal("Recording_Volume");

			do
			{
				result.Add(new GetInTouchEmulationRow
				{
					EmulationID = GetNonNullFieldValue<Int32>(reader, ordEmulationID),
					EmulationDescription = GetField<String>(reader, ordEmulationDescription),
					KeyHearInfo = GetField<String>(reader, ordKeyHearInfo),
					KeyRecord = GetField<String>(reader, ordKeyRecord),
					KeyPlay = GetField<String>(reader, ordKeyPlay),
					KeyStop = GetField<String>(reader, ordKeyStop),
					KeyRewind = GetField<String>(reader, ordKeyRewind),
					KeyFastForward = GetField<String>(reader, ordKeyFastForward),
					KeyInsert = GetField<String>(reader, ordKeyInsert),
					KeyToStart = GetField<String>(reader, ordKeyToStart),
					KeyToEnd = GetField<String>(reader, ordKeyToEnd),
					KeyHelp = GetField<String>(reader, ordKeyHelp),
					KeyCancel = GetField<String>(reader, ordKeyCancel),
					KeyDone = GetField<String>(reader, ordKeyDone),
					KeyCommand = GetField<String>(reader, ordKeyCommand),
					KeyA = GetField<String>(reader, ordKeyA),
					KeyB = GetField<String>(reader, ordKeyB),
					KeyC = GetField<String>(reader, ordKeyC),
					KeyD = GetField<String>(reader, ordKeyD),
					UseWorkType = GetNonNullFieldValue<Boolean>(reader, ordUseWorkType),
					UsePatientID = GetNonNullFieldValue<Boolean>(reader, ordUsePatientID),
					RequireWorkType = GetNonNullFieldValue<Boolean>(reader, ordRequireWorkType),
					CompanyID = GetFieldValue<Int32>(reader, ordCompanyID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ExtraPrompt = GetField<String>(reader, ordExtraPrompt),
					ExtraPromptTag = GetField<String>(reader, ordExtraPromptTag),
					UseLocation = GetNonNullFieldValue<Boolean>(reader, ordUseLocation),
					KeyInsertMode = GetField<String>(reader, ordKeyInsertMode),
					KeyOverwrite = GetField<String>(reader, ordKeyOverwrite),
					KeyPending = GetField<String>(reader, ordKeyPending),
					IsDictationReviewEnabled = GetFieldValue<Boolean>(reader, ordIsDictationReviewEnabled),
					PatientIDSort = GetFieldValue<Int32>(reader, ordPatientIDSort),
					WorkTypeSort = GetFieldValue<Int32>(reader, ordWorkTypeSort),
					LocationSort = GetFieldValue<Int32>(reader, ordLocationSort),
					ExtraPromptSort = GetFieldValue<Int32>(reader, ordExtraPromptSort),
					DefaultRecordingMethod = GetFieldValue<Int32>(reader, ordDefaultRecordingMethod),
					MenuDelaySeconds = GetFieldValue<Int32>(reader, ordMenuDelaySeconds),
					IsMenuBeepEnabled = GetFieldValue<Boolean>(reader, ordIsMenuBeepEnabled),
					KeyNextPatient = GetField<String>(reader, ordKeyNextPatient),
					KeyContinuousRewind = GetField<String>(reader, ordKeyContinuousRewind),
					KeyContinuousFastForward = GetField<String>(reader, ordKeyContinuousFastForward),
					RewindSeconds = GetFieldValue<Int32>(reader, ordRewindSeconds),
					FastForwardSeconds = GetFieldValue<Int32>(reader, ordFastForwardSeconds),
					IsMenuEnabled = GetNonNullFieldValue<Boolean>(reader, ordIsMenuEnabled),
					IsStopPromptEnabled = GetNonNullFieldValue<Boolean>(reader, ordIsStopPromptEnabled),
					MinimumToneLength = GetNonNullFieldValue<Int32>(reader, ordMinimumToneLength),
					StopOnAllTones = GetNonNullFieldValue<Boolean>(reader, ordStopOnAllTones),
					PlayReceiptCode = GetNonNullFieldValue<Boolean>(reader, ordPlayReceiptCode),
					PromptForListenLocation = GetNonNullFieldValue<Boolean>(reader, ordPromptForListenLocation),
					RecordingSilenceSeconds = GetNonNullFieldValue<Int32>(reader, ordRecordingSilenceSeconds),
					RecordingTrimSilence = GetNonNullFieldValue<Boolean>(reader, ordRecordingTrimSilence),
					RecordingGainControl = GetNonNullFieldValue<Int32>(reader, ordRecordingGainControl),
					RecordingVolume = GetNonNullFieldValue<Int32>(reader, ordRecordingVolume),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetInTouchEmulationListenPromptsRow>> GetInTouchEmulationListenPromptsAsync(SqlConnection connection, Int32 emulationID) => GetInTouchEmulationListenPromptsAsync(connection, emulationID, CancellationToken.None);
	public static async Task<List<GetInTouchEmulationListenPromptsRow>> GetInTouchEmulationListenPromptsAsync(SqlConnection connection, Int32 emulationID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_InTouch_Emulation_Listen_Prompts");

		cmd.Parameters.Add(CreateParameter("@Emulation_ID", emulationID, SqlDbType.Int, 4));

		var result = new List<GetInTouchEmulationListenPromptsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordEmulationListenPromptID = reader.GetOrdinal("Emulation_Listen_Prompt_ID");
			int ordEmulationID = reader.GetOrdinal("Emulation_ID");
			int ordEmulationPromptTypeID = reader.GetOrdinal("Emulation_Prompt_Type_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordTagName = reader.GetOrdinal("TagName");
			int ordSortOrder = reader.GetOrdinal("Sort_Order");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");

			do
			{
				result.Add(new GetInTouchEmulationListenPromptsRow
				{
					EmulationListenPromptID = GetNonNullFieldValue<Int32>(reader, ordEmulationListenPromptID),
					EmulationID = GetNonNullFieldValue<Int32>(reader, ordEmulationID),
					EmulationPromptTypeID = GetNonNullFieldValue<Int32>(reader, ordEmulationPromptTypeID),
					Name = GetField<String>(reader, ordName),
					TagName = GetField<String>(reader, ordTagName),
					SortOrder = GetNonNullFieldValue<Int32>(reader, ordSortOrder),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetInTouchEmulationPromptsRow>> GetInTouchEmulationPromptsAsync(SqlConnection connection, Int32 emulationID) => GetInTouchEmulationPromptsAsync(connection, emulationID, CancellationToken.None);
	public static async Task<List<GetInTouchEmulationPromptsRow>> GetInTouchEmulationPromptsAsync(SqlConnection connection, Int32 emulationID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_InTouch_Emulation_Prompts");

		cmd.Parameters.Add(CreateParameter("@Emulation_ID", emulationID, SqlDbType.Int, 4));

		var result = new List<GetInTouchEmulationPromptsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordEmulationPromptID = reader.GetOrdinal("Emulation_Prompt_ID");
			int ordEmulationID = reader.GetOrdinal("Emulation_ID");
			int ordEmulationPromptTypeID = reader.GetOrdinal("Emulation_Prompt_Type_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordTagName = reader.GetOrdinal("TagName");
			int ordSortOrder = reader.GetOrdinal("Sort_Order");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");

			do
			{
				result.Add(new GetInTouchEmulationPromptsRow
				{
					EmulationPromptID = GetNonNullFieldValue<Int32>(reader, ordEmulationPromptID),
					EmulationID = GetNonNullFieldValue<Int32>(reader, ordEmulationID),
					EmulationPromptTypeID = GetNonNullFieldValue<Int32>(reader, ordEmulationPromptTypeID),
					Name = GetField<String>(reader, ordName),
					TagName = GetField<String>(reader, ordTagName),
					SortOrder = GetNonNullFieldValue<Int32>(reader, ordSortOrder),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetInTouchEmulationsRow>> GetInTouchEmulationsAsync(SqlConnection connection) => GetInTouchEmulationsAsync(connection, CancellationToken.None);
	public static async Task<List<GetInTouchEmulationsRow>> GetInTouchEmulationsAsync(SqlConnection connection, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_InTouch_Emulations");

		var result = new List<GetInTouchEmulationsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordEmulationID = reader.GetOrdinal("Emulation_ID");
			int ordEmulationDescription = reader.GetOrdinal("Emulation_Description");
			int ordKeyHearInfo = reader.GetOrdinal("Key_Hear_Info");
			int ordKeyRecord = reader.GetOrdinal("Key_Record");
			int ordKeyPlay = reader.GetOrdinal("Key_Play");
			int ordKeyStop = reader.GetOrdinal("Key_Stop");
			int ordKeyRewind = reader.GetOrdinal("Key_Rewind");
			int ordKeyFastForward = reader.GetOrdinal("Key_Fast_Forward");
			int ordKeyInsert = reader.GetOrdinal("Key_Insert");
			int ordKeyToStart = reader.GetOrdinal("Key_ToStart");
			int ordKeyToEnd = reader.GetOrdinal("Key_ToEnd");
			int ordKeyHelp = reader.GetOrdinal("Key_Help");
			int ordKeyCancel = reader.GetOrdinal("Key_Cancel");
			int ordKeyDone = reader.GetOrdinal("Key_Done");
			int ordKeyCommand = reader.GetOrdinal("Key_Command");
			int ordKeyA = reader.GetOrdinal("Key_A");
			int ordKeyB = reader.GetOrdinal("Key_B");
			int ordKeyC = reader.GetOrdinal("Key_C");
			int ordKeyD = reader.GetOrdinal("Key_D");
			int ordUseWorkType = reader.GetOrdinal("Use_Work_Type");
			int ordUsePatientID = reader.GetOrdinal("Use_Patient_ID");
			int ordRequireWorkType = reader.GetOrdinal("Require_Work_Type");
			int ordCompanyID = reader.GetOrdinal("Company_ID");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordExtraPrompt = reader.GetOrdinal("Extra_Prompt");
			int ordExtraPromptTag = reader.GetOrdinal("Extra_Prompt_Tag");
			int ordUseLocation = reader.GetOrdinal("Use_Location");
			int ordKeyInsertMode = reader.GetOrdinal("Key_InsertMode");
			int ordKeyOverwrite = reader.GetOrdinal("Key_Overwrite");
			int ordKeyPending = reader.GetOrdinal("Key_Pending");
			int ordIsDictationReviewEnabled = reader.GetOrdinal("Is_Dictation_Review_Enabled");
			int ordPatientIDSort = reader.GetOrdinal("Patient_ID_Sort");
			int ordWorkTypeSort = reader.GetOrdinal("Work_Type_Sort");
			int ordLocationSort = reader.GetOrdinal("Location_Sort");
			int ordExtraPromptSort = reader.GetOrdinal("Extra_Prompt_Sort");
			int ordDefaultRecordingMethod = reader.GetOrdinal("Default_Recording_Method");
			int ordMenuDelaySeconds = reader.GetOrdinal("Menu_Delay_Seconds");
			int ordIsMenuBeepEnabled = reader.GetOrdinal("Is_Menu_Beep_Enabled");
			int ordKeyNextPatient = reader.GetOrdinal("Key_Next_Patient");
			int ordKeyContinuousRewind = reader.GetOrdinal("Key_Continuous_Rewind");
			int ordKeyContinuousFastForward = reader.GetOrdinal("Key_Continuous_Fast_Forward");
			int ordRewindSeconds = reader.GetOrdinal("Rewind_Seconds");
			int ordFastForwardSeconds = reader.GetOrdinal("Fast_Forward_Seconds");
			int ordIsMenuEnabled = reader.GetOrdinal("Is_Menu_Enabled");
			int ordIsStopPromptEnabled = reader.GetOrdinal("Is_Stop_Prompt_Enabled");
			int ordMinimumToneLength = reader.GetOrdinal("Minimum_Tone_Length");
			int ordStopOnAllTones = reader.GetOrdinal("Stop_On_All_Tones");
			int ordPlayReceiptCode = reader.GetOrdinal("Play_Receipt_Code");
			int ordPromptForListenLocation = reader.GetOrdinal("Prompt_For_Listen_Location");
			int ordRecordingSilenceSeconds = reader.GetOrdinal("Recording_Silence_Seconds");
			int ordRecordingTrimSilence = reader.GetOrdinal("Recording_Trim_Silence");
			int ordRecordingGainControl = reader.GetOrdinal("Recording_Gain_Control");
			int ordRecordingVolume = reader.GetOrdinal("Recording_Volume");

			do
			{
				result.Add(new GetInTouchEmulationsRow
				{
					EmulationID = GetNonNullFieldValue<Int32>(reader, ordEmulationID),
					EmulationDescription = GetField<String>(reader, ordEmulationDescription),
					KeyHearInfo = GetField<String>(reader, ordKeyHearInfo),
					KeyRecord = GetField<String>(reader, ordKeyRecord),
					KeyPlay = GetField<String>(reader, ordKeyPlay),
					KeyStop = GetField<String>(reader, ordKeyStop),
					KeyRewind = GetField<String>(reader, ordKeyRewind),
					KeyFastForward = GetField<String>(reader, ordKeyFastForward),
					KeyInsert = GetField<String>(reader, ordKeyInsert),
					KeyToStart = GetField<String>(reader, ordKeyToStart),
					KeyToEnd = GetField<String>(reader, ordKeyToEnd),
					KeyHelp = GetField<String>(reader, ordKeyHelp),
					KeyCancel = GetField<String>(reader, ordKeyCancel),
					KeyDone = GetField<String>(reader, ordKeyDone),
					KeyCommand = GetField<String>(reader, ordKeyCommand),
					KeyA = GetField<String>(reader, ordKeyA),
					KeyB = GetField<String>(reader, ordKeyB),
					KeyC = GetField<String>(reader, ordKeyC),
					KeyD = GetField<String>(reader, ordKeyD),
					UseWorkType = GetNonNullFieldValue<Boolean>(reader, ordUseWorkType),
					UsePatientID = GetNonNullFieldValue<Boolean>(reader, ordUsePatientID),
					RequireWorkType = GetNonNullFieldValue<Boolean>(reader, ordRequireWorkType),
					CompanyID = GetFieldValue<Int32>(reader, ordCompanyID),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ExtraPrompt = GetField<String>(reader, ordExtraPrompt),
					ExtraPromptTag = GetField<String>(reader, ordExtraPromptTag),
					UseLocation = GetNonNullFieldValue<Boolean>(reader, ordUseLocation),
					KeyInsertMode = GetField<String>(reader, ordKeyInsertMode),
					KeyOverwrite = GetField<String>(reader, ordKeyOverwrite),
					KeyPending = GetField<String>(reader, ordKeyPending),
					IsDictationReviewEnabled = GetFieldValue<Boolean>(reader, ordIsDictationReviewEnabled),
					PatientIDSort = GetFieldValue<Int32>(reader, ordPatientIDSort),
					WorkTypeSort = GetFieldValue<Int32>(reader, ordWorkTypeSort),
					LocationSort = GetFieldValue<Int32>(reader, ordLocationSort),
					ExtraPromptSort = GetFieldValue<Int32>(reader, ordExtraPromptSort),
					DefaultRecordingMethod = GetFieldValue<Int32>(reader, ordDefaultRecordingMethod),
					MenuDelaySeconds = GetFieldValue<Int32>(reader, ordMenuDelaySeconds),
					IsMenuBeepEnabled = GetFieldValue<Boolean>(reader, ordIsMenuBeepEnabled),
					KeyNextPatient = GetField<String>(reader, ordKeyNextPatient),
					KeyContinuousRewind = GetField<String>(reader, ordKeyContinuousRewind),
					KeyContinuousFastForward = GetField<String>(reader, ordKeyContinuousFastForward),
					RewindSeconds = GetFieldValue<Int32>(reader, ordRewindSeconds),
					FastForwardSeconds = GetFieldValue<Int32>(reader, ordFastForwardSeconds),
					IsMenuEnabled = GetNonNullFieldValue<Boolean>(reader, ordIsMenuEnabled),
					IsStopPromptEnabled = GetNonNullFieldValue<Boolean>(reader, ordIsStopPromptEnabled),
					MinimumToneLength = GetNonNullFieldValue<Int32>(reader, ordMinimumToneLength),
					StopOnAllTones = GetNonNullFieldValue<Boolean>(reader, ordStopOnAllTones),
					PlayReceiptCode = GetNonNullFieldValue<Boolean>(reader, ordPlayReceiptCode),
					PromptForListenLocation = GetNonNullFieldValue<Boolean>(reader, ordPromptForListenLocation),
					RecordingSilenceSeconds = GetNonNullFieldValue<Int32>(reader, ordRecordingSilenceSeconds),
					RecordingTrimSilence = GetNonNullFieldValue<Boolean>(reader, ordRecordingTrimSilence),
					RecordingGainControl = GetNonNullFieldValue<Int32>(reader, ordRecordingGainControl),
					RecordingVolume = GetNonNullFieldValue<Int32>(reader, ordRecordingVolume),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetLinkedTranscriptionsRow>> GetLinkedTranscriptionsAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID) => GetLinkedTranscriptionsAsync(connection, clientID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetLinkedTranscriptionsRow>> GetLinkedTranscriptionsAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Linked_Transcriptions");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetLinkedTranscriptionsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordTranPriorID = reader.GetOrdinal("Tran_Prior_ID");
			int ordTranNextID = reader.GetOrdinal("Tran_Next_ID");

			do
			{
				result.Add(new GetLinkedTranscriptionsRow
				{
					TranscriptionID = GetFieldValue<Int32>(reader, ordTranscriptionID),
					TranPriorID = GetFieldValue<Int32>(reader, ordTranPriorID),
					TranNextID = GetFieldValue<Int32>(reader, ordTranNextID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetMasterTIDRow>> GetMasterTIDAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID) => GetMasterTIDAsync(connection, clientID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetMasterTIDRow>> GetMasterTIDAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Master_TID");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetMasterTIDRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");

			do
			{
				result.Add(new GetMasterTIDRow
				{
					TranscriptionID = GetFieldValue<Int32>(reader, ordTranscriptionID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetPasswordHashAlgorithmRow>> GetPasswordHashAlgorithmAsync(SqlConnection connection, Int32 algorithmID) => GetPasswordHashAlgorithmAsync(connection, algorithmID, CancellationToken.None);
	public static async Task<List<GetPasswordHashAlgorithmRow>> GetPasswordHashAlgorithmAsync(SqlConnection connection, Int32 algorithmID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Password_Hash_Algorithm");

		cmd.Parameters.Add(CreateParameter("@Algorithm_ID", algorithmID, SqlDbType.Int, 4));

		var result = new List<GetPasswordHashAlgorithmRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordPasswordHashAlgorithmID = reader.GetOrdinal("Password_Hash_Algorithm_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordDescription = reader.GetOrdinal("Description");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordCaseSensitive = reader.GetOrdinal("Case_Sensitive");
			int ordPRF = reader.GetOrdinal("PRF");
			int ordSaltLength = reader.GetOrdinal("Salt_Length");
			int ordHashLength = reader.GetOrdinal("Hash_Length");
			int ordIterations = reader.GetOrdinal("Iterations");

			do
			{
				result.Add(new GetPasswordHashAlgorithmRow
				{
					PasswordHashAlgorithmID = GetNonNullFieldValue<Int32>(reader, ordPasswordHashAlgorithmID),
					Name = GetNonNullField<String>(reader, ordName),
					Description = GetField<String>(reader, ordDescription),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
					CaseSensitive = GetNonNullFieldValue<Boolean>(reader, ordCaseSensitive),
					PRF = GetField<String>(reader, ordPRF),
					SaltLength = GetFieldValue<Int32>(reader, ordSaltLength),
					HashLength = GetFieldValue<Int32>(reader, ordHashLength),
					Iterations = GetFieldValue<Int32>(reader, ordIterations),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetPatientRow>> GetPatientAsync(SqlConnection connection, Int32 clientID, String patientID, Boolean useFieldMask) => GetPatientAsync(connection, clientID, patientID, useFieldMask, CancellationToken.None);
	public static async Task<List<GetPatientRow>> GetPatientAsync(SqlConnection connection, Int32 clientID, String patientID, Boolean useFieldMask, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Patient");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.Char, 20));
		cmd.Parameters.Add(CreateParameter("@Use_Field_Mask", useFieldMask, SqlDbType.Bit, 1));

		var result = new List<GetPatientRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordPatientNameFirst = reader.GetOrdinal("Patient_Name_First");
			int ordPatientNameMiddle = reader.GetOrdinal("Patient_Name_Middle");
			int ordPatientNameLast = reader.GetOrdinal("Patient_Name_Last");
			int ordPatientFullName = reader.GetOrdinal("Patient_Full_Name");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordPatientAddress1 = reader.GetOrdinal("Patient_Address_1");
			int ordPatientAddress2 = reader.GetOrdinal("Patient_Address_2");
			int ordPatientCity = reader.GetOrdinal("Patient_City");
			int ordPatientState = reader.GetOrdinal("Patient_State");
			int ordPatientZipCode = reader.GetOrdinal("Patient_Zip_Code");
			int ordPatientHomePhone = reader.GetOrdinal("Patient_Home_Phone");
			int ordPatientWorkPhone = reader.GetOrdinal("Patient_Work_Phone");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordPrimaryAssociateID = reader.GetOrdinal("Primary_Associate_ID");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordAdmitDate = reader.GetOrdinal("Admit_Date");
			int ordDischargeDate = reader.GetOrdinal("Discharge_Date");
			int ordPrimaryAssociateTypeID = reader.GetOrdinal("Primary_Associate_Type_ID");
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");

			do
			{
				result.Add(new GetPatientRow
				{
					PatientID = GetNonNullField<String>(reader, ordPatientID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					PatientNameFirst = GetField<String>(reader, ordPatientNameFirst),
					PatientNameMiddle = GetField<String>(reader, ordPatientNameMiddle),
					PatientNameLast = GetField<String>(reader, ordPatientNameLast),
					PatientFullName = GetField<String>(reader, ordPatientFullName),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					PatientAddress1 = GetField<String>(reader, ordPatientAddress1),
					PatientAddress2 = GetField<String>(reader, ordPatientAddress2),
					PatientCity = GetField<String>(reader, ordPatientCity),
					PatientState = GetField<String>(reader, ordPatientState),
					PatientZipCode = GetField<String>(reader, ordPatientZipCode),
					PatientHomePhone = GetField<String>(reader, ordPatientHomePhone),
					PatientWorkPhone = GetField<String>(reader, ordPatientWorkPhone),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					PrimaryAssociateID = GetFieldValue<Int32>(reader, ordPrimaryAssociateID),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					AdmitDate = GetFieldValue<DateTime>(reader, ordAdmitDate),
					DischargeDate = GetFieldValue<DateTime>(reader, ordDischargeDate),
					PrimaryAssociateTypeID = GetNonNullFieldValue<Int16>(reader, ordPrimaryAssociateTypeID),
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetPatientAppointmentRow>> GetPatientAppointmentAsync(SqlConnection connection, Int32 clientID, Guid appointmentID) => GetPatientAppointmentAsync(connection, clientID, appointmentID, CancellationToken.None);
	public static async Task<List<GetPatientAppointmentRow>> GetPatientAppointmentAsync(SqlConnection connection, Int32 clientID, Guid appointmentID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Patient_Appointment");

		cmd.Parameters.Add(CreateParameter("@ClientID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Appointment_ID", appointmentID, SqlDbType.UniqueIdentifier, 16));

		var result = new List<GetPatientAppointmentRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordPhysician = reader.GetOrdinal("Physician");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordApptUserField1 = reader.GetOrdinal("Appt_User_Field_1");
			int ordApptUserField2 = reader.GetOrdinal("Appt_User_Field_2");
			int ordApptUserField3 = reader.GetOrdinal("Appt_User_Field_3");
			int ordApptUserField4 = reader.GetOrdinal("Appt_User_Field_4");
			int ordApptUserField5 = reader.GetOrdinal("Appt_User_Field_5");
			int ordAppointmentId = reader.GetOrdinal("appointment_id");
			int ordAppointmentClientCode = reader.GetOrdinal("Appointment_Client_Code");
			int ordExtendedInfo = reader.GetOrdinal("Extended_Info");

			do
			{
				result.Add(new GetPatientAppointmentRow
				{
					PatientID = GetNonNullField<String>(reader, ordPatientID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					LocationID = GetNonNullFieldValue<Int32>(reader, ordLocationID),
					Physician = GetNonNullField<String>(reader, ordPhysician),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					DictationID = GetField<String>(reader, ordDictationID),
					ApptUserField1 = GetField<String>(reader, ordApptUserField1),
					ApptUserField2 = GetField<String>(reader, ordApptUserField2),
					ApptUserField3 = GetField<String>(reader, ordApptUserField3),
					ApptUserField4 = GetField<String>(reader, ordApptUserField4),
					ApptUserField5 = GetField<String>(reader, ordApptUserField5),
					AppointmentId = GetNonNullFieldValue<Guid>(reader, ordAppointmentId),
					AppointmentClientCode = GetField<String>(reader, ordAppointmentClientCode),
					ExtendedInfo = GetField<String>(reader, ordExtendedInfo),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetProgramRow>> GetProgramAsync(SqlConnection connection, Int32 programID) => GetProgramAsync(connection, programID, CancellationToken.None);
	public static async Task<List<GetProgramRow>> GetProgramAsync(SqlConnection connection, Int32 programID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Program");

		cmd.Parameters.Add(CreateParameter("@Program_ID", programID, SqlDbType.Int, 4));

		var result = new List<GetProgramRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordProgramID = reader.GetOrdinal("Program_ID");
			int ordProgramName = reader.GetOrdinal("Program_Name");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordLatestVersionID = reader.GetOrdinal("Latest_Version_ID");
			int ordLatestVersionNumber = reader.GetOrdinal("Latest_Version_Number");
			int ordLatestVersionModifiedUser = reader.GetOrdinal("Latest_Version_Modified_User");
			int ordLatestVersionModifiedDate = reader.GetOrdinal("Latest_Version_Modified_Date");

			do
			{
				result.Add(new GetProgramRow
				{
					ProgramID = GetFieldValue<Int32>(reader, ordProgramID),
					ProgramName = GetField<String>(reader, ordProgramName),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					LatestVersionID = GetFieldValue<Int32>(reader, ordLatestVersionID),
					LatestVersionNumber = GetField<String>(reader, ordLatestVersionNumber),
					LatestVersionModifiedUser = GetField<String>(reader, ordLatestVersionModifiedUser),
					LatestVersionModifiedDate = GetFieldValue<DateTime>(reader, ordLatestVersionModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetProgramVersionRow>> GetProgramVersionAsync(SqlConnection connection, Int32 programID, Int32 versionID) => GetProgramVersionAsync(connection, programID, versionID, CancellationToken.None);
	public static async Task<List<GetProgramVersionRow>> GetProgramVersionAsync(SqlConnection connection, Int32 programID, Int32 versionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Program_Version");

		cmd.Parameters.Add(CreateParameter("@Program_ID", programID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Version_ID", versionID, SqlDbType.Int, 4));

		var result = new List<GetProgramVersionRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordProgramID = reader.GetOrdinal("Program_ID");
			int ordProgramName = reader.GetOrdinal("Program_Name");
			int ordVersionID = reader.GetOrdinal("Version_ID");
			int ordVersionNumber = reader.GetOrdinal("Version_Number");
			int ordUpgradeRequired = reader.GetOrdinal("Upgrade_Required");
			int ordUpgradeAvailable = reader.GetOrdinal("Upgrade_Available");
			int ordUpgradeMessage = reader.GetOrdinal("Upgrade_Message");
			int ordUpgradeURL = reader.GetOrdinal("Upgrade_URL");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordIsPrivate = reader.GetOrdinal("Is_Private");

			do
			{
				result.Add(new GetProgramVersionRow
				{
					ProgramID = GetFieldValue<Int32>(reader, ordProgramID),
					ProgramName = GetField<String>(reader, ordProgramName),
					VersionID = GetNonNullFieldValue<Int32>(reader, ordVersionID),
					VersionNumber = GetNonNullField<String>(reader, ordVersionNumber),
					UpgradeRequired = GetNonNullFieldValue<Boolean>(reader, ordUpgradeRequired),
					UpgradeAvailable = GetNonNullFieldValue<Boolean>(reader, ordUpgradeAvailable),
					UpgradeMessage = GetField<String>(reader, ordUpgradeMessage),
					UpgradeURL = GetField<String>(reader, ordUpgradeURL),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					IsPrivate = GetNonNullFieldValue<Boolean>(reader, ordIsPrivate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetProgramVersionByNumberRow>> GetProgramVersionByNumberAsync(SqlConnection connection, Int32 programID, String versionNumber) => GetProgramVersionByNumberAsync(connection, programID, versionNumber, CancellationToken.None);
	public static async Task<List<GetProgramVersionByNumberRow>> GetProgramVersionByNumberAsync(SqlConnection connection, Int32 programID, String versionNumber, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Program_Version_ByNumber");

		cmd.Parameters.Add(CreateParameter("@Program_ID", programID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Version_Number", versionNumber, SqlDbType.VarChar, 20));

		var result = new List<GetProgramVersionByNumberRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordProgramID = reader.GetOrdinal("Program_ID");
			int ordProgramName = reader.GetOrdinal("Program_Name");
			int ordVersionID = reader.GetOrdinal("Version_ID");
			int ordVersionNumber = reader.GetOrdinal("Version_Number");
			int ordUpgradeRequired = reader.GetOrdinal("Upgrade_Required");
			int ordUpgradeAvailable = reader.GetOrdinal("Upgrade_Available");
			int ordUpgradeMessage = reader.GetOrdinal("Upgrade_Message");
			int ordUpgradeURL = reader.GetOrdinal("Upgrade_URL");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordIsPrivate = reader.GetOrdinal("Is_Private");

			do
			{
				result.Add(new GetProgramVersionByNumberRow
				{
					ProgramID = GetFieldValue<Int32>(reader, ordProgramID),
					ProgramName = GetField<String>(reader, ordProgramName),
					VersionID = GetNonNullFieldValue<Int32>(reader, ordVersionID),
					VersionNumber = GetNonNullField<String>(reader, ordVersionNumber),
					UpgradeRequired = GetNonNullFieldValue<Boolean>(reader, ordUpgradeRequired),
					UpgradeAvailable = GetNonNullFieldValue<Boolean>(reader, ordUpgradeAvailable),
					UpgradeMessage = GetField<String>(reader, ordUpgradeMessage),
					UpgradeURL = GetField<String>(reader, ordUpgradeURL),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					IsPrivate = GetNonNullFieldValue<Boolean>(reader, ordIsPrivate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetProgramVersionsRow>> GetProgramVersionsAsync(SqlConnection connection, Int32 programID) => GetProgramVersionsAsync(connection, programID, CancellationToken.None);
	public static async Task<List<GetProgramVersionsRow>> GetProgramVersionsAsync(SqlConnection connection, Int32 programID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Program_Versions");

		cmd.Parameters.Add(CreateParameter("@Program_ID", programID, SqlDbType.Int, 4));

		var result = new List<GetProgramVersionsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordVersionID = reader.GetOrdinal("Version_ID");
			int ordVersionNumber = reader.GetOrdinal("Version_Number");
			int ordUpgradeRequired = reader.GetOrdinal("Upgrade_Required");
			int ordUpgradeAvailable = reader.GetOrdinal("Upgrade_Available");
			int ordUpgradeMessage = reader.GetOrdinal("Upgrade_Message");
			int ordUpgradeURL = reader.GetOrdinal("Upgrade_URL");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordIsPrivate = reader.GetOrdinal("Is_Private");

			do
			{
				result.Add(new GetProgramVersionsRow
				{
					VersionID = GetNonNullFieldValue<Int32>(reader, ordVersionID),
					VersionNumber = GetNonNullField<String>(reader, ordVersionNumber),
					UpgradeRequired = GetNonNullFieldValue<Boolean>(reader, ordUpgradeRequired),
					UpgradeAvailable = GetNonNullFieldValue<Boolean>(reader, ordUpgradeAvailable),
					UpgradeMessage = GetField<String>(reader, ordUpgradeMessage),
					UpgradeURL = GetField<String>(reader, ordUpgradeURL),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					IsPrivate = GetNonNullFieldValue<Boolean>(reader, ordIsPrivate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetProgramsRow>> GetProgramsAsync(SqlConnection connection) => GetProgramsAsync(connection, CancellationToken.None);
	public static async Task<List<GetProgramsRow>> GetProgramsAsync(SqlConnection connection, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Programs");

		var result = new List<GetProgramsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordProgramID = reader.GetOrdinal("Program_ID");
			int ordProgramName = reader.GetOrdinal("Program_Name");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordVersionsCount = reader.GetOrdinal("Versions_Count");

			do
			{
				result.Add(new GetProgramsRow
				{
					ProgramID = GetFieldValue<Int32>(reader, ordProgramID),
					ProgramName = GetField<String>(reader, ordProgramName),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					VersionsCount = GetFieldValue<Int32>(reader, ordVersionsCount),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetReferralTranscriptionAuthorizationByUserIDRow>> GetReferralTranscriptionAuthorizationByUserIDAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionClientID, Int32 transcriptionID) => GetReferralTranscriptionAuthorizationByUserIDAsync(connection, clientID, userID, transcriptionClientID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetReferralTranscriptionAuthorizationByUserIDRow>> GetReferralTranscriptionAuthorizationByUserIDAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionClientID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Referral_Transcription_Authorization_ByUserID");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_Client_ID", transcriptionClientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetReferralTranscriptionAuthorizationByUserIDRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordCanView = reader.GetOrdinal("Can_View");

			do
			{
				result.Add(new GetReferralTranscriptionAuthorizationByUserIDRow
				{
					CanView = GetNonNullFieldValue<Int32>(reader, ordCanView),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetServerTimeZoneIdentifierRow>> GetServerTimeZoneIdentifierAsync(SqlConnection connection) => GetServerTimeZoneIdentifierAsync(connection, CancellationToken.None);
	public static async Task<List<GetServerTimeZoneIdentifierRow>> GetServerTimeZoneIdentifierAsync(SqlConnection connection, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Server_TimeZone_Identifier");

		var result = new List<GetServerTimeZoneIdentifierRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordIdentifier = reader.GetOrdinal("Identifier");

			do
			{
				result.Add(new GetServerTimeZoneIdentifierRow
				{
					Identifier = GetField<String>(reader, ordIdentifier),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetServerVariableRow>> GetServerVariableAsync(SqlConnection connection, String serverVariable) => GetServerVariableAsync(connection, serverVariable, CancellationToken.None);
	public static async Task<List<GetServerVariableRow>> GetServerVariableAsync(SqlConnection connection, String serverVariable, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Server_Variable");

		cmd.Parameters.Add(CreateParameter("@Server_Variable", serverVariable, SqlDbType.VarChar, 50));

		var result = new List<GetServerVariableRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordServerValue = reader.GetOrdinal("Server_Value");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");

			do
			{
				result.Add(new GetServerVariableRow
				{
					ServerValue = GetField<String>(reader, ordServerValue),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetTranscriptionRow>> GetTranscriptionAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID) => GetTranscriptionAsync(connection, clientID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetTranscriptionRow>> GetTranscriptionAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Transcription");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetTranscriptionRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordDocumentType = reader.GetOrdinal("Document_Type");
			int ordDocumentDescription = reader.GetOrdinal("Document_Description");
			int ordTranscriptionFilepath = reader.GetOrdinal("Transcription_Filepath");
			int ordDateSigned = reader.GetOrdinal("Date_Signed");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordUserUsername = reader.GetOrdinal("User_Username");
			int ordUserFullname = reader.GetOrdinal("User_Fullname");
			int ordUserNameFirst = reader.GetOrdinal("User_Name_First");
			int ordUserNameLast = reader.GetOrdinal("User_Name_Last");
			int ordUserNamePrefix = reader.GetOrdinal("User_Name_Prefix");
			int ordUserNameMiddle = reader.GetOrdinal("User_Name_Middle");
			int ordUserNameSuffix = reader.GetOrdinal("User_Name_Suffix");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordMedicalRecordsLocationName = reader.GetOrdinal("Medical_Records_Location_Name");
			int ordLocationName = reader.GetOrdinal("Location_Name");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientGUID = reader.GetOrdinal("Patient_GUID");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordReceiptCode = reader.GetOrdinal("Receipt_Code");
			int ordDateDictatedCST = reader.GetOrdinal("Date_Dictated_CST");
			int ordComment = reader.GetOrdinal("Comment");
			int ordClientTimeZoneIdentifier = reader.GetOrdinal("Client_TimeZone_Identifier");
			int ordServerTimeZoneIdentifier = reader.GetOrdinal("Server_TimeZone_Identifier");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordAppointmentID = reader.GetOrdinal("Appointment_ID");

			do
			{
				result.Add(new GetTranscriptionRow
				{
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					DocumentType = GetField<String>(reader, ordDocumentType),
					DocumentDescription = GetField<String>(reader, ordDocumentDescription),
					TranscriptionFilepath = GetField<String>(reader, ordTranscriptionFilepath),
					DateSigned = GetFieldValue<DateTime>(reader, ordDateSigned),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					UserUsername = GetField<String>(reader, ordUserUsername),
					UserFullname = GetField<String>(reader, ordUserFullname),
					UserNameFirst = GetField<String>(reader, ordUserNameFirst),
					UserNameLast = GetField<String>(reader, ordUserNameLast),
					UserNamePrefix = GetField<String>(reader, ordUserNamePrefix),
					UserNameMiddle = GetField<String>(reader, ordUserNameMiddle),
					UserNameSuffix = GetField<String>(reader, ordUserNameSuffix),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					MedicalRecordsLocationName = GetField<String>(reader, ordMedicalRecordsLocationName),
					LocationName = GetField<String>(reader, ordLocationName),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientGUID = GetFieldValue<Guid>(reader, ordPatientGUID),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					ReceiptCode = GetField<String>(reader, ordReceiptCode),
					DateDictatedCST = GetFieldValue<DateTime>(reader, ordDateDictatedCST),
					Comment = GetField<String>(reader, ordComment),
					ClientTimeZoneIdentifier = GetField<String>(reader, ordClientTimeZoneIdentifier),
					ServerTimeZoneIdentifier = GetField<String>(reader, ordServerTimeZoneIdentifier),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					AppointmentID = GetFieldValue<Guid>(reader, ordAppointmentID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetTranscriptionAssociatesRow>> GetTranscriptionAssociatesAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID) => GetTranscriptionAssociatesAsync(connection, clientID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetTranscriptionAssociatesRow>> GetTranscriptionAssociatesAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Transcription_Associates");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetTranscriptionAssociatesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordAssociateID = reader.GetOrdinal("Associate_ID");
			int ordAssociateNameFirst = reader.GetOrdinal("Associate_Name_First");
			int ordAssociateNameLast = reader.GetOrdinal("Associate_Name_Last");
			int ordAssociateNameMiddle = reader.GetOrdinal("Associate_Name_Middle");
			int ordAssociatePrefix = reader.GetOrdinal("Associate_Prefix");
			int ordAssociateSuffix = reader.GetOrdinal("Associate_Suffix");

			do
			{
				result.Add(new GetTranscriptionAssociatesRow
				{
					AssociateID = GetNonNullFieldValue<Int32>(reader, ordAssociateID),
					AssociateNameFirst = GetField<String>(reader, ordAssociateNameFirst),
					AssociateNameLast = GetField<String>(reader, ordAssociateNameLast),
					AssociateNameMiddle = GetField<String>(reader, ordAssociateNameMiddle),
					AssociatePrefix = GetField<String>(reader, ordAssociatePrefix),
					AssociateSuffix = GetField<String>(reader, ordAssociateSuffix),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetTranscriptionAuthorizationByCompanyUserIDRow>> GetTranscriptionAuthorizationByCompanyUserIDAsync(SqlConnection connection, Int32 companyID, Int32 userID, Int32 transcriptionClientID, Int32 transcriptionID) => GetTranscriptionAuthorizationByCompanyUserIDAsync(connection, companyID, userID, transcriptionClientID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetTranscriptionAuthorizationByCompanyUserIDRow>> GetTranscriptionAuthorizationByCompanyUserIDAsync(SqlConnection connection, Int32 companyID, Int32 userID, Int32 transcriptionClientID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Transcription_Authorization_ByCompanyUserID");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_Client_ID", transcriptionClientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetTranscriptionAuthorizationByCompanyUserIDRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordIsAuthorized = reader.GetOrdinal("Is_Authorized");

			do
			{
				result.Add(new GetTranscriptionAuthorizationByCompanyUserIDRow
				{
					IsAuthorized = GetFieldValue<Boolean>(reader, ordIsAuthorized),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetTranscriptionAuthorizationByUserIDRow>> GetTranscriptionAuthorizationByUserIDAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionClientID, Int32 transcriptionID) => GetTranscriptionAuthorizationByUserIDAsync(connection, clientID, userID, transcriptionClientID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetTranscriptionAuthorizationByUserIDRow>> GetTranscriptionAuthorizationByUserIDAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 transcriptionClientID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Transcription_Authorization_ByUserID");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_Client_ID", transcriptionClientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetTranscriptionAuthorizationByUserIDRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordCanEdit = reader.GetOrdinal("Can_Edit");
			int ordCanEditHeader = reader.GetOrdinal("Can_Edit_Header");

			do
			{
				result.Add(new GetTranscriptionAuthorizationByUserIDRow
				{
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					CanEdit = GetFieldValue<Boolean>(reader, ordCanEdit),
					CanEditHeader = GetFieldValue<Boolean>(reader, ordCanEditHeader),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetTranscriptionCommentAuthorizationByUserIDRow>> GetTranscriptionCommentAuthorizationByUserIDAsync(SqlConnection connection, Int32 userID) => GetTranscriptionCommentAuthorizationByUserIDAsync(connection, userID, CancellationToken.None);
	public static async Task<List<GetTranscriptionCommentAuthorizationByUserIDRow>> GetTranscriptionCommentAuthorizationByUserIDAsync(SqlConnection connection, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Transcription_Comment_Authorization_ByUserID");

		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		var result = new List<GetTranscriptionCommentAuthorizationByUserIDRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordA = reader.GetOrdinal("A");

			do
			{
				result.Add(new GetTranscriptionCommentAuthorizationByUserIDRow
				{
					A = GetNonNullFieldValue<Int32>(reader, ordA),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetTranscriptionDictationRow>> GetTranscriptionDictationAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID) => GetTranscriptionDictationAsync(connection, clientID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetTranscriptionDictationRow>> GetTranscriptionDictationAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Transcription_Dictation");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetTranscriptionDictationRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordAppointmentID = reader.GetOrdinal("Appointment_ID");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordAccountNumber = reader.GetOrdinal("Account_Number");
			int ordComment = reader.GetOrdinal("Comment");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordDictationSourceName = reader.GetOrdinal("Dictation_Source_Name");
			int ordIsStat = reader.GetOrdinal("Is_Stat");

			do
			{
				result.Add(new GetTranscriptionDictationRow
				{
					DictationID = GetNonNullFieldValue<Int32>(reader, ordDictationID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					PatientID = GetField<String>(reader, ordPatientID),
					AppointmentID = GetFieldValue<Guid>(reader, ordAppointmentID),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					AccountNumber = GetField<String>(reader, ordAccountNumber),
					Comment = GetField<String>(reader, ordComment),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					DictationSourceName = GetField<String>(reader, ordDictationSourceName),
					IsStat = GetNonNullFieldValue<Boolean>(reader, ordIsStat),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetTranscriptionSignaturesRow>> GetTranscriptionSignaturesAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID) => GetTranscriptionSignaturesAsync(connection, clientID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetTranscriptionSignaturesRow>> GetTranscriptionSignaturesAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Transcription_Signatures");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetTranscriptionSignaturesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordAuthorizerFullName = reader.GetOrdinal("Authorizer_FullName");
			int ordAuthorizerID = reader.GetOrdinal("Authorizer_ID");
			int ordAuthenticatorID = reader.GetOrdinal("Authenticator_ID");
			int ordDateSigned = reader.GetOrdinal("Date_Signed");
			int ordSignOrder = reader.GetOrdinal("Sign_Order");

			do
			{
				result.Add(new GetTranscriptionSignaturesRow
				{
					AuthorizerFullName = GetField<String>(reader, ordAuthorizerFullName),
					AuthorizerID = GetFieldValue<Int32>(reader, ordAuthorizerID),
					AuthenticatorID = GetFieldValue<Int32>(reader, ordAuthenticatorID),
					DateSigned = GetFieldValue<DateTime>(reader, ordDateSigned),
					SignOrder = GetFieldValue<Int32>(reader, ordSignOrder),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetTranscriptionValidationRuleDataRow>> GetTranscriptionValidationRuleDataAsync(SqlConnection connection, Int32 clientID, List<IntTableTypeRow> transcriptionIDs) => GetTranscriptionValidationRuleDataAsync(connection, clientID, transcriptionIDs, CancellationToken.None);
	public static async Task<List<GetTranscriptionValidationRuleDataRow>> GetTranscriptionValidationRuleDataAsync(SqlConnection connection, Int32 clientID, List<IntTableTypeRow> transcriptionIDs, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Transcription_ValidationRuleData");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_IDs", new IntTableTypeRowDataTable(transcriptionIDs), SqlDbType.Structured, "dbo.int_TableType"));

		var result = new List<GetTranscriptionValidationRuleDataRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordTranscriptionStat = reader.GetOrdinal("Transcription_Stat");
			int ordPatientID = reader.GetOrdinal("Patient_ID");
			int ordPatientName = reader.GetOrdinal("Patient_Name");
			int ordUserField1 = reader.GetOrdinal("User_Field_1");
			int ordUserField2 = reader.GetOrdinal("User_Field_2");
			int ordUserField3 = reader.GetOrdinal("User_Field_3");
			int ordUserField4 = reader.GetOrdinal("User_Field_4");
			int ordUserField5 = reader.GetOrdinal("User_Field_5");
			int ordOrderNumber = reader.GetOrdinal("Order_Number");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordAdmitDate = reader.GetOrdinal("Admit_Date");
			int ordDischargeDate = reader.GetOrdinal("Discharge_Date");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordPatientBirthdate = reader.GetOrdinal("Patient_Birthdate");
			int ordAppointmentID = reader.GetOrdinal("Appointment_ID");
			int ordPatientGender = reader.GetOrdinal("Patient_Gender");
			int ordPatientClass = reader.GetOrdinal("Patient_Class");
			int ordPatientType = reader.GetOrdinal("Patient_Type");
			int ordFloor = reader.GetOrdinal("Floor");
			int ordBed = reader.GetOrdinal("Bed");
			int ordFacility = reader.GetOrdinal("Facility");
			int ordLocation = reader.GetOrdinal("Location");
			int ordAccountNumber = reader.GetOrdinal("Account_Number");
			int ordDictatingUserGroupID = reader.GetOrdinal("Dictating_User_Group_ID");
			int ordAssociatesJson = reader.GetOrdinal("AssociatesJson");
			int ordSignaturesJson = reader.GetOrdinal("SignaturesJson");
			int ordOrdersJson = reader.GetOrdinal("OrdersJson");
			int ordMtStatisticsJson = reader.GetOrdinal("MtStatisticsJson");

			do
			{
				result.Add(new GetTranscriptionValidationRuleDataRow
				{
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					TranscriptionStat = GetNonNullFieldValue<Boolean>(reader, ordTranscriptionStat),
					PatientID = GetField<String>(reader, ordPatientID),
					PatientName = GetField<String>(reader, ordPatientName),
					UserField1 = GetField<String>(reader, ordUserField1),
					UserField2 = GetField<String>(reader, ordUserField2),
					UserField3 = GetField<String>(reader, ordUserField3),
					UserField4 = GetField<String>(reader, ordUserField4),
					UserField5 = GetField<String>(reader, ordUserField5),
					OrderNumber = GetField<String>(reader, ordOrderNumber),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					AdmitDate = GetFieldValue<DateTime>(reader, ordAdmitDate),
					DischargeDate = GetFieldValue<DateTime>(reader, ordDischargeDate),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					PatientBirthdate = GetFieldValue<DateTime>(reader, ordPatientBirthdate),
					AppointmentID = GetFieldValue<Guid>(reader, ordAppointmentID),
					PatientGender = GetField<String>(reader, ordPatientGender),
					PatientClass = GetField<String>(reader, ordPatientClass),
					PatientType = GetField<String>(reader, ordPatientType),
					Floor = GetField<String>(reader, ordFloor),
					Bed = GetField<String>(reader, ordBed),
					Facility = GetField<String>(reader, ordFacility),
					Location = GetField<String>(reader, ordLocation),
					AccountNumber = GetField<String>(reader, ordAccountNumber),
					DictatingUserGroupID = GetFieldValue<Int32>(reader, ordDictatingUserGroupID),
					AssociatesJson = GetField<String>(reader, ordAssociatesJson),
					SignaturesJson = GetField<String>(reader, ordSignaturesJson),
					OrdersJson = GetField<String>(reader, ordOrdersJson),
					MtStatisticsJson = GetField<String>(reader, ordMtStatisticsJson),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetTranscriptionWorkflowFoldersRow>> GetTranscriptionWorkflowFoldersAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID) => GetTranscriptionWorkflowFoldersAsync(connection, clientID, transcriptionID, CancellationToken.None);
	public static async Task<List<GetTranscriptionWorkflowFoldersRow>> GetTranscriptionWorkflowFoldersAsync(SqlConnection connection, Int32 clientID, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Transcription_WorkflowFolders");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetTranscriptionWorkflowFoldersRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordStatus = reader.GetOrdinal("Status");

			do
			{
				result.Add(new GetTranscriptionWorkflowFoldersRow
				{
					Status = GetNonNullFieldValue<Byte>(reader, ordStatus),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetTranscriptionIDByDictationIDRow>> GetTranscriptionIDByDictationIDAsync(SqlConnection connection, Int32 clientID, Int32 dictationID) => GetTranscriptionIDByDictationIDAsync(connection, clientID, dictationID, CancellationToken.None);
	public static async Task<List<GetTranscriptionIDByDictationIDRow>> GetTranscriptionIDByDictationIDAsync(SqlConnection connection, Int32 clientID, Int32 dictationID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_TranscriptionID_ByDictationID");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictation_ID", dictationID, SqlDbType.Int, 4));

		var result = new List<GetTranscriptionIDByDictationIDRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordTranscriptionDictationPath = reader.GetOrdinal("Transcription_DictationPath");

			do
			{
				result.Add(new GetTranscriptionIDByDictationIDRow
				{
					DictationID = GetNonNullFieldValue<Int32>(reader, ordDictationID),
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					DateDictated = GetFieldValue<DateTime>(reader, ordDateDictated),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					TranscriptionDictationPath = GetField<String>(reader, ordTranscriptionDictationPath),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetTranscriptionistClientPoolDefaultsRow>> GetTranscriptionistClientPoolDefaultsAsync(SqlConnection connection, Int32 transcriptionCompanyID, Int32 transcriptionistID, Int32 clientID) => GetTranscriptionistClientPoolDefaultsAsync(connection, transcriptionCompanyID, transcriptionistID, clientID, CancellationToken.None);
	public static async Task<List<GetTranscriptionistClientPoolDefaultsRow>> GetTranscriptionistClientPoolDefaultsAsync(SqlConnection connection, Int32 transcriptionCompanyID, Int32 transcriptionistID, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Transcriptionist_ClientPoolDefaults");

		cmd.Parameters.Add(CreateParameter("@Transcription_Company_ID", transcriptionCompanyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetTranscriptionistClientPoolDefaultsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionistCompanyID = reader.GetOrdinal("Transcriptionist_Company_ID");
			int ordTranscriptionistID = reader.GetOrdinal("Transcriptionist_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordQAOptional = reader.GetOrdinal("QA_Optional");
			int ordStripFontChange = reader.GetOrdinal("Strip_Font_Change");
			int ordHideFontOptions = reader.GetOrdinal("Hide_Font_Options");
			int ordCanCorrect = reader.GetOrdinal("CanCorrect");
			int ordCanInvalidate = reader.GetOrdinal("CanInvalidate");
			int ordQARatingPoolOptionID = reader.GetOrdinal("QARating_Pool_Option_ID");
			int ordDefaultWorkflowOverride = reader.GetOrdinal("DefaultWorkflowOverride");
			int ordCanChooseQALevel = reader.GetOrdinal("CanChooseQALevel");
			int ordCanDeliverToClient = reader.GetOrdinal("CanDeliverToClient");
			int ordMarkPriorAsQT = reader.GetOrdinal("MarkPriorAsQT");
			int ordCanViewPrior = reader.GetOrdinal("CanViewPrior");
			int ordLoadFirstPatientVisitArtifactOptionID = reader.GetOrdinal("Load_First_Patient_Visit_Artifact_Option_ID");
			int ordSearchForPatientRelatedArtifactsOnLoadOptionID = reader.GetOrdinal("Search_For_Patient_Related_Artifacts_On_Load_Option_ID");
			int ordShowSinglePatientArtifactOptionID = reader.GetOrdinal("Show_Single_Patient_Artifact_Option_ID");
			int ordShowSinglePatientArtifactFromAuthorListingOptionID = reader.GetOrdinal("Show_Single_Patient_Artifact_From_Author_Listing_Option_ID");
			int ordShowSinglePatientRelatedArtifactOptionID = reader.GetOrdinal("Show_Single_Patient_Related_Artifact_Option_ID");
			int ordCanPrintFromInScribe = reader.GetOrdinal("Can_Print_From_InScribe");

			do
			{
				result.Add(new GetTranscriptionistClientPoolDefaultsRow
				{
					TranscriptionistCompanyID = GetFieldValue<Int32>(reader, ordTranscriptionistCompanyID),
					TranscriptionistID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionistID),
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					QAOptional = GetFieldValue<Boolean>(reader, ordQAOptional),
					StripFontChange = GetFieldValue<Boolean>(reader, ordStripFontChange),
					HideFontOptions = GetFieldValue<Boolean>(reader, ordHideFontOptions),
					CanCorrect = GetFieldValue<Boolean>(reader, ordCanCorrect),
					CanInvalidate = GetFieldValue<Boolean>(reader, ordCanInvalidate),
					QARatingPoolOptionID = GetNonNullFieldValue<Int32>(reader, ordQARatingPoolOptionID),
					DefaultWorkflowOverride = GetFieldValue<Int32>(reader, ordDefaultWorkflowOverride),
					CanChooseQALevel = GetFieldValue<Boolean>(reader, ordCanChooseQALevel),
					CanDeliverToClient = GetFieldValue<Boolean>(reader, ordCanDeliverToClient),
					MarkPriorAsQT = GetNonNullFieldValue<Boolean>(reader, ordMarkPriorAsQT),
					CanViewPrior = GetFieldValue<Boolean>(reader, ordCanViewPrior),
					LoadFirstPatientVisitArtifactOptionID = GetFieldValue<Int32>(reader, ordLoadFirstPatientVisitArtifactOptionID),
					SearchForPatientRelatedArtifactsOnLoadOptionID = GetFieldValue<Int32>(reader, ordSearchForPatientRelatedArtifactsOnLoadOptionID),
					ShowSinglePatientArtifactOptionID = GetFieldValue<Int32>(reader, ordShowSinglePatientArtifactOptionID),
					ShowSinglePatientArtifactFromAuthorListingOptionID = GetFieldValue<Int32>(reader, ordShowSinglePatientArtifactFromAuthorListingOptionID),
					ShowSinglePatientRelatedArtifactOptionID = GetFieldValue<Int32>(reader, ordShowSinglePatientRelatedArtifactOptionID),
					CanPrintFromInScribe = GetNonNullFieldValue<Boolean>(reader, ordCanPrintFromInScribe),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetTranscriptionistClientsRow>> GetTranscriptionistClientsAsync(SqlConnection connection, Int32 companyID, Int32 transcriptionistID) => GetTranscriptionistClientsAsync(connection, companyID, transcriptionistID, CancellationToken.None);
	public static async Task<List<GetTranscriptionistClientsRow>> GetTranscriptionistClientsAsync(SqlConnection connection, Int32 companyID, Int32 transcriptionistID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Transcriptionist_Clients");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));

		var result = new List<GetTranscriptionistClientsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordClientName = reader.GetOrdinal("Client_Name");
			int ordClientFullName = reader.GetOrdinal("Client_FullName");
			int ordClientActive = reader.GetOrdinal("Client_Active");
			int ordClientAddress1 = reader.GetOrdinal("Client_Address_1");
			int ordClientAddress2 = reader.GetOrdinal("Client_Address_2");
			int ordClientAddress3 = reader.GetOrdinal("Client_Address_3");
			int ordClientCity = reader.GetOrdinal("Client_City");
			int ordClientState = reader.GetOrdinal("Client_State");
			int ordClientZipCode = reader.GetOrdinal("Client_Zip_Code");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordQARatingProgramID = reader.GetOrdinal("QARating_Program_ID");

			do
			{
				result.Add(new GetTranscriptionistClientsRow
				{
					ClientID = GetNonNullFieldValue<Int32>(reader, ordClientID),
					ClientName = GetNonNullField<String>(reader, ordClientName),
					ClientFullName = GetField<String>(reader, ordClientFullName),
					ClientActive = GetNonNullFieldValue<Boolean>(reader, ordClientActive),
					ClientAddress1 = GetField<String>(reader, ordClientAddress1),
					ClientAddress2 = GetField<String>(reader, ordClientAddress2),
					ClientAddress3 = GetField<String>(reader, ordClientAddress3),
					ClientCity = GetField<String>(reader, ordClientCity),
					ClientState = GetField<String>(reader, ordClientState),
					ClientZipCode = GetField<String>(reader, ordClientZipCode),
					ModifiedDate = GetFieldValue<DateTime>(reader, ordModifiedDate),
					ModifiedUser = GetField<String>(reader, ordModifiedUser),
					QARatingProgramID = GetFieldValue<Int32>(reader, ordQARatingProgramID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<Int32> GetTranscriptionistWorkstationPoliciesAsync(SqlConnection connection, Int32 companyId, Int32 transcriptionistId) => GetTranscriptionistWorkstationPoliciesAsync(connection, companyId, transcriptionistId, CancellationToken.None);
	public static async Task<Int32> GetTranscriptionistWorkstationPoliciesAsync(SqlConnection connection, Int32 companyId, Int32 transcriptionistId, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Transcriptionist_Workstation_Policies");

		cmd.Parameters.Add(CreateParameter("@Company_Id", companyId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_Id", transcriptionistId, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<List<GetTranscriptionistWorkstationPolicyRow>> GetTranscriptionistWorkstationPolicyAsync(SqlConnection connection, Int32 companyId, Int32 transcriptionistId) => GetTranscriptionistWorkstationPolicyAsync(connection, companyId, transcriptionistId, CancellationToken.None);
	public static async Task<List<GetTranscriptionistWorkstationPolicyRow>> GetTranscriptionistWorkstationPolicyAsync(SqlConnection connection, Int32 companyId, Int32 transcriptionistId, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Transcriptionist_Workstation_Policy");

		cmd.Parameters.Add(CreateParameter("@Company_Id", companyId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_Id", transcriptionistId, SqlDbType.Int, 4));

		var result = new List<GetTranscriptionistWorkstationPolicyRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordFirewallEnforcementLevel = reader.GetOrdinal("Firewall_Enforcement_Level");
			int ordAntivirusEnforcementLevel = reader.GetOrdinal("Antivirus_Enforcement_Level");
			int ordAntispywareEnforcementLevel = reader.GetOrdinal("Antispyware_Enforcement_Level");
			int ordIPv4Mask = reader.GetOrdinal("IPv4_Mask");
			int ordDomainName = reader.GetOrdinal("Domain_Name");
			int ordMoboSerialNumber = reader.GetOrdinal("Mobo_Serial_Number");
			int ordBiosSerialNumber = reader.GetOrdinal("Bios_Serial_Number");

			do
			{
				result.Add(new GetTranscriptionistWorkstationPolicyRow
				{
					FirewallEnforcementLevel = GetNonNullFieldValue<Int32>(reader, ordFirewallEnforcementLevel),
					AntivirusEnforcementLevel = GetNonNullFieldValue<Int32>(reader, ordAntivirusEnforcementLevel),
					AntispywareEnforcementLevel = GetNonNullFieldValue<Int32>(reader, ordAntispywareEnforcementLevel),
					IPv4Mask = GetField<String>(reader, ordIPv4Mask),
					DomainName = GetField<String>(reader, ordDomainName),
					MoboSerialNumber = GetField<String>(reader, ordMoboSerialNumber),
					BiosSerialNumber = GetField<String>(reader, ordBiosSerialNumber),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetUserVRStatusByDocumentIDRow>> GetUserVRStatusByDocumentIDAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 documentID, Int32 dictationFileTypeID) => GetUserVRStatusByDocumentIDAsync(connection, clientID, userID, documentID, dictationFileTypeID, CancellationToken.None);
	public static async Task<List<GetUserVRStatusByDocumentIDRow>> GetUserVRStatusByDocumentIDAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 documentID, Int32 dictationFileTypeID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_User_VR_Status_ByDocumentID");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictation_File_Type_ID", dictationFileTypeID, SqlDbType.Int, 4));

		var result = new List<GetUserVRStatusByDocumentIDRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordProfileCount = reader.GetOrdinal("Profile_Count");

			do
			{
				result.Add(new GetUserVRStatusByDocumentIDRow
				{
					ProfileCount = GetFieldValue<Int32>(reader, ordProfileCount),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetValidationRuleSnippetsByClientIdRow>> GetValidationRuleSnippetsByClientIdAsync(SqlConnection connection, Int32 clientID) => GetValidationRuleSnippetsByClientIdAsync(connection, clientID, CancellationToken.None);
	public static async Task<List<GetValidationRuleSnippetsByClientIdRow>> GetValidationRuleSnippetsByClientIdAsync(SqlConnection connection, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Validation_Rule_Snippets_ByClientId");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetValidationRuleSnippetsByClientIdRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordValidationRuleID = reader.GetOrdinal("Validation_Rule_ID");
			int ordValidationSnippetID = reader.GetOrdinal("Validation_Snippet_ID");
			int ordTranscriptionTagID = reader.GetOrdinal("Transcription_Tag_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordSnippetData = reader.GetOrdinal("Snippet_Data");

			do
			{
				result.Add(new GetValidationRuleSnippetsByClientIdRow
				{
					ValidationRuleID = GetNonNullFieldValue<Int32>(reader, ordValidationRuleID),
					ValidationSnippetID = GetNonNullFieldValue<Int32>(reader, ordValidationSnippetID),
					TranscriptionTagID = GetFieldValue<Int32>(reader, ordTranscriptionTagID),
					Name = GetNonNullField<String>(reader, ordName),
					SnippetData = GetNonNullField<String>(reader, ordSnippetData),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetValidationRulesRow>> GetValidationRulesAsync(SqlConnection connection, Int32 clientID) => GetValidationRulesAsync(connection, clientID, CancellationToken.None);
	public static async Task<List<GetValidationRulesRow>> GetValidationRulesAsync(SqlConnection connection, Int32 clientID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Validation_Rules");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));

		var result = new List<GetValidationRulesRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordValidationRuleID = reader.GetOrdinal("Validation_Rule_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordName = reader.GetOrdinal("Name");
			int ordDescription = reader.GetOrdinal("Description");
			int ordIsActive = reader.GetOrdinal("Is_Active");
			int ordDocumentTypeFilterType = reader.GetOrdinal("Document_Type_Filter_Type");
			int ordLocationFilterType = reader.GetOrdinal("Location_Filter_Type");
			int ordUserFilterType = reader.GetOrdinal("User_Filter_Type");
			int ordStatFilterType = reader.GetOrdinal("Stat_Filter_Type");
			int ordMarkForQA = reader.GetOrdinal("Mark_For_QA");
			int ordMarkForReview = reader.GetOrdinal("Mark_For_Review");
			int ordUserGroupFilterType = reader.GetOrdinal("UserGroup_Filter_Type");
			int ordModifiedUser = reader.GetOrdinal("Modified_User");
			int ordModifiedDate = reader.GetOrdinal("Modified_Date");
			int ordUserIdArrayJson = reader.GetOrdinal("UserIdArrayJson");
			int ordLocationIdArrayJson = reader.GetOrdinal("LocationIdArrayJson");
			int ordDocumentIdArrayJson = reader.GetOrdinal("DocumentIdArrayJson");
			int ordUserGroupIdArrayJson = reader.GetOrdinal("UserGroupIdArrayJson");
			int ordCompletionOption = reader.GetOrdinal("Completion_Option");
			int ordUseReview1 = reader.GetOrdinal("Use_Review1");
			int ordUseReview2 = reader.GetOrdinal("Use_Review2");
			int ordUsePreliminary = reader.GetOrdinal("Use_Preliminary");
			int ordUseFinal1 = reader.GetOrdinal("Use_Final1");
			int ordUseFinal2 = reader.GetOrdinal("Use_Final2");

			do
			{
				result.Add(new GetValidationRulesRow
				{
					ValidationRuleID = GetNonNullFieldValue<Int32>(reader, ordValidationRuleID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					Name = GetNonNullField<String>(reader, ordName),
					Description = GetField<String>(reader, ordDescription),
					IsActive = GetNonNullFieldValue<Boolean>(reader, ordIsActive),
					DocumentTypeFilterType = GetNonNullField<String>(reader, ordDocumentTypeFilterType),
					LocationFilterType = GetNonNullField<String>(reader, ordLocationFilterType),
					UserFilterType = GetNonNullField<String>(reader, ordUserFilterType),
					StatFilterType = GetNonNullField<String>(reader, ordStatFilterType),
					MarkForQA = GetNonNullFieldValue<Boolean>(reader, ordMarkForQA),
					MarkForReview = GetNonNullFieldValue<Boolean>(reader, ordMarkForReview),
					UserGroupFilterType = GetNonNullField<String>(reader, ordUserGroupFilterType),
					ModifiedUser = GetNonNullField<String>(reader, ordModifiedUser),
					ModifiedDate = GetNonNullFieldValue<DateTime>(reader, ordModifiedDate),
					UserIdArrayJson = GetNonNullField<String>(reader, ordUserIdArrayJson),
					LocationIdArrayJson = GetNonNullField<String>(reader, ordLocationIdArrayJson),
					DocumentIdArrayJson = GetNonNullField<String>(reader, ordDocumentIdArrayJson),
					UserGroupIdArrayJson = GetNonNullField<String>(reader, ordUserGroupIdArrayJson),
					CompletionOption = GetNonNullFieldValue<Int32>(reader, ordCompletionOption),
					UseReview1 = GetNonNullFieldValue<Boolean>(reader, ordUseReview1),
					UseReview2 = GetNonNullFieldValue<Boolean>(reader, ordUseReview2),
					UsePreliminary = GetNonNullFieldValue<Boolean>(reader, ordUsePreliminary),
					UseFinal1 = GetNonNullFieldValue<Boolean>(reader, ordUseFinal1),
					UseFinal2 = GetNonNullFieldValue<Boolean>(reader, ordUseFinal2),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetVRStatusByDictationIDRow>> GetVRStatusByDictationIDAsync(SqlConnection connection, String clientName, String userDictationID, String audioFileExtension, String documentTypeDictationID) => GetVRStatusByDictationIDAsync(connection, clientName, userDictationID, audioFileExtension, documentTypeDictationID, CancellationToken.None);
	public static async Task<List<GetVRStatusByDictationIDRow>> GetVRStatusByDictationIDAsync(SqlConnection connection, String clientName, String userDictationID, String audioFileExtension, String documentTypeDictationID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_VR_Status_ByDictationID");

		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@User_Dictation_ID", userDictationID, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@AudioFileExtension", audioFileExtension, SqlDbType.VarChar, 5));
		cmd.Parameters.Add(CreateParameter("@Document_Type_Dictation_ID", documentTypeDictationID, SqlDbType.VarChar, 20));

		var result = new List<GetVRStatusByDictationIDRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordProfileCount = reader.GetOrdinal("Profile_Count");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordDocumentTypeID = reader.GetOrdinal("Document_Type_ID");

			do
			{
				result.Add(new GetVRStatusByDictationIDRow
				{
					ProfileCount = GetFieldValue<Int32>(reader, ordProfileCount),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					DocumentTypeID = GetFieldValue<Int32>(reader, ordDocumentTypeID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetWorkItemTranscriptionRow>> GetWorkItemTranscriptionAsync(SqlConnection connection, Guid workItemID) => GetWorkItemTranscriptionAsync(connection, workItemID, CancellationToken.None);
	public static async Task<List<GetWorkItemTranscriptionRow>> GetWorkItemTranscriptionAsync(SqlConnection connection, Guid workItemID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_Work_Item_Transcription");

		cmd.Parameters.Add(CreateParameter("@Work_Item_ID", workItemID, SqlDbType.UniqueIdentifier, 16));

		var result = new List<GetWorkItemTranscriptionRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordReceivedTranscriptionJobID = reader.GetOrdinal("Received_Transcription_Job_ID");
			int ordTranscriptionContent = reader.GetOrdinal("Transcription_Content");
			int ordContentTypeID = reader.GetOrdinal("Content_Type_ID");

			do
			{
				result.Add(new GetWorkItemTranscriptionRow
				{
					ReceivedTranscriptionJobID = GetNonNullFieldValue<Guid>(reader, ordReceivedTranscriptionJobID),
					TranscriptionContent = GetNonNullField<Byte[]>(reader, ordTranscriptionContent),
					ContentTypeID = GetFieldValue<Int32>(reader, ordContentTypeID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetWorkItemDictationFileNameRow>> GetWorkItemDictationFileNameAsync(SqlConnection connection, Guid workItemID) => GetWorkItemDictationFileNameAsync(connection, workItemID, CancellationToken.None);
	public static async Task<List<GetWorkItemDictationFileNameRow>> GetWorkItemDictationFileNameAsync(SqlConnection connection, Guid workItemID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_WorkItem_DictationFileName");

		cmd.Parameters.Add(CreateParameter("@Work_Item_ID", workItemID, SqlDbType.UniqueIdentifier, 16));

		var result = new List<GetWorkItemDictationFileNameRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDictationFileName = reader.GetOrdinal("Dictation_File_Name");

			do
			{
				result.Add(new GetWorkItemDictationFileNameRow
				{
					DictationFileName = GetField<String>(reader, ordDictationFileName),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<GetWorkItemIDByTIDRow>> GetWorkItemIDByTIDAsync(SqlConnection connection, Int32 transcriptionistID, String machineName, Int32 transcriptionID) => GetWorkItemIDByTIDAsync(connection, transcriptionistID, machineName, transcriptionID, CancellationToken.None);
	public static async Task<List<GetWorkItemIDByTIDRow>> GetWorkItemIDByTIDAsync(SqlConnection connection, Int32 transcriptionistID, String machineName, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Get_WorkItemID_ByTID");

		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Machine_Name", machineName, SqlDbType.NVarChar, 512));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		var result = new List<GetWorkItemIDByTIDRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordWorkItemID = reader.GetOrdinal("Work_Item_ID");

			do
			{
				result.Add(new GetWorkItemIDByTIDRow
				{
					WorkItemID = GetNonNullFieldValue<Guid>(reader, ordWorkItemID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<Int32> InvalidateWorkItemAsync(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 transcriptionistID, String comment) => InvalidateWorkItemAsync(connection, transcriptionID, clientID, transcriptionistID, comment, CancellationToken.None);
	public static async Task<Int32> InvalidateWorkItemAsync(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 transcriptionistID, String comment, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Invalidate_Work_Item");

		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Transcriptionist_ID", transcriptionistID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Comment", comment, SqlDbType.VarChar, 1000));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> LogClientUserPasswordResetAttemptAsync(SqlConnection connection, String clientName, String userName, String iPAddress, String workstation, String programVersion, String actionResult) => LogClientUserPasswordResetAttemptAsync(connection, clientName, userName, iPAddress, workstation, programVersion, actionResult, CancellationToken.None);
	public static async Task<Int32> LogClientUserPasswordResetAttemptAsync(SqlConnection connection, String clientName, String userName, String iPAddress, String workstation, String programVersion, String actionResult, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Log_Client_User_Password_Reset_Attempt");

		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Action_Result", actionResult, SqlDbType.Char, 1));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> LogDictationPlayedAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 dictationID, String userType) => LogDictationPlayedAsync(connection, clientID, userID, dictationID, userType, CancellationToken.None);
	public static async Task<Int32> LogDictationPlayedAsync(SqlConnection connection, Int32 clientID, Int32 userID, Int32 dictationID, String userType, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Log_Dictation_Played");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Dictation_ID", dictationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_Type", userType, SqlDbType.Char, 1));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> LogFailedLoginAttemptAsync(SqlConnection connection, String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion, Int32 logEventID) => LogFailedLoginAttemptAsync(connection, clientName, userName, userPass, iPAddress, workstation, programVersion, logEventID, CancellationToken.None);
	public static async Task<Int32> LogFailedLoginAttemptAsync(SqlConnection connection, String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion, Int32 logEventID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Log_Failed_Login_Attempt");

		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserPass", userPass, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Log_Event_ID", logEventID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> LogFailedTranscriptionistLoginAttemptAsync(SqlConnection connection, String companyCode, String userName, String userPass, String iPAddress, String workstation, String programVersion, Int32 logEventID, String mACAddress) => LogFailedTranscriptionistLoginAttemptAsync(connection, companyCode, userName, userPass, iPAddress, workstation, programVersion, logEventID, mACAddress, CancellationToken.None);
	public static async Task<Int32> LogFailedTranscriptionistLoginAttemptAsync(SqlConnection connection, String companyCode, String userName, String userPass, String iPAddress, String workstation, String programVersion, Int32 logEventID, String mACAddress, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Log_Failed_Transcriptionist_Login_Attempt");

		cmd.Parameters.Add(CreateParameter("@Company_Code", companyCode, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserPass", userPass, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Log_Event_ID", logEventID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@MACAddress", mACAddress, SqlDbType.VarChar, 20));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> LogSuccessfulLoginAttemptAsync(SqlConnection connection, String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion, Int32 logEventID) => LogSuccessfulLoginAttemptAsync(connection, clientName, userName, userPass, iPAddress, workstation, programVersion, logEventID, CancellationToken.None);
	public static async Task<Int32> LogSuccessfulLoginAttemptAsync(SqlConnection connection, String clientName, String userName, String userPass, String iPAddress, String workstation, String programVersion, Int32 logEventID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Log_Successful_Login_Attempt");

		cmd.Parameters.Add(CreateParameter("@Client_Name", clientName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserPass", userPass, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Log_Event_ID", logEventID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> LogSuccessfulTranscriptionistLoginAttemptAsync(SqlConnection connection, String companyCode, String userName, String userPass, String iPAddress, String workstation, String programVersion, Int32 logEventID, String mACAddress) => LogSuccessfulTranscriptionistLoginAttemptAsync(connection, companyCode, userName, userPass, iPAddress, workstation, programVersion, logEventID, mACAddress, CancellationToken.None);
	public static async Task<Int32> LogSuccessfulTranscriptionistLoginAttemptAsync(SqlConnection connection, String companyCode, String userName, String userPass, String iPAddress, String workstation, String programVersion, Int32 logEventID, String mACAddress, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Log_Successful_Transcriptionist_Login_Attempt");

		cmd.Parameters.Add(CreateParameter("@Company_Code", companyCode, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@UserPass", userPass, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@IPAddress", iPAddress, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Workstation", workstation, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Program_Version", programVersion, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Log_Event_ID", logEventID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@MACAddress", mACAddress, SqlDbType.VarChar, 20));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<List<MapToDocumentTypeIDRow>> MapToDocumentTypeIDAsync(SqlConnection connection, Int32 clientID, String documentType, String dictationID, String clientCode) => MapToDocumentTypeIDAsync(connection, clientID, documentType, dictationID, clientCode, CancellationToken.None);
	public static async Task<List<MapToDocumentTypeIDRow>> MapToDocumentTypeIDAsync(SqlConnection connection, Int32 clientID, String documentType, String dictationID, String clientCode, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Map_To_Document_Type_ID");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_Type", documentType, SqlDbType.VarChar, 8));
		cmd.Parameters.Add(CreateParameter("@Dictation_ID", dictationID, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Client_Code", clientCode, SqlDbType.VarChar, 50));

		var result = new List<MapToDocumentTypeIDRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordDocumentTypeID = reader.GetOrdinal("Document_Type_ID");

			do
			{
				result.Add(new MapToDocumentTypeIDRow
				{
					DocumentTypeID = GetFieldValue<Int32>(reader, ordDocumentTypeID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<MapToLocationIDRow>> MapToLocationIDAsync(SqlConnection connection, Int32 clientID, String medicalRecordsLocationName, String dictationID, String clientCode) => MapToLocationIDAsync(connection, clientID, medicalRecordsLocationName, dictationID, clientCode, CancellationToken.None);
	public static async Task<List<MapToLocationIDRow>> MapToLocationIDAsync(SqlConnection connection, Int32 clientID, String medicalRecordsLocationName, String dictationID, String clientCode, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Map_To_Location_ID");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Medical_Records_Location_Name", medicalRecordsLocationName, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Dictation_ID", dictationID, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Client_Code", clientCode, SqlDbType.VarChar, 50));

		var result = new List<MapToLocationIDRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordLocationID = reader.GetOrdinal("Location_ID");

			do
			{
				result.Add(new MapToLocationIDRow
				{
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<MapToUserIDRow>> MapToUserIDAsync(SqlConnection connection, Int32 clientID, String username, String dictationID, String clientCode) => MapToUserIDAsync(connection, clientID, username, dictationID, clientCode, CancellationToken.None);
	public static async Task<List<MapToUserIDRow>> MapToUserIDAsync(SqlConnection connection, Int32 clientID, String username, String dictationID, String clientCode, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Map_To_User_ID");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Username", username, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Dictation_ID", dictationID, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Client_Code", clientCode, SqlDbType.VarChar, 50));

		var result = new List<MapToUserIDRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserID = reader.GetOrdinal("User_ID");

			do
			{
				result.Add(new MapToUserIDRow
				{
					UserID = GetFieldValue<Int32>(reader, ordUserID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<Int32> RepoolWorkItemAsync(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 authorID, Int32 documentID, Int32 locationID, Int32 userID) => RepoolWorkItemAsync(connection, transcriptionID, clientID, authorID, documentID, locationID, userID, CancellationToken.None);
	public static async Task<Int32> RepoolWorkItemAsync(SqlConnection connection, Int32 transcriptionID, Int32 clientID, Int32 authorID, Int32 documentID, Int32 locationID, Int32 userID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Repool_Work_Item");

		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Author_ID", authorID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> ResetInScribeUserPasswordAsync(SqlConnection connection, Int32 userID, String newPassword, Int32 companyID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID) => ResetInScribeUserPasswordAsync(connection, userID, newPassword, companyID, passwordSalt, passwordHash, passwordHashAlgorithmID, CancellationToken.None);
	public static async Task<Int32> ResetInScribeUserPasswordAsync(SqlConnection connection, Int32 userID, String newPassword, Int32 companyID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Reset_InScribe_User_Password");

		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@NewPassword", newPassword, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Password_Salt", passwordSalt, SqlDbType.VarBinary, 36));
		cmd.Parameters.Add(CreateParameter("@Password_Hash", passwordHash, SqlDbType.VarBinary, 128));
		cmd.Parameters.Add(CreateParameter("@Password_Hash_Algorithm_ID", passwordHashAlgorithmID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> ResetInScribeUserPassword2Async(SqlConnection connection, Int32 userID, Int32 companyID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID) => ResetInScribeUserPassword2Async(connection, userID, companyID, passwordSalt, passwordHash, passwordHashAlgorithmID, CancellationToken.None);
	public static async Task<Int32> ResetInScribeUserPassword2Async(SqlConnection connection, Int32 userID, Int32 companyID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Reset_InScribe_User_Password_2");

		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Password_Salt", passwordSalt, SqlDbType.VarBinary, 36));
		cmd.Parameters.Add(CreateParameter("@Password_Hash", passwordHash, SqlDbType.VarBinary, 128));
		cmd.Parameters.Add(CreateParameter("@Password_Hash_Algorithm_ID", passwordHashAlgorithmID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<List<SearchClientTranscriptionDictationsRow>> SearchClientTranscriptionDictationsAsync(SqlConnection connection, Int32 clientId, String patientID, String accountNumber, String orderNumber, String receiptCode, Int32 documentID, Int32 locationID) => SearchClientTranscriptionDictationsAsync(connection, clientId, patientID, accountNumber, orderNumber, receiptCode, documentID, locationID, CancellationToken.None);
	public static async Task<List<SearchClientTranscriptionDictationsRow>> SearchClientTranscriptionDictationsAsync(SqlConnection connection, Int32 clientId, String patientID, String accountNumber, String orderNumber, String receiptCode, Int32 documentID, Int32 locationID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Search_Client_Transcription_Dictations");

		cmd.Parameters.Add(CreateParameter("@Client_Id", clientId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Account_Number", accountNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Order_Number", orderNumber, SqlDbType.VarChar, 50));
		cmd.Parameters.Add(CreateParameter("@Receipt_Code", receiptCode, SqlDbType.VarChar, 10));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Location_ID", locationID, SqlDbType.Int, 4));

		var result = new List<SearchClientTranscriptionDictationsRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordTranscriptionID = reader.GetOrdinal("Transcription_ID");
			int ordDictationID = reader.GetOrdinal("Dictation_ID");
			int ordClientID = reader.GetOrdinal("Client_ID");
			int ordUserID = reader.GetOrdinal("User_ID");
			int ordDocumentID = reader.GetOrdinal("Document_ID");
			int ordLocationID = reader.GetOrdinal("Location_ID");
			int ordIsStat = reader.GetOrdinal("Is_Stat");
			int ordSourceMachineName = reader.GetOrdinal("Source_Machine_Name");
			int ordLength = reader.GetOrdinal("Length");
			int ordDateDictated = reader.GetOrdinal("Date_Dictated");
			int ordPatientId = reader.GetOrdinal("Patient_Id");
			int ordAppointmentDate = reader.GetOrdinal("Appointment_Date");
			int ordReceiptCode = reader.GetOrdinal("Receipt_Code");

			do
			{
				result.Add(new SearchClientTranscriptionDictationsRow
				{
					TranscriptionID = GetNonNullFieldValue<Int32>(reader, ordTranscriptionID),
					DictationID = GetFieldValue<Int32>(reader, ordDictationID),
					ClientID = GetFieldValue<Int32>(reader, ordClientID),
					UserID = GetFieldValue<Int32>(reader, ordUserID),
					DocumentID = GetFieldValue<Int32>(reader, ordDocumentID),
					LocationID = GetFieldValue<Int32>(reader, ordLocationID),
					IsStat = GetFieldValue<Boolean>(reader, ordIsStat),
					SourceMachineName = GetField<String>(reader, ordSourceMachineName),
					Length = GetFieldValue<Int32>(reader, ordLength),
					DateDictated = GetFieldValue<DateTimeOffset>(reader, ordDateDictated),
					PatientId = GetField<String>(reader, ordPatientId),
					AppointmentDate = GetFieldValue<DateTime>(reader, ordAppointmentDate),
					ReceiptCode = GetField<String>(reader, ordReceiptCode),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<Int32> SearchCompanyUserTranscriptionsAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 clientID, Int32 userID, Int32 documentID, String patientID, String patientName, Int32 transcriptionID) => SearchCompanyUserTranscriptionsAsync(connection, companyID, companyUserID, clientID, userID, documentID, patientID, patientName, transcriptionID, CancellationToken.None);
	public static async Task<Int32> SearchCompanyUserTranscriptionsAsync(SqlConnection connection, Int32 companyID, Int32 companyUserID, Int32 clientID, Int32 userID, Int32 documentID, String patientID, String patientName, Int32 transcriptionID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Search_Company_User_Transcriptions");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Company_User_ID", companyUserID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Document_ID", documentID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Patient_ID", patientID, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Patient_Name", patientName, SqlDbType.VarChar, 350));
		cmd.Parameters.Add(CreateParameter("@Transcription_ID", transcriptionID, SqlDbType.Int, 4));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> SendClientUserEmailAsync(SqlConnection connection, Int32 clientID, Int32 userID, String subject, String body, Byte format) => SendClientUserEmailAsync(connection, clientID, userID, subject, body, format, CancellationToken.None);
	public static async Task<Int32> SendClientUserEmailAsync(SqlConnection connection, Int32 clientID, Int32 userID, String subject, String body, Byte format, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Send_Client_User_Email");

		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Subject", subject, SqlDbType.VarChar, 1000));
		cmd.Parameters.Add(CreateParameter("@Body", body, SqlDbType.VarChar));
		cmd.Parameters.Add(CreateParameter("@Format", format, SqlDbType.TinyInt, 1));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> SendCompanyUserEmailAsync(SqlConnection connection, Int32 companyID, Int32 userID, String subject, String body, Byte format) => SendCompanyUserEmailAsync(connection, companyID, userID, subject, body, format, CancellationToken.None);
	public static async Task<Int32> SendCompanyUserEmailAsync(SqlConnection connection, Int32 companyID, Int32 userID, String subject, String body, Byte format, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Send_Company_User_Email");

		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Subject", subject, SqlDbType.VarChar, 1000));
		cmd.Parameters.Add(CreateParameter("@Body", body, SqlDbType.VarChar));
		cmd.Parameters.Add(CreateParameter("@Format", format, SqlDbType.TinyInt, 1));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> SendInScribeUserPasswordEmailAsync(SqlConnection connection, Int32 userID, Int32 companyID, String resetCode) => SendInScribeUserPasswordEmailAsync(connection, userID, companyID, resetCode, CancellationToken.None);
	public static async Task<Int32> SendInScribeUserPasswordEmailAsync(SqlConnection connection, Int32 userID, Int32 companyID, String resetCode, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Send_InScribe_User_Password_Email");

		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@ResetCode", resetCode, SqlDbType.VarChar));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> UpdateClientPatientProblemListCategoryContentAsync(SqlConnection connection, Int32 clientId, Guid patientGuid, Int32 categoryId, String content) => UpdateClientPatientProblemListCategoryContentAsync(connection, clientId, patientGuid, categoryId, content, CancellationToken.None);
	public static async Task<Int32> UpdateClientPatientProblemListCategoryContentAsync(SqlConnection connection, Int32 clientId, Guid patientGuid, Int32 categoryId, String content, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Update_Client_Patient_ProblemList_Category_Content");

		cmd.Parameters.Add(CreateParameter("@Client_Id", clientId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@patient_Guid", patientGuid, SqlDbType.UniqueIdentifier, 16));
		cmd.Parameters.Add(CreateParameter("@Category_Id", categoryId, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Content", content, SqlDbType.VarChar));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<List<UpdateClientUserPasswordRow>> UpdateClientUserPasswordAsync(SqlConnection connection, Int32 userID, String newPassword, Int32 clientID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID) => UpdateClientUserPasswordAsync(connection, userID, newPassword, clientID, passwordSalt, passwordHash, passwordHashAlgorithmID, CancellationToken.None);
	public static async Task<List<UpdateClientUserPasswordRow>> UpdateClientUserPasswordAsync(SqlConnection connection, Int32 userID, String newPassword, Int32 clientID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Update_Client_User_Password");

		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@NewPassword", newPassword, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Password_Salt", passwordSalt, SqlDbType.VarBinary, 36));
		cmd.Parameters.Add(CreateParameter("@Password_Hash", passwordHash, SqlDbType.VarBinary, 128));
		cmd.Parameters.Add(CreateParameter("@Password_Hash_Algorithm_ID", passwordHashAlgorithmID, SqlDbType.Int, 4));

		var result = new List<UpdateClientUserPasswordRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordFailureDescription = reader.GetOrdinal("FailureDescription");
			int ordLineCount = reader.GetOrdinal("LineCount");

			do
			{
				result.Add(new UpdateClientUserPasswordRow
				{
					FailureDescription = GetField<String>(reader, ordFailureDescription),
					LineCount = GetFieldValue<Int32>(reader, ordLineCount),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<UpdateClientUserPassword2_Row>> UpdateClientUserPassword2Async(SqlConnection connection, Int32 userID, String newPassword, Int32 clientID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID) => UpdateClientUserPassword2Async(connection, userID, newPassword, clientID, passwordSalt, passwordHash, passwordHashAlgorithmID, CancellationToken.None);
	public static async Task<List<UpdateClientUserPassword2_Row>> UpdateClientUserPassword2Async(SqlConnection connection, Int32 userID, String newPassword, Int32 clientID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Update_Client_User_Password_2");

		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@NewPassword", newPassword, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Client_ID", clientID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Password_Salt", passwordSalt, SqlDbType.VarBinary, 36));
		cmd.Parameters.Add(CreateParameter("@Password_Hash", passwordHash, SqlDbType.VarBinary, 128));
		cmd.Parameters.Add(CreateParameter("@Password_Hash_Algorithm_ID", passwordHashAlgorithmID, SqlDbType.Int, 4));

		var result = new List<UpdateClientUserPassword2_Row>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserID = reader.GetOrdinal("User_ID");

			do
			{
				result.Add(new UpdateClientUserPassword2_Row
				{
					UserID = GetFieldValue<Int32>(reader, ordUserID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<UpdateCompanyUserPasswordRow>> UpdateCompanyUserPasswordAsync(SqlConnection connection, Int32 userID, String newPassword, Int32 companyID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID) => UpdateCompanyUserPasswordAsync(connection, userID, newPassword, companyID, passwordSalt, passwordHash, passwordHashAlgorithmID, CancellationToken.None);
	public static async Task<List<UpdateCompanyUserPasswordRow>> UpdateCompanyUserPasswordAsync(SqlConnection connection, Int32 userID, String newPassword, Int32 companyID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Update_Company_User_Password");

		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@NewPassword", newPassword, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Password_Salt", passwordSalt, SqlDbType.VarBinary, 36));
		cmd.Parameters.Add(CreateParameter("@Password_Hash", passwordHash, SqlDbType.VarBinary, 128));
		cmd.Parameters.Add(CreateParameter("@Password_Hash_Algorithm_ID", passwordHashAlgorithmID, SqlDbType.Int, 4));

		var result = new List<UpdateCompanyUserPasswordRow>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordFailureDescription = reader.GetOrdinal("FailureDescription");
			int ordLineCount = reader.GetOrdinal("LineCount");

			do
			{
				result.Add(new UpdateCompanyUserPasswordRow
				{
					FailureDescription = GetField<String>(reader, ordFailureDescription),
					LineCount = GetFieldValue<Int32>(reader, ordLineCount),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<List<UpdateCompanyUserPassword2_Row>> UpdateCompanyUserPassword2Async(SqlConnection connection, Int32 userID, String newPassword, Int32 companyID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID) => UpdateCompanyUserPassword2Async(connection, userID, newPassword, companyID, passwordSalt, passwordHash, passwordHashAlgorithmID, CancellationToken.None);
	public static async Task<List<UpdateCompanyUserPassword2_Row>> UpdateCompanyUserPassword2Async(SqlConnection connection, Int32 userID, String newPassword, Int32 companyID, Byte[] passwordSalt, Byte[] passwordHash, Int32 passwordHashAlgorithmID, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Update_Company_User_Password_2");

		cmd.Parameters.Add(CreateParameter("@User_ID", userID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@NewPassword", newPassword, SqlDbType.VarChar, 20));
		cmd.Parameters.Add(CreateParameter("@Company_ID", companyID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@Password_Salt", passwordSalt, SqlDbType.VarBinary, 36));
		cmd.Parameters.Add(CreateParameter("@Password_Hash", passwordHash, SqlDbType.VarBinary, 128));
		cmd.Parameters.Add(CreateParameter("@Password_Hash_Algorithm_ID", passwordHashAlgorithmID, SqlDbType.Int, 4));

		var result = new List<UpdateCompanyUserPassword2_Row>();
		using var reader = await cmd.ExecuteReaderAsync(cancellationToken);
		if (await reader.ReadAsync(cancellationToken))
		{
			int ordUserID = reader.GetOrdinal("User_ID");

			do
			{
				result.Add(new UpdateCompanyUserPassword2_Row
				{
					UserID = GetFieldValue<Int32>(reader, ordUserID),
				});
			} while (await reader.ReadAsync(cancellationToken));
		}
		return result;
	}

	public static Task<Int32> UpdateGeoLocationAsync(SqlConnection connection, Int32 logEventsSecurityID, String geoLocation) => UpdateGeoLocationAsync(connection, logEventsSecurityID, geoLocation, CancellationToken.None);
	public static async Task<Int32> UpdateGeoLocationAsync(SqlConnection connection, Int32 logEventsSecurityID, String geoLocation, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Update_Geo_Location");

		cmd.Parameters.Add(CreateParameter("@logEventsSecurityID", logEventsSecurityID, SqlDbType.Int, 4));
		cmd.Parameters.Add(CreateParameter("@geoLocation", geoLocation, SqlDbType.VarChar, 2));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> UpdatePasswordLockAsync(SqlConnection connection, String userName, String clientName) => UpdatePasswordLockAsync(connection, userName, clientName, CancellationToken.None);
	public static async Task<Int32> UpdatePasswordLockAsync(SqlConnection connection, String userName, String clientName, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Update_Password_Lock");

		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.Char, 8));
		cmd.Parameters.Add(CreateParameter("@ClientName", clientName, SqlDbType.Char, 26));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> UpdatePasswordLock2Async(SqlConnection connection, String userName, String clientName) => UpdatePasswordLock2Async(connection, userName, clientName, CancellationToken.None);
	public static async Task<Int32> UpdatePasswordLock2Async(SqlConnection connection, String userName, String clientName, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Update_Password_Lock_2");

		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@ClientName", clientName, SqlDbType.Char, 26));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

	public static Task<Int32> UpdateTranscriptionistPasswordLockAsync(SqlConnection connection, String userName, String companyCode) => UpdateTranscriptionistPasswordLockAsync(connection, userName, companyCode, CancellationToken.None);
	public static async Task<Int32> UpdateTranscriptionistPasswordLockAsync(SqlConnection connection, String userName, String companyCode, CancellationToken cancellationToken)
	{
		using SqlCommand cmd = CreateStoredProcedure(connection, "DATA_001.ShadowSync.Update_Transcriptionist_Password_Lock");

		cmd.Parameters.Add(CreateParameter("@UserName", userName, SqlDbType.VarChar, 26));
		cmd.Parameters.Add(CreateParameter("@Company_Code", companyCode, SqlDbType.Char, 10));

		return await cmd.ExecuteNonQueryAsync(cancellationToken);
	}

}
